{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":"<p>DOSBox Staging is a modern continuation of DOSBox with advanced features and current development practices.</p> <p>It is meant as a (mostly) drop-in replacement for older DOSBox versions\u2014your existing configurations will continue to work, but you will have access to many advanced features.</p> <p>Because DOSBox Staging comes with sensible defaults, you\u2019ll need to write a lot less configuration than with older DOSBox versions. Most games and application software require no tweaking and will work fine with the stock settings. However, the extensive configuration options and advanced features are available if you wish to dwelve deeper.</p>"},{"location":"about/#goals","title":"Goals","text":"<ul> <li>Improve the out-of-the-box experience for new users.</li> <li>Encourage new contributors by removing barriers to entry.</li> <li>Implement new features and quality-of-life improvements.</li> <li>Fix, clean up, and integrate notable community-developed patches that   fill valuable general-purpose and/or gaming-focused emulation holes   (provided they don\u2019t impact broader compatibility, performance, stability,   or code maintainability).</li> <li>Prioritize the quality of newly written code to minimize technical   debt and ease future maintenance, which generally means following the   Staging Coding Style   Guide   and being aware of best practices, like the C++ Core   Guidelines.</li> <li>Deliver a consistent cross-platform experience.</li> <li>Leverage upstream and community developments in DOSBox.</li> <li>Focus on supporting up-to-date, current operating systems and modern  hardware.</li> </ul> <p>A summary of technical and feature differences is here.</p> <p>We plan to add the features listed in the backlog.</p>"},{"location":"about/#non-goals","title":"Non-goals","text":"<ul> <li> <p>Support old operating systems (Windows 9x/Me/XP, OS/2, and Mac OS X 10.5)   and limited CPU/memory hardware, which are constraints   DOSBox continues to support.</p> </li> <li> <p>Support the use of Windows 9x/Me in the emulator. Windows 9x/Me emulation   is supported by projects such as QEMU and   VirtualBox, although DOSBox forks like   DOSBox-X and DOSBox   Pure also support this. This   may change if wanted by the DOSBox Staging community in general.</p> </li> <li> <p>Pursue hardware accuracy when it impacts the above goals or detracts   from the source material, although config options may be added in case of   issues. If you need perfect emulation in terms of accuracy, you may look at   PCem and its derivatives like   86Box and PCBox, which   are examples of cycle-accurate emulators.</p> </li> <li> <p>Be the fastest DOS emulator on x86 hardware. Linux users interested in   emulation speed should look at dosemu2.</p> </li> <li> <p>Act as a general-purpose DOS operating system. For that, there is   FreeDOS.</p> </li> </ul>"},{"location":"about/#relationship-to-dosbox","title":"Relationship to DOSBox","text":"<p>DOSBox Staging is separate from and not supported by the SourceForge-hosted DOSBox project or its development team, the DOSBox Team.</p> <p>We acknowledge and are thankful for the work shared by all DOSBox contributors.</p>"},{"location":"about/#team","title":"Team","text":"<p>This project is maintained by the DOSBox Staging team.</p>"},{"location":"about/#license","title":"License","text":"<p>Content on this site is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</p> <p>DOSBox Staging is licensed under a GNU GPL version 2 or later.</p>"},{"location":"downloads/development-builds/","title":"Development builds","text":"<p>Warning</p> <p>These are unstable development snapshots intended for testing and showcasing new features; if you want to download a stable build, head on to the Linux, Windows, or macOS download pages.</p> <p>Build artifacts are hosted on GitHub; you need to be logged in to download them.</p> Download link Build version Date <p>\u00b9 Windows MSYS2 builds include 64-bit ZIP and Installer with both 64-bit MSYS2 (default) and 64-bit MSVC (optional).</p> <p>\u00b2 Windows MSVC builds include 32-bit ZIP and 64-bit ZIP.</p>"},{"location":"downloads/development-builds/#installation-notes","title":"Installation notes","text":"<p>Testing new features might require a manual reset of the configuration file.  DOSBox Staging builds use a configuration file named <code>dosbox-staging.conf</code> located in:</p> Linux <code>~/.config/dosbox/</code> Windows <code>C:\\Users\\USERNAME&gt;\\AppData\\Local\\DOSBox\\</code> macOS <code>~/Library/Preferences/DOSBox/</code>"},{"location":"downloads/development-builds/#linux","title":"Linux","text":"<p>The tarball contains a dynamically-linked x86_64 build; you\u2019ll need additional dependencies installed via your package manager.</p>"},{"location":"downloads/development-builds/#fedora","title":"Fedora","text":"<pre><code>sudo dnf install SDL2 SDL2_image SDL2_net opusfile\n</code></pre>"},{"location":"downloads/development-builds/#debian-ubuntu","title":"Debian, Ubuntu","text":"<pre><code>sudo apt install libsdl2-2.0-0 libsdl2-image-2.0-0 libsdl2-net-2.0-0 libopusfile0\n</code></pre>"},{"location":"downloads/development-builds/#arch-manjaro","title":"Arch, Manjaro","text":"<pre><code>sudo pacman -S sdl2 sdl2_image sdl2_net opusfile\n</code></pre>"},{"location":"downloads/development-builds/#windows","title":"Windows","text":"<p>Windows executables in snapshot packages are not signed, therefore Windows 10 might prevent the program from starting.</p> <p>See this guide to learn how to deal with this.</p>"},{"location":"downloads/development-builds/#macos","title":"macOS","text":"<p>macOS app bundles are not notarized; Apple Gatekeeper will try to prevent the program from running.</p> <p>See this guide to learn how to deal with this.</p>"},{"location":"downloads/linux/","title":"Linux builds","text":""},{"location":"downloads/linux/#packages","title":"Packages","text":""},{"location":"downloads/linux/#fedora","title":"Fedora","text":"<pre><code>sudo dnf install dosbox-staging\n</code></pre>"},{"location":"downloads/linux/#gentoo","title":"Gentoo","text":"<pre><code>emerge games-emulation/dosbox-staging\n</code></pre>"},{"location":"downloads/linux/#ubuntu-mint","title":"Ubuntu, Mint","text":"<p>Available via Personal Package Archive:</p> <pre><code>sudo add-apt-repository ppa:feignint/dosbox-staging\nsudo apt-get update\nsudo apt install dosbox-staging\n</code></pre>"},{"location":"downloads/linux/#arch-manjaro","title":"Arch, Manjaro","text":"<p>Available via Arch User Repository.</p> <p>Vote for inclusion in the community repo!</p>"},{"location":"downloads/linux/#other-repositories","title":"Other repositories","text":""},{"location":"downloads/linux/#tarball-download","title":"Tarball download","text":"<p>Download DOSBox Staging 0.80.1 (tar.xz)  sha256: 12582a6496b1a276cd239e6b3d21ddfcd51fd8f9e40a1ebbc0a3800e0636190a </p> <p>Check out the 0.80.1 release notes to learn about the changes and improvements introduced by this release.</p> <p>Our pre-compiled builds run on most Linux distributions (x86_64 only for now). They depend on the following packages:</p>"},{"location":"downloads/linux/#fedora_1","title":"Fedora","text":"<pre><code>sudo dnf install SDL2 SDL2_image SDL2_net opusfile\n</code></pre>"},{"location":"downloads/linux/#ubuntu-debian","title":"Ubuntu, Debian","text":"<p>Ubuntu 18.04 or newer, and Debian 9 or newer is required.</p> <pre><code>sudo apt install libsdl2-2.0-0 libsdl2-image-2.0-0 libsdl2-net-2.0-0 libopusfile0\n</code></pre>"},{"location":"downloads/linux/#arch-manjaro_1","title":"Arch, Manjaro","text":"<pre><code>sudo pacman -S sdl2 sdl2_image sdl2_net opusfile\n</code></pre>"},{"location":"downloads/linux/#steam","title":"Steam","text":"<p>You can easily configure your DOS games on Steam to use DOSBox Staging via Boxtron (a community-developed Steam Play compatibility tool for DOS games).</p> <p>Boxtron will automatically use <code>dosbox</code> if found in your path, or can be configured to use a specific binary by editing the file <code>~/.config/boxtron.conf</code> and overriding dosbox.cmd:</p> <pre><code>cmd = ~/path-to-dosbox-staging/dosbox\n</code></pre>"},{"location":"downloads/linux/#retropie","title":"RetroPie","text":"<p>You can easily configure your DOS games on Retropie to use DOSBox Staging via RetroPie-Setup (select Optional Packages \u2192 DOSBox Staging).</p>"},{"location":"downloads/linux/#hardware-requirements","title":"Hardware requirements","text":"<p>For x86 CPUs the SSE 4.2 instruction set is required.</p>"},{"location":"downloads/linux/#development-snapshot-builds","title":"Development snapshot builds","text":"<p>You can always see what\u2019s cooking on the main branch!  </p> <p>These snapshot builds might be slow or unstable as they are designed with developers and testers in mind.</p>"},{"location":"downloads/linux/#older-builds","title":"Older builds","text":"<ul> <li> <p>DOSBox Staging 0.80.0 (tar.xz)    sha256: 3022bdd405dc1106007c3505e6a5d083de982d516c9bce499e2c4a02a697a1bd   </p> </li> <li> <p>DOSBox Staging 0.79.1 (tar.xz)    sha256: aebf8619bb44934f18d0e219d50c4e2c03b179c37daa67a9b800e7bd3aefc262   </p> </li> <li> <p>DOSBox Staging 0.79.0 (tar.xz)    sha256: 804adb294096ab651490b1664570203f24e460048d7e6e2e388d210a8380016a   </p> </li> <li> <p>DOSBox Staging 0.78.1 (tar.xz)    sha256: 8bd2a247ca960f6059276db2b0331f853e16bc8a090722b15f567782542b5fba   </p> </li> <li> <p>DOSBox Staging 0.78.0 (tar.xz)    sha256: 085e7cbe350546b3f25b0400c872a2766f9a49d16a5ca8d17a0a93aad6e37709   </p> </li> <li> <p>DOSBox Staging 0.77.1 (tar.xz)    sha256: e2d475e4b1f80881ccafc4502b3884c096b51aa2fc2cfe89bb6c2b8ebfb7cc76   </p> </li> <li> <p>DOSBox Staging 0.76.0 (tar.xz)    sha256: f8401bcd473d5b664eeb3a90e4dbb4bbf0cef5339adba867f361c00b7de9b2fe   </p> </li> <li> <p>DOSBox Staging 0.76.0 (tar.xz)    sha256: b14de58ba0f5dd192398cda58fa439b15512f50d1c88b5ded6f300d4a9212852   </p> </li> <li> <p>DOSBox Staging 0.75.2 (tar.xz)    sha256: 0325a1860aea95e8117aa49b041bfd628ab20531a3abc7b0a67aff4c47049465   </p> </li> <li> <p>DOSBox Staging 0.75.1 (tar.xz)    sha256: aef22e5ddf93ff826fc2d48a4c8c0b4097d3455525b40be5b3fb443935929c70   </p> </li> <li> <p>DOSBox Staging 0.75.0 (tar.xz)    sha256: a28d8ba0481722c8343b7532299c7b9bb9e491c6832d9d05dd4704939287f776   </p> </li> <li> <p>DOSBox Staging 0.75.0-rc1 (tar.xz)    sha256: 594ba45280af240cb18b3882f7ffa71169a697eb362b7d7a76c8ccda2b940e84   </p> </li> </ul>"},{"location":"downloads/linux/#building-from-source","title":"Building from source","text":"<p>Of course, you can always build DOSBox Staging straight from the source.</p> <p>Send us patches if you improve something! </p>"},{"location":"downloads/macos/","title":"macOS builds","text":"<p>Download DOSBox Staging 0.80.1 Universal Binary (dmg)  sha256: 46a256645255e8345981ea357f1416b8ce4bc60a2aba9a86b5122d5075aa7fa </p> <p>This package is compatible with macOS 10.15 (Catalina) or newer and supports both Intel and M1 Macs.</p> <p>Check out the 0.80.1 release notes to learn about the changes and improvements introduced by this release.</p> <p>Important</p> <p>macOS uses its Gatekeeper feature to prevent users from running externally-hosted 3rd party software, such as DOSBox Staging. See the section below to learn how to fix it.</p>"},{"location":"downloads/macos/#homebrew","title":"Homebrew","text":"<p>The Homebrew package is compatible with macOS 10.14 (Mojave) or newer. Learn how to set up Homebrew here.</p> <pre><code>brew update\nbrew install dosbox-staging\n</code></pre>"},{"location":"downloads/macos/#macports","title":"MacPorts","text":"<p>The MacPorts package should build on systems as old as macOS 10.6 (Snow Leopard, circa 2009) or newer. Learn how to set up MacPorts here.</p> <pre><code>sudo port selfupdate\nsudo port install dosbox-staging\n</code></pre> <p>If you\u2019re running an OS not longer maintained by Apple, then support is on a best-effort basis (as the team runs supported configurations and may not be able to reproduce some issues).</p>"},{"location":"downloads/macos/#hardware-requirements","title":"Hardware requirements","text":"<p>For x86 CPUs the SSE 4.2 instruction set is required. For Intel Mac models that don\u2019t support it, you can try using the partial SSE4.2 emulator MouSSE.</p>"},{"location":"downloads/macos/#development-snapshot-builds","title":"Development snapshot builds","text":"<p>You can always see what\u2019s cooking on the main branch!  </p> <p>These snapshot builds might be slow or unstable as they are designed with developers and testers in mind.</p>"},{"location":"downloads/macos/#apple-gatekeeper","title":"Apple Gatekeeper","text":"<p>You\u2019ll need to do the following when launching DOSBox Staging for the first time (you\u2019ll need to repeat these steps every time after having upgraded to a newer version):</p> <ul> <li>Ctrl click (or right-click) on the DOSBox Staging app, and click Open. </li> <li>Click OK to close the resulting message.</li> <li>Open the app a second time (as per above); now Gatekeeper will show an   Open button like this:</li> </ul> <p></p>"},{"location":"downloads/macos/#explanation","title":"Explanation","text":"<p>Apple\u2019s Gatekeeper feature only permits the running of notarized software, one aspect of which involves developers making yearly payments to Apple.</p> <p>As DOSBox Staging is a volunteer effort, we are not in a position to make such payments and therefore ask users to bypass Apple\u2019s Gatekeeper manually.</p>"},{"location":"downloads/macos/#older-builds","title":"Older builds","text":"<ul> <li> <p>DOSBox Staging 0.80.0 Universal binary (dmg) (macOS 10.15 or newer)       sha256: 53f12aa63cf9d2a33a46149fb394947c6b12d5ab9b7ba41ee2d7eab1a990fa7a   </p> </li> <li> <p>DOSBox Staging 0.79.1 Universal binary (dmg) (macOS 10.15 or newer)       sha256: 52547692be29949747bb8d3b59bf31dd22b4f49178316417cc8f1f468eeab387   </p> </li> <li> <p>DOSBox Staging 0.79.0 Universal binary (dmg) (macOS 10.15 or newer)       sha256: 1678f7458acabecdaf2b49e0d95a20d057734898b70c29d4e845f52a1aa26d46   </p> </li> <li> <p>DOSBox Staging 0.78.1 Universal binary (dmg) (macOS 10.15 or newer)       sha256: b9ddff89e9fc283493580d5fc021b05021a13d90305ae44e2867499b22e359c9   </p> </li> <li> <p>DOSBox Staging 0.78.0 Universal binary (dmg) (macOS 10.15 or newer)       sha256: 3997546560af542b7f3b55b1bc890ae4342144a72c21af9880449adf579db88b   </p> </li> <li> <p>DOSBox Staging 0.77.1 x86-64 (dmg) (macOS 10.15 or newer)       sha256: 29964d79f0a85d593f8bafd30da854c726594c12474528f46758fc95c05f0c97   </p> </li> <li> <p>DOSBox Staging 0.77.1 ARM64 (dmg) (macOS 11 or newer)       sha256: 74a1c84bdda0db25091f749ba7a2e5e93f7849baf130817ea1bc182039bd3698   </p> </li> <li> <p>DOSBox Staging 0.77.0 x86-64 (dmg) (macOS 10.15 or newer)       sha256: 3ca859573814b2c50065825c02d8a04eb6d95605830ec3af21de0d64a2e32314   </p> </li> <li> <p>DOSBox Staging 0.77.0 ARM64-testing (dmg) (macOS 11 or newer)       sha256: e2eecb52777d5ed836ba1f772fe669c89e94ea9b67777aced5fef5b51051ccaf   </p> </li> <li> <p>DOSBox Staging 0.76.0-3 (dmg) (macOS 10.15 or newer)       sha256: f6048fa0e1a33a41f0018cb6d7139c4f7b4a60176bbe6a42f681aa8b5adcb73b   </p> </li> <li> <p>DOSBox Staging 0.76.0 (dmg) (macOS 10.15 or newer)       sha256: c9fa7b0bf6410f430b47daeb15a470e0105a147b555d3fbf574514406c71f492   </p> </li> <li> <p>DOSBox Staging 0.75.2 (dmg) (macOS 10.15 or newer)       sha256: 272f01aa8598ecf3229d48680aa6ce6e5b88ebd0645b1f92b899bc0159afcf11   </p> </li> <li> <p>DOSBox Staging 0.75.1 (dmg) (macOS 10.15 or newer)       sha256: 2508a87c6aceee63da13e4c76159734e3c9ee4e76fb22a3a7c0d66021e71a4eb   </p> </li> <li> <p>DOSBox Staging 0.75.0 (dmg) (macOS 10.15 or newer)       sha256: a0038c7401d239934d25517ca5e8e6006cc3f4cb7060f6ace56609d36bca12ef   </p> </li> <li> <p>DOSBox Staging 0.75.0-rc1 (dmg) (macOS 10.15 or newer)       sha256: 8a5c12d1b6567d6e981acd76e30dec41a73a699963b714f4f1dcf0fc853fc9f6   </p> </li> </ul>"},{"location":"downloads/macos/#building-from-source","title":"Building from source","text":"<p>Of course, you can always build DOSBox Staging straight from the source.</p> <p>Send us patches if you improve something! </p>"},{"location":"downloads/windows/","title":"Windows builds","text":""},{"location":"downloads/windows/#windows-8x-or-newer","title":"Windows 8.x or newer","text":"<p>Download DOSBox Staging 0.80.1 64-bit (Installer)  sha256: 94b961f397f3b70a13daf3b573857b5262515e75d490bfc19f019479fe1694f8 </p> <p>Download DOSBox Staging 0.80.1 64-bit (zip)  sha256: 3680cbdf7a91467877b51c95e468ef45b186b42518c3163fab85c727923ee659 </p> <p>Download DOSBox Staging 0.80.1 32-bit (zip)  sha256: cd73b86699e9732bcee9fe33d4bc05e19262d0b1cc64478b18be9853fe28f083 </p> <p>Check out the 0.80.1 release notes to learn about the changes and improvements introduced by this release.</p> <p>Important</p> <p>If Windows 8.x or Windows 10 prevents you from running DOSBox Staging via Microsoft Defender SmartScreen, see the section below.</p>"},{"location":"downloads/windows/#windows-7","title":"Windows 7","text":"<p>For 64-bit Windows 7, use the 64-bit MSVC build. It can be optionally selected in the installer and is also available as a portable ZIP archive.</p> <p>For 32-bit Windows 7, use the 32-bit MSVC build portable ZIP archive</p>"},{"location":"downloads/windows/#windows-vista","title":"Windows Vista","text":"<p>The official distribution packages only support Windows Vista up to version 0.78.1.</p> <p>More recent releases can be built from the source by excluding FluidSynth and Slirp support. Please see the Windows MSYS2 build instructions for further details.</p>"},{"location":"downloads/windows/#hardware-requirements","title":"Hardware requirements","text":"<p>SSE 4.2 instruction set is required for version 0.75.1 or newer.</p>"},{"location":"downloads/windows/#development-snapshot-builds","title":"Development snapshot builds","text":"<p>You can always see what\u2019s cooking on the main branch!  </p> <p>These snapshot builds might be slow or unstable as they are designed with developers and testers in mind.</p>"},{"location":"downloads/windows/#microsoft-defender-smartscreen","title":"Microsoft Defender SmartScreen","text":"<p>You\u2019ll need to do the following when launching DOSBox Staging for the first time (you\u2019ll need to repeat these steps every time after having upgraded to a newer version).</p>"},{"location":"downloads/windows/#method-1","title":"Method 1","text":"<p>Start the application, then click on More info in the appearing dialog. Click the Run anyway button in the second dialog.</p> <p></p> <p></p>"},{"location":"downloads/windows/#method-2","title":"Method 2","text":"<p>In your installation folder, right-click on the <code>dosbox.exe</code>, select Properties, tick Unblock in the appearing dialog, then press Ok.</p> <p></p>"},{"location":"downloads/windows/#explanation","title":"Explanation","text":"<p>Starting in Windows 8, Microsoft Defender SmartScreen\u2019s pop-up encumbers the execution of newly-developed applications.  To prevent this, developers are expected to pay Microsoft\u2019s EV certification vendors a yearly fee and put the software on Windows Store.</p> <p>As DOSBox Staging is a volunteer effort, we are not in a position to make such payments. We, therefore, ask users to manually unblock DOSBox Staging and be patient while Microsoft\u2019s Application Reputation Scheme eventually whitelists DOSBox Staging.</p>"},{"location":"downloads/windows/#custom-install-parameters","title":"Custom install parameters","text":"<p>The installer is built with Inno Setup. For the available command-line install parameters, please see Inno\u2019s documentation page.</p>"},{"location":"downloads/windows/#older-builds","title":"Older builds","text":"<ul> <li> <p>DOSBox Staging 0.80.0 64-bit (Installer) (Windows 7 or newer)       sha256: 84445c869e58f6b4591484f6178c7b5b3c8f284bf9460e9afc4502ba842ab039   </p> </li> <li> <p>DOSBox Staging 0.80.0 64-bit (zip) (Windows 7 or newer)       sha256: 075be379ed4475615e0e86953eb21f024c74b4cafd6914e9cf5ef40e3d9e26cd   </p> </li> <li> <p>DOSBox Staging 0.79.1 64-bit (installer) (Windows 7 or newer)       sha256: 0045ac995ada0af955681983ae86c969a05030c25173618f8b1547a267046a27   </p> </li> <li> <p>DOSBox Staging 0.79.1 64-bit (zip) (Windows 7 or newer)       sha256: 8c7045dfea6dc20bb985cff516d2faee51d2ecaf054db60632857b6941d3d648   </p> </li> <li> <p>DOSBox Staging 0.79.0 64-bit (installer) (Windows 7 or newer)       sha256: 154c663f76d0ca46d1d23d8c2bcea2d83717f1ba9103067a6a6f5ce814cf0cb2   </p> </li> <li> <p>DOSBox Staging 0.79.0 64-bit (zip) (Windows 7 or newer)       sha256: b3633d425489fbb5f6f9b3de75e4c2c6dd0713c3aec504e42cac948cc1550bbe   </p> </li> <li> <p>DOSBox Staging 0.78.1 64-bit (zip) (Windows Vista or newer)       sha256: 3c2f408125351154a37e93de8a4bd05d0c722bbf53e1f583909e4ca6c3eb9204   </p> </li> <li> <p>DOSBox Staging with built-in debugger 0.78.1 64-bit (zip) (Windows Vista or newer)       sha256: b99f3c354f831ed2b0ed04d215170f696b6fc18285b0c7192c0abab62c41bbc8   </p> </li> <li> <p>DOSBox Staging 0.78.0 64-bit (zip) (Windows Vista or newer)       sha256: f13cba664259fdb0db5e32826e13dcded4270557963f6e823a4731129f23a8a3   </p> </li> <li> <p>DOSBox Staging 0.78.0 32-bit (zip) (Windows Vista or newer)       sha256: 0ca9201cdf3f3a1576b97b0de0e87280b75c633976f0b179ba33a68d44f5ba56   </p> </li> <li> <p>DOSBox Staging 0.77.1 64-bit (zip) (Windows Vista or newer)       sha256: 11ba992ece6d3e4ef2046fcdb6d842da364b69720a921d61fdcc793eb52e7051   </p> </li> <li> <p>DOSBox Staging 0.77.1 32-bit (zip) (Windows Vista or newer)       sha256: a34883101486ce2af071a29c6390f2038889fc519e042101284f2a6999d9f0ef   </p> </li> <li> <p>DOSBox Staging 0.77.0 64-bit (zip) (Windows Vista or newer)       sha256: cacdac418642fd8c7faf1e5955110c35d0c207392ae20835707fd2a1e1114b82   </p> </li> <li> <p>DOSBox Staging 0.77.0 32-bit (zip) (Windows Vista or newer)       sha256: f718d07bab69e3e1be0b28207039cea2746c7e45b8ba7a19b625011f477e609a   </p> </li> <li> <p>DOSBox Staging 0.76.0 32-bit (zip) (Windows Vista or newer)       sha256: 646d2f3fa8189e411589fedcb8148a295361693a6ce95d08e06f4a70e5a36b16   </p> </li> <li> <p>DOSBox Staging 0.75.2 64-bit (zip) (Windows Vista or newer)       sha256: 09f0ca911813a64b8814880eb6e49ad4dcdac9a5bb9263c4887ad82b71fad292   </p> </li> <li> <p>DOSBox Staging 0.75.2 32-bit (zip) (Windows Vista or newer)       sha256: 51dc171ff52ea395c6a22f09ebb98a93974a95c701ca81008368c22a66deced2   </p> </li> <li> <p>DOSBox Staging 0.75.1 64-bit (zip) (Windows Vista or newer)       sha256: 80c60c4377ff2882649f113b3cb3bcd407c17acaac344c49fa1fc4229813f012   </p> </li> <li> <p>DOSBox Staging 0.75.1 32-bit (zip) (Windows Vista or newer)       sha256: 843c742a348f575862e152e02cf174be0ea1c52bdb6e4bffd65f34af88b566b7   </p> </li> <li> <p>DOSBox Staging 0.75.0 32-bit (zip) (Windows Vista or newer, supports CPUs without SSE4.2)       sha256: 69046adcef2ef9920fbba8d40fc9e51f3dd144ba4549787e1816cf1c2ae87d71   </p> </li> <li> <p>DOSBox Staging 0.75.0-rc1 32-bit (zip) (Windows Vista or newer, supports CPUs without SSE4.2)       sha256: 738d2ae2101384f2eeaf1895de64cf1b4c76eaf7873de7e15b7f52145dfed7e7   </p> </li> </ul>"},{"location":"downloads/windows/#building-from-source","title":"Building from source","text":"<p>Of course, you can always build DOSBox Staging straight from the source.</p> <p>Send us patches if you improve something! </p>"},{"location":"downloads/release-notes/0.75.0-rc1/","title":"0.75.0-RC1 release notes","text":"<p>Release date: 2020-04-22</p> <p></p>"},{"location":"downloads/release-notes/0.75.0-rc1/#installation-instructions","title":"Installation instructions","text":"<ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>This release is significant for several reasons:</p> <ol> <li> <p>It\u2019s our first stable release. From this point forward, the 0.75.x series    will only contain bugfixes.</p> </li> <li> <p>It kicks off the 0.76 development cycle, for which a number of features are    already lined up.</p> </li> <li> <p>The new project homepage makes the downloads publicly accessible, without    the need for a GitHub account.</p> </li> </ol> <p>There\u2019s no human-readable changelog just yet\u2014there are ~1500 commits to comb through. Hopefully, within a couple of days, we\u2019ll be able to write a nice summary with a description of new features, improvements, and bugfixes.</p> <p>In the meantime, we invite everyone to start testing RC1 builds; there are some rough edges for sure\u2014if you find any bugs, please report them in our bugtracker. You can also ask questions on the #dosbox\u2011staging channel in Luxtorpeda Discord Server.</p> <p>This release includes all upstream changes until SVN r4336, and 857 Git commits on top of that.</p> <p>Have fun! </p> <p>The DOSBox Staging team</p>"},{"location":"downloads/release-notes/0.75.0/","title":"0.75.0 release notes","text":"<p>Release date: 2020-05-06</p>"},{"location":"downloads/release-notes/0.75.0/#summary","title":"Summary","text":"<p>This document contains the release notes for DOSBox Staging 0.75. It describes recently added, changed, or deleted features of DOSBox Staging.</p> <p>All users are encouraged to consult the New features in detail and Known issues sections before using DOSBox Staging, as these describe important interface changes as well as information discovered late in the release cycle or after the release.</p>"},{"location":"downloads/release-notes/0.75.0/#installation-instructions","title":"Installation instructions","text":"<ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>The DOSBox Staging project was created September 15, 2019 as a soft-fork of the SourceForge-based DOSBox project, which is a separate project having its own schedule and development priorities.</p>"},{"location":"downloads/release-notes/0.75.0/#new-features-in-detail","title":"New features in detail","text":"<p>New features originating from our upstream (DOSBox) are marked with SVN.</p>"},{"location":"downloads/release-notes/0.75.0/#upgrade-to-sdl-20","title":"Upgrade to SDL 2.0","text":"<p>SDL 2.0 is a major update to the SDL 1.2 codebase, which has been unmaintained since 2013. SDL 2.0 supports more input devices; more output interfaces such as Wayland, and OpenGLES 1 and 2; low-latency audio using OpenSL ES; and improves cross-platform consistency.</p> <p>The migration to SDL 2.0:</p> <ul> <li>Dropped 3,211 lines of SDL 1.2 code in place of 1,664 lines, for just   under a 50% reduction in code-size.</li> <li>Eliminated several OS-specific branches and all SDL1-specific kludges.</li> <li>Eased support for modern graphic APIs, and opened the field for new features   and improvements.</li> </ul> <p>One example includes the new <code>texture</code> output mode, which uses SDL\u2019s 2D hardware-accelerated API rendering to a platform-specific backend.</p> <p>For example, Windows users can test:</p> <pre><code>[sdl]\noutput           = texture\ntexture_renderer = direct3d11\n</code></pre> <p>macOS users can try Metal:</p> <pre><code>[sdl]\noutput           = texture\ntexture_renderer = metal\n</code></pre> <p>And everyone can use OpenGL as texture backend:</p> <pre><code>[sdl]\noutput           = texture\ntexture_renderer = opengl\n</code></pre> <p>Or just use <code>texture_renderer = auto</code> to let SDL pick the backend appropriate for your operating system.</p>"},{"location":"downloads/release-notes/0.75.0/#support-flac-opus-and-mp3-cd-da-tracks","title":"Support FLAC, Opus, and MP3 CD-DA tracks","text":"<p>FLAC, Opus, and MP3 (as well as MP2 and MP1) encoded audio can be <code>imgmount</code>ed as CD-DA tracks in DOSBox Staging, in addition to the usual WAV and Vorbis tracks supported by DOSBox. WAV support has been expanded to include Sony\u2019s Wave64 format.</p> <p>DOSBox Staging also supports tracks having sample resolutions of 24 and 16-bit; sampling rates of 96, 88.2, 48, 44.1, 22.05, and 11.025 kHz; and stereo or mono channel counts (to the extent each codec supports these variations). You can mix-and-match these properties and track types to best suit each track\u2019s content.</p> <p>The following sample CUE file depicts the use of every codec supported by DOSBox Staging:</p> <pre><code>FILE \"data.iso\" BINARY\n  TRACK 01 MODE1/2048\n    INDEX 01 00:00:00\n\nFILE \"track02.opus\" OPUS\n  TRACK 02  AUDIO\n    PREGAP 00:02:00\n    INDEX 01 00:00:00\n\nFILE \"track03.flac\" FLAC\n  TRACK 03 AUDIO\n    INDEX 01 00:00:00\n\nFILE \"track04.mp3\" MP3\n  TRACK 04 AUDIO\n    INDEX 01 00:00:00\n\nFILE \"track05.w64\" W64\n  TRACK 05 AUDIO\n    INDEX 01 00:00:00\n\nFILE \"track06.ogg\" OGG\n  TRACK 06 AUDIO\n    INDEX 01 00:00:00\n\nFILE \"track07.wav\" WAV\n  TRACK 07 AUDIO\n    INDEX 01 00:00:00\n</code></pre> <p>For devices with sufficient storage, we recommend ripping your CD-ROM audio to (lossless) FLAC tracks and adding seek-points using:</p> <pre><code>flac -8 --output-name=trackXY.flac trackXY.wav\nmetaflac --add-seekpoint=1s trackXY.flac\n</code></pre> <p>FLAC typically achieves between 50% and 35% compression while producing binary-identical output versus WAV files.</p> <p>For limited-storage devices such as ARM single-board computers, Opus provides state-of-the-art lossy compression that exceeds all other formats, including Apple\u2019s AAC and AAC High-Efficiency formats. Opus allows even further space savings over MP3 or Vorbis track while matching or exceeding them in output quality.</p> <p>For example, CD-DA tracks consisting of monaural speech can be encoded with:</p> <pre><code>opusenc --speech --bitrate 24 --downmix-mono trackXY.wav trackXY.opus\n</code></pre> <p>When applied to Sierra\u2019s Jones in the Fast Lane audio track, Opus compresses it from 373 MB down to 6.4 MB (98.2% savings in disk space) with no discernible loss in quality.</p> <p>For CD-DA tracks consisting of sound effects and relatively simple music, Opus does fine with a bitrate between 54 and 70, whereas more complex musical tracks might need a bitrate of up to 84. Experiment and find your sweet spot!</p> <pre><code>opusenc --bitrate 70 trackXY.wav trackXY.opus\n</code></pre> <p>If your CD-DA tracks are encoded at 48 kHz (which is Opus\u2019s default internal rate), then feel free to configure DOSBox Staging\u2019s mixer rate to match, which ensures your CD-DA will not be resampled through your audio chain; as your sound card, USB speakers, and HDMI interface all (likely) operate at a native rate of 48 kHz.</p> <pre><code>[mixer]\nrate = 48000\n</code></pre>"},{"location":"downloads/release-notes/0.75.0/#pixel-perfect-scaling-mode","title":"Pixel-perfect scaling mode","text":"<p>Pixel-perfect output scales the image by the largest integer multiplier that fits within your monitor\u2019s native resolution. For example, given a 1920\u00d71080 monitor and a 320\u00d7200 game requiring aspect-correction, each of its pixels would be scaled by 4\u00d75 to produce a 1280\u00d71000 image. This preserves the original artwork without any edge blurring.</p> <p>To enable pixel-perfect output, apply the following settings to the indicated sections of your DOSBox Staging configuration file, as follows:</p> <pre><code>[sdl]\nfullscreen = true\noutput     = texturepp\n[render]\nscaler   = none\nglshader = none\n</code></pre> <p>Pixel-perfect looks like this on a 1080p screen:</p> <p></p> <p>Heroes of Might and Magic II (1996) \u2014 640\u00d7480   with a pixel aspect ratio (PAR)   of 1:1, upscaled to 2\u00d72   </p> <p></p> <p>Wolfenstein 3D (1992) \u2014 320\u00d7200 with a PAR of 1:1.2 (non-square   pixels), upscaled to 4\u00d75 with a PAR of 1:1.25   </p>"},{"location":"downloads/release-notes/0.75.0/#resizable-window","title":"Resizable window","text":"<p>Being able to click and drag to resize an application\u2019s window is not a revolutionary feature by any measure; however it\u2019s a welcome addition for DOSBox Staging!</p> <p>Star Wars: Dark Forces (1995) \u2014 intro playing while the DOSBox window is being   resized vigorously   </p> <p>This feature is a work-in-progress: it\u2019s available on Linux by default, and can be enabled for testing on Windows and macOS by setting the following (but note that it does not yet work correctly on these systems):</p> <pre><code>[sdl]\nwindowresolution = resizable\n</code></pre> <p>On all systems, the resizable window is only available for <code>output = opengl</code> and <code>glshader = sharp</code>. Support will be expanded to more outputs and shaders in the future versions.</p>"},{"location":"downloads/release-notes/0.75.0/#autotype-command","title":"AUTOTYPE command","text":"<p><code>AUTOTYPE</code> is a command-line tool provided by DOSBox Staging that performs scripted keyboard entry into the running DOS program or game.</p> <p>It can be used to reliably skip intros, provide input to answer initial startup or configuration questions, or conduct a simple demo.</p> <p>Simply run the command to learn more:</p> <pre><code>Z:&gt; autotype\n</code></pre> <p>Some games that benefit from <code>AUTOTYPE</code> on startup are listed on the wiki page.</p>"},{"location":"downloads/release-notes/0.75.0/#changed-rendering-defaults","title":"Changed rendering defaults","text":"<p>The following default configuration settings were changed to improve the out-of-the-box experience for the majority of games running on modern hardware.</p> <p>The default video settings now use SDL\u2019s OpenGL rendering backend, apply a 4:3 aspect ratio correction, and scale the image using the <code>sharp</code> OpenGL shader to provide relatively sharp pixels when in fullscreen mode.</p> <p></p> <p>Battle Chess (1989) \u2014 at 1080p using the default settings   </p>"},{"location":"downloads/release-notes/0.75.0/#expand-mouse-control-methods","title":"Expand mouse control methods","text":"<p>The prior \u201cautolocking\u201d mouse option used by DOSBox has been renamed in DOSBox Staging to <code>capture_mouse</code>, which is configured using two values defining how the mouse behaves.</p> <p>The first value defines how the mouse is controlled:</p> <ul> <li><code>onclick</code>: the mouse will be captured with a click inside the window</li> <li><code>onstart</code>: the mouse is captured immediately on start (similar to real DOS)</li> <li><code>seamless</code>: the mouse will move seamlessly in and out of the window and cannot be captured</li> <li><code>nomouse</code>: the mouse is disabled and hidden without any input sent to the game</li> </ul> <p>The second value defines how middle-clicks are handled:</p> <ul> <li><code>middlegame</code>: middle-clicks are sent to the game (not used to uncapture the mouse)</li> <li><code>middlerelease</code>: middle-click will uncapture the mouse when windowed (not sent to the game)</li> </ul> <p>For example:</p> <pre><code>[sdl]\ncapture_mouse = onclick middlerelease\n</code></pre> <p>This will capture the mouse on the first click inside DOSBox Staging\u2019s window, and a middle-click will release the mouse. Note that the prior method to release the mouse still works (pressing Ctrl+F10).</p> <p>Note</p> <p>DOSBox Staging defaults to <code>seamless</code> mouse capture both to simplify multi-tasking in windowed-mode and provide a frustration-free experience for new users. However, some games and Windows 3.1 make their own adjustments to the mouse position and will cause an offset-effect. In these cases, we recommend switching to fullscreen (Alt+Enter) or configuring the mouse to capture <code>onclick</code> or <code>onstart</code>.</p> <p>Important</p> <p>These options do not affect the mouse behavior in fullscreen (Alt+Enter), as the mouse is always captured.</p>"},{"location":"downloads/release-notes/0.75.0/#nuked-opl-v18","title":"Nuked OPL v1.8","text":"<p>The cycle-accurate Nuked OPL3 emulator is now used by default; this change improves AdLib and Sound Blaster FM music emulation accuracy.</p> <p>This improved accuracy comes at the cost of a slightly higher CPU use, which is insignificant for the vast majority of users on typical desktop or laptop hardware.</p> <p>However, those using DOSBox Staging on old or CPU-limited hardware (capable of 30,000 dosbox \u201ccycles\u201d or less, such as the Raspberry Pi 3) will be served best using the <code>fast</code> OPL emulator (see the <code>oplemu</code> documentation provided in the configuration file).</p>"},{"location":"downloads/release-notes/0.75.0/#reload-key-bindings-at-runtime","title":"Reload key bindings at runtime","text":"<p>The built-in <code>CONFIG</code> shell command is a bit old, but a little-known feature allows users to reconfigure DOSBox Staging at runtime. This is a nifty way to change configuration using batch scripts based on user input.</p>"},{"location":"downloads/release-notes/0.75.0/#reloading-key-bindings","title":"Reloading key bindings","text":"<p>You can now change key bindings at runtime by loading them from a file:</p> <pre><code>Z:\\&gt; config -set \"sdl mapperfile=&lt;path-to-file&gt;\"\n</code></pre>"},{"location":"downloads/release-notes/0.75.0/#other-new-options-svn","title":"Other new options (SVN)","text":"<p>DOSBox added a number of features to the <code>CONFIG</code> command. To list them all, run:</p> <pre><code>Z:\\&gt; config /?\n</code></pre>"},{"location":"downloads/release-notes/0.75.0/#configuration-file-locations","title":"Configuration file locations","text":""},{"location":"downloads/release-notes/0.75.0/#linux","title":"Linux","text":"<p>DOSBox Staging\u2019s configuration file location has been updated to comply wit the XDG Base Directory Specification. This means DOSBox Staging will no longer create configuration directories directly in your home directory.</p> <p>Configuration files are now located in:</p> <pre><code>~/.config/dosbox/\n</code></pre> <p>Users can customize the parent (<code>.config/</code>) location by setting the <code>XDG_CONFIG_HOME</code> environment variable, according to the XDG Specification.</p>"},{"location":"downloads/release-notes/0.75.0/#macos","title":"macOS","text":"<p>The path was slightly changed to avoid spaces in the default configuration filename and to group all configuration files in a single directory:</p> <pre><code>~/Library/Preferences/DOSBox/\n</code></pre>"},{"location":"downloads/release-notes/0.75.0/#windows","title":"Windows","text":"<p>No changes; the configuration files are created in:</p> <pre><code>C:\\Users\\&lt;username&gt;\\AppData\\Local\\DOSBox\\\n</code></pre>"},{"location":"downloads/release-notes/0.75.0/#modem-phonebook","title":"Modem phonebook","text":"<p>You can map fake phone numbers to Internet addresses which is useful for programs where limitations on phone number input field are too strict. Create a text file with the name specified in <code>phonebookfile</code> entry in the <code>[serial]</code> section in the DOSBox configuration file and add phone-address pairs per line, for example:</p> <pre><code>5551234 towel.blinkenlights.nl:23\n</code></pre> <p>Now you can dial the specified phone number and the emulated modem will connect to the address it\u2019s mapped to. Note that phone book does not allow any characters in the phone number that are ignored or denied by a real Hayes compatible modem.</p>"},{"location":"downloads/release-notes/0.75.0/#64-bit-dynamic-recompilation-svn","title":"64-bit dynamic recompilation (SVN)","text":"<p>DOSBox has had dynamic recompilation support for a long time, but it was limited to 32-bit builds.  Support for 64-bit dynarec improves CPU emulation speed and quality across the board\u2014this is especially visible to Linux and macOS users1.</p> <p>Stargunner (1996, freeware) \u2014 running on Linux x86_64 via Boxtron   </p> <p>Before 64-bit dynarec, this game had serious emulation problems resulting in fluctuating emulation speed (sometimes too fast, sometimes too slow - regardless of cycles settings). This game was designed to run with constant 70 FPS and now it runs with constant 70 FPS.</p>"},{"location":"downloads/release-notes/0.75.0/#cga-improvements","title":"CGA improvements","text":"<p>Maniac Mansion (1988) \u2014 with forced CGA mode:   top-left: CGA, default palette;   top-right: CGA mono, green tint;   bottom-left: CGA composite, early model, default hue;   bottom-right: CGA composite, late model, default hue.   </p>"},{"location":"downloads/release-notes/0.75.0/#cga-monochrome-mode","title":"CGA monochrome mode","text":"<p>Many CGA games from the 80\u2019s were designed to support monochromatic cathode-ray tube (CRT) monitors that used either an amber, green, or grayscale-shaded phosphor coating. As such, some games look much better when rendered using a similar monochrome palette. This mode is designed to emulate such displays.</p> <p>Use <code>machine = cga_mono</code> to turn on the feature. You can switch between green, amber, white, and paper-white palettes at runtime by pressing F11.</p>"},{"location":"downloads/release-notes/0.75.0/#cga-composite-mode-svn","title":"CGA Composite mode (SVN)","text":"<p>Technical artifacts caused by the composite video format were cleverly used by game developers to generate extra colors (versus non-composite CGA) by manipulating pixel positions on the screen.  For example, adjacent pixels would be partly \u201caveraged\u201d (through horizontal overlap), producing interposed solid colors or generating rudimentary transparency effects.</p> <p>Composite mode was added to DOSBox\u2019s CGA emulator in 2012, but was never back-ported to any of its stable releases. Most users are familiar this mode as its commonly included in other DOSBox forks.</p> <p>Once enabled, you can switch between color and composite modes, early and late CGA models, and adjust the hue at runtime.</p> <p>Note</p> <p>The default keybinding for manipulating CGA modes conflict with other essential bindings; it\u2019s advisable to change them if you plan to use this feature. The default key for turning on composite mode is F12.</p>"},{"location":"downloads/release-notes/0.75.0/#glsl-shader-support-svn","title":"GLSL shader support (SVN)","text":"<p>Shaders written in OpenGL Shading Language (GLSL) offload the task of processing the emulated game\u2019s output to your GPU hardware.</p> <p>This allows the image to be altered in many ways, such as emulating the analog artifacts (scanlines, shadow masks, and phosphor glow) present in circa-1980s and 90s CRT monitor on modern 1080p and greater LCD panels.</p> <p>You can can select the shader to use by setting the <code>glshader</code> config param:</p> <pre><code>[render]\nglshader = sharp\n</code></pre> <p>It\u2019s also possible to provide your shader implementations by placing <code>.glsl</code> files in the configuration directory:</p> Linux <code>~/.config/dosbox/glshaders/</code> macOS <code>~/Library/Preferences/DOSBox/glshaders/</code> Windows <code>C:\\Users\\&lt;USERNAME&gt;\\AppData\\Local\\DOSBox\\glshaders\\</code> <p>E.g. if you put a shader file called <code>test.glsl</code> in your config directory, you can select it as follows:</p> <pre><code>glshader = test.glsl\n</code></pre> <p>Note</p> <p>When using a GLSL shader, we recommend setting the <code>scaler</code> type to <code>none</code> to ensure image post-processing is performed exclusively by the shader (and not a mix of the two).</p> <p></p> <p>Star Wars\u2122 \u2014 X-Wing: Collector\u2019s CD-ROM Edition (1994)   Using CRT-Lottes shader on a 1080p screen; click on the image to enlarge it to see   the fine details. This shader is not bundled with DOSBox Staging (yet); you   can download it from here.   </p>"},{"location":"downloads/release-notes/0.75.0/#date-and-time-commands-svn","title":"DATE and TIME commands (SVN)","text":"<p>The traditional <code>DATE</code> and <code>TIME</code> DOS commands have been added to DOSBox. This allows the user to change the date seen by the software running inside the emulated environment:</p> <pre><code>Z:\\&gt; date\nCurrent date: Fri 05/01/2020\nType 'date MM-DD-YYYY' to change.\n\nZ:\\&gt; time\nCurrent time: 11:08:23,34\n</code></pre> <p>Note that while the date can be changed, the time cannot.</p> <p>This feature is useful for running old batch scripts and bypassing date checks in some old software.</p>"},{"location":"downloads/release-notes/0.75.0/#mount-overlay-support","title":"Mount overlay support","text":"<p>This feature allows the user to redirect new and changed files to a different location transparently. The files in the overlay and normal drives are merged at startup and kept up to date when the game writes to the disk.</p> <p>This feature is useful for redirecting save files or configuration files to a different location (e.g. for backup or cloud saves).</p> <p>Example usage:</p> <pre><code>Z:\\&gt; mount C real\nDrive C is mounted as local directory real/\n\nZ:\\&gt; mount C backup -t overlay\nOverlay backup/ on drive C mounted.\n\nZ:\\&gt; C:\nC:\\&gt; echo foo &gt; test.txt\n\nC:\\&gt; type TEST.TXT\nfoo\n</code></pre> <p>File <code>TEST.TXT</code> is written to the directory <code>backup</code>, and not to <code>real</code>.</p>"},{"location":"downloads/release-notes/0.75.0/#overview-of-changes","title":"Overview of changes","text":""},{"location":"downloads/release-notes/0.75.0/#removed-features","title":"Removed features","text":"<ul> <li>DOSBox Staging does not run on Operating System/2 (OS/2) or derivatives.</li> <li>DOSBox Staging does not run on Windows XP or earlier Windows versions.</li> <li>Removed support for old DirectDraw (<code>ddraw</code>) output.   Use <code>output = texture</code>, <code>texture_renderer = directx11</code> instead.</li> <li>Removed support for old <code>overlay</code> output. Use any other output.</li> <li>Removed support for relative window size (<code>windowresolution = X%</code>).</li> <li>Removed support for 64-bit Zip Motion Blocks Video (ZMBV) codec (old 32-bit   codec still works).</li> <li>Removed support for CD-DA playback from physical disks. It is   still possible to install games distributed on CDs by mounting them as   directories (#260)</li> <li>Removed CD-DA playback support for tracks using the Audio Interchange File   Format AIFF audio codec.</li> </ul>"},{"location":"downloads/release-notes/0.75.0/#development-changes","title":"Development changes","text":"<ul> <li> <p>Migrated the DOSBox source from Apache\u2019s Subversion (SVN) software versioning   and revision control system to the Git distributed version-control system   using GitHub, while preserving all publicly available project history.</p> <ul> <li>Active SVN branch paths were imported as Git branches (named<code>svn/&lt;name&gt;</code>).</li> <li>SVN tag paths were imported as Git lightweight tags (named   <code>svn/&lt;tag-name&gt;</code>).</li> </ul> </li> <li> <p>Ongoing upstream SVN development work is being imported in a timely manner to   the Git branch named <code>svn/trunk</code>.</p> </li> <li> <p>C++11 language constructs are now allowed.</p> </li> <li> <p>Implemented a Continuous Integration (CI) system that builds on every code   push to provide immediate feedback to developers regarding build-success and   warning-counts on:</p> <ul> <li> <p>Windows x86_64 using GCC 32 and 64-bit, Clang 32 and 64-bit, and   VisualStudio 64-bit compilers</p> </li> <li> <p>macOS x86_64 using GCC and Clang compilers</p> </li> <li> <p>Linux x86_64, ARMv6, ARMv7, IBM LinuxONE, and IBM POWER8 platforms using   various versions of GCC and Clang</p> </li> </ul> </li> <li> <p>Added static analysis checks performed by LLVM\u2019s Clang, Synopsys\u2019s Coverity,   and VIVA64\u2019s Program Verification Systems (PVS) Studio.</p> </li> <li> <p>Added dynamic analysis checks performed by Clang\u2019s undefined-behavior (UB)   sanitizer and GCC\u2019s UB and address sanitizers.</p> </li> <li> <p>The CI system includes gated checks that allow maintainers to focus on code   functionality and correctness. These automated checks guarantee that new   code:</p> <ul> <li>builds cleanly on all supported platforms and compilers,</li> <li>adds no new compiler warnings, and</li> <li>adds no new static or dynamic analysis issues.</li> </ul> </li> <li> <p>Notable progress has been made in reducing the number of warnings and   analysis issues flagged by these tools.</p> </li> <li> <p>Windows: the build-system was adjusted to allow easy compilation, without   manual download or patching of dependencies. We use <code>vcpkg</code> to manage   dependencies. The solution file was fixed to work with Visual Studio 2019.</p> </li> <li> <p>Linux and macOS: implemented a number of small build-system improvements.</p> </li> <li> <p>Automated the compilation of release-style builds against the latest main   and feature branches. These not only save time for testers wanting to verify   new features and bugfixes, but also ensures they\u2019re running builds compiled   using would-be release settings.</p> </li> <li> <p>macOS: release binaries are compiled with optimizations supporting Intel   Nehalem-based instructions (and newer), as this matches the minimum processor   requirements set by macOS Catalina.</p> </li> <li> <p>Release packages are scanned using up-to-date Antivirus software: ClamAV for   Linux and macOS, and Windows Defender for Windows.</p> </li> <li> <p>The project has published a   Code of Conduct   along with clear   Contributor Guidelines.</p> </li> </ul>"},{"location":"downloads/release-notes/0.75.0/#known-issues","title":"Known issues","text":"<ul> <li>Inconsistent minimum window size with <code>windowresolution = resizable</code> when   leaving fullscreen.</li> <li>Windows, macOS: Window content is not refreshed when resizing.</li> <li>Windows, macOS: Emulation stops when moving or resizing window.</li> <li>Linux: Wayland crashes (Wayland support is \u201cexperimental\u201d at the moment).</li> <li>Linux: Splash screen is sometimes transparent or corrupted on KDE.</li> </ul> <p>Submit new issues or learn more about existing ones using our bug-tracker.</p>"},{"location":"downloads/release-notes/0.75.0/#contributors","title":"Contributors","text":"<p>During the DOSBox Staging 0.75 development period:</p> <ul> <li>11 DOSBox Staging contributors submitted 208 pull requests comprised   of 780 commits written by 18 authors.</li> <li>69 DOSBox Staging issues were reported and addressed.</li> <li>54 DOSBox Staging wiki updates were made.</li> <li>Three DOSBox (SVN) maintainers committed 76 changes written by 5   authors. These changes have been incorporated into DOSBox Staging.</li> </ul>"},{"location":"downloads/release-notes/0.75.0/#maintainers","title":"Maintainers","text":"<ul> <li>Patryk Obara</li> <li>kcgen</li> <li>Anton Shepelev (ant-222)</li> </ul>"},{"location":"downloads/release-notes/0.75.0/#direct-contributors","title":"Direct contributors","text":"<ul> <li>Anton Shepelev (ant-222)</li> <li>Joshua Fern</li> <li>kcgen</li> <li>Marco Maccaferri</li> <li>NicknineTheEagle</li> <li>Nopey Nope</li> <li>numberZero</li> <li>Patrick McMorris</li> <li>Patryk Obara</li> <li>Troy Campbell</li> <li>Wouter Wijsman</li> </ul>"},{"location":"downloads/release-notes/0.75.0/#testers-and-wiki-contributors","title":"Testers and wiki contributors","text":"<ul> <li>GranMinigun</li> <li>kas1e</li> <li>nemo93</li> <li>rderooy</li> </ul>"},{"location":"downloads/release-notes/0.75.0/#indirect-contributors","title":"Indirect contributors","text":"<p>Library or patch authors, upstream SVN developers, etc.</p> <ul> <li>Alexey Khokholov (nukeykt)</li> <li>Arthur Ouellet</li> <li>David Reid</li> <li>jmarsh</li> <li>NY00123</li> <li>Peter Veenstra</li> <li>ripsaw8080</li> <li>Ryan C. Gordon</li> <li>Sean Barrett</li> <li>Sjoerd van der Berg</li> <li>VileRancour</li> <li>Yann Collet</li> </ul>"},{"location":"downloads/release-notes/0.75.0/#changelog","title":"Changelog","text":"<p>You can read detailed changelog via Git, e.g. using the following command:</p> <pre><code>git shortlog ^v0.75.0-pre v0.75.0 --no-merges\n</code></pre>"},{"location":"downloads/release-notes/0.75.0/#merged-in-community-patches-and-libraries","title":"Merged-in community patches and libraries","text":"<p>The following lists those merges performed by maintainers either on behalf of, or making use of, patches or libraries authored by community members (in alphabetic order).</p> <p>kcgen</p> <ul> <li>Add built-in xxHash (v0.7.3) (Yann Collet)</li> <li>Add built-in Vorbis codec: (v1.17) (Sean Barrett)</li> <li>Add built-in SDL_sound r599 (LGPL) (Ryan C. Gordon)</li> <li>Add built-in C++ object serializer (Arthur Cuellet)</li> <li>Add built-in FLAC codec: dr_flac v0.12.11 (David Reid)</li> <li>Add built-in MP3 codec: dr_mp3 v0.6.4 (David Reid)</li> <li>Add built-in WAV codec: dr_wav v0.12.1 (David Reid)</li> </ul> <p>Patryk Obara</p> <ul> <li>Replace SDL 1.2 with SDL 2.0 (based on work of NY00123)</li> <li>Add Nuked OPL3 emulator v1.8 (Alexey Khokholov)</li> </ul> <p>Peter Veenstra</p> <p>Changes merged-in to SVN</p> <ul> <li>Add OpenGL shader support (ny00123 and refined by jmarsh)</li> <li> <p>Add several builtin shaders that mimic the scalers and some extra (jmarsh)</p> </li> <li> <p>Fix xcmpchg in dyn_x86 core. Allows Quickview to work in that core   (jmarsh)</p> </li> <li> <p>Additional refinements and speed ups (jmarsh)</p> </li> <li>Fix some issues with commit 4282 (Patryk Obara and jmarsh)</li> <li> <p>Switch to a different way to calculate the table offsets (jmarsh)</p> </li> <li> <p>Fix boundary checks for word/dword memory access. Speeds up dynamic 32 bit   core a bit (jmarsh)</p> </li> <li> <p>Add 64-bit support to dynamic_x86 core from vogons topic 67673 (jmarsh)</p> </li> </ul> <p>Michael Zijlstra</p> <ul> <li>Add cga_mono machine (VileRancour)</li> </ul>"},{"location":"downloads/release-notes/0.75.0/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p> <ol> <li> <p>DOSBox Staging 0.75.0 stable Windows build is still 32-bit; Linux and macOS builds are 64-bits.\u00a0\u21a9</p> </li> </ol>"},{"location":"downloads/release-notes/0.75.1/","title":"0.75.1 release notes","text":"<p>Release date: 2020-08-19</p>"},{"location":"downloads/release-notes/0.75.1/#summary","title":"Summary","text":"<p>This is a small bugfix release from 0.75.x stable branch\u2014it includes a few changes and bugfixes backported from upcoming 0.76.x version.</p>"},{"location":"downloads/release-notes/0.75.1/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p> <p>Brave souls interested in the latest features can test our work-in-progress 0.76.x\u00a0alpha builds . Please report any issues in our bugtracker.</p> <p>Also, check out our growing Wiki.</p>"},{"location":"downloads/release-notes/0.75.1/#new-features-in-detail","title":"New features in detail","text":""},{"location":"downloads/release-notes/0.75.1/#add-support-for-binding-more-controller-axes","title":"Add support for binding more controller axes","text":"<p>Users can now comfortably use both sticks, as commonly found on modern controllers (like DualShock or any Xbox controller). Previously, only one stick could be mapped.</p> <p>This change does not make old games \u201cmagically\u201d recognize all features of modern controllers. You need to map additional controller events to emulated keyboard, mouse, or joystick events using DOSBox\u2019s keymapper (Ctrl+F1).</p> <p>This was a highly-requested community patches that wasn\u2019t accepted by the upstream DOSBox project. We\u2019ve included the 10-axes per controller version of the patch in DOSBox Staging.</p>"},{"location":"downloads/release-notes/0.75.1/#provide-windows-x64-builds","title":"Provide Windows x64 builds","text":"<p>Windows 64-bit builds are now provided alongside 32-bit builds. Additional performance optimizations (WPO) are enabled for both builds. Linux and macOS builds have been similarly optimized using LTO since the 0.75.0 release.</p> <p>Both Windows builds now require SSE 4.2 instruction set, which is now on par with the Linux and macOS builds that have required SSE 4.2 support since the 0.75.0 release.</p> <p>Steam Hardware survey indicates that 97.45% users have CPUs supporting SSE 4.2, so your CPU is very likely good enough </p>"},{"location":"downloads/release-notes/0.75.1/#log-base-address-of-emulated-memory","title":"Log base address of emulated memory","text":"<p>This change was created per request from users of Cheat Engine, but it might be useful for other memory scanners/debuggers as well.</p> <p>Base memory address of DOS\u2019s emulated memory region is now logged to the console:</p> <pre><code>MEMORY: Base address: 0x5c758e0\nMEMORY: Using 4096 DOS memory pages (16 MiB)\n</code></pre> <p>Users previously had to debug the dosbox binary to discover the base address; an easy but tedious process.</p>"},{"location":"downloads/release-notes/0.75.1/#bugfixes","title":"Bugfixes","text":"<ul> <li> <p>Correct CD audio playback for games using single BIN/CUE; fixes a regression   in The Secret of Monkey Island. (#385)</p> </li> <li> <p>Fix build issue for Windows x64 target after VS2019 update. (#389)</p> </li> <li> <p>Fix a crash happening after bindings for 2 controllers were added and then   one controller is disconnected. (#405)</p> </li> <li> <p>Fix a crash on exit after removing controller actions bound to keyboard   events. (#405)</p> </li> <li> <p>Prevent crash on SDL2 re-creating OpenGL window. (#509)</p> </li> <li> <p>Provide detailed help for <code>DIR /?</code> command. (#506)</p> </li> <li> <p>Fix pixel-perfect mode not respecting <code>aspect = false</code> setting. (#544)</p> </li> </ul>"},{"location":"downloads/release-notes/0.75.1/#contributors","title":"Contributors","text":""},{"location":"downloads/release-notes/0.75.1/#maintainers","title":"Maintainers","text":"<ul> <li>Patryk Obara</li> <li>kcgen</li> </ul>"},{"location":"downloads/release-notes/0.75.1/#direct-contributors","title":"Direct contributors","text":"<ul> <li>Expack3</li> <li>kcgen</li> <li>nemo93</li> <li>Patryk Obara</li> <li>WengierWu</li> </ul>"},{"location":"downloads/release-notes/0.75.1/#indirect-contributors","title":"Indirect contributors","text":"<ul> <li>cfoesch</li> </ul>"},{"location":"downloads/release-notes/0.75.1/#changelog","title":"Changelog","text":"<p>You can read detailed changelog via Git, e.g. using the following command:</p> <pre><code>git shortlog ^v0.75.0 v0.75.1\n</code></pre>"},{"location":"downloads/release-notes/0.75.1/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.75.2/","title":"0.75.2 release notes","text":"<p>Release date: 2020-10-26</p>"},{"location":"downloads/release-notes/0.75.2/#summary","title":"Summary","text":"<p>This is a maintenance release from the 0.75.x stable branch.</p>"},{"location":"downloads/release-notes/0.75.2/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.75.2/#new-features-in-detail","title":"New features in detail","text":""},{"location":"downloads/release-notes/0.75.2/#select-monochrome-palette-colour","title":"Select monochrome palette colour","text":"<p>When emulating monochrome displays (via <code>machine = hercules</code> or <code>machine = cga_mono</code>), the default colour palette can now be set to either <code>white</code>, <code>paperwhite</code>, <code>green</code>, or <code>amber</code> in the configuration file, as follows:</p> <pre><code>[render]\nmonochrome_palette = amber\n</code></pre> <p>See: #607</p>"},{"location":"downloads/release-notes/0.75.2/#raw-mouse-input","title":"Raw mouse input","text":"<p>You can enable this option to bypass the operating system\u2019s mouse acceleration and sensitivity settings. This works in fullscreen or when the mouse is captured in windowed mode.</p> <p>The option can be set in the <code>[sdl]</code> section of the configuration file:</p> <pre><code>[sdl]\nraw_mouse_input = true\n</code></pre> <p>The feature is disabled by default, but some games (e.g. FPS titles, like DOOM or Dark Forces) work better with raw input enabled (especially when used with modern, very sensitive gaming mice).</p> <p>See: #636</p>"},{"location":"downloads/release-notes/0.75.2/#bugfixes","title":"Bugfixes","text":"<ul> <li> <p>Bundle C++ runtime libraries with Windows builds for users   on Windows 7, 8.x, and those who disabled Windows 10 update mechanism.   (#675)</p> </li> <li> <p>Reimplement CLS command to prevent text mode reset. (#639)</p> </li> <li> <p>Fix whitespace handling in modem ATD command. (#652)</p> </li> <li> <p>Fix boot failure when using HDD image. (#522)</p> </li> </ul>"},{"location":"downloads/release-notes/0.75.2/#notes-for-packagers","title":"Notes for packagers","text":"<p>This release includes numerous fixes affecting our build system and other changes relevant for packaging (contributed by Gentoo packagers, and people preparing Debian, Fedora, and Flatpak packages)\u2014prompt upgrade is recommended.</p> <p>If you\u2019re packaging DOSBox Staging for your OS, we have a few tips:</p> <ul> <li> <p>We strongly suggest keeping our default binary name: <code>dosbox</code>.   DOSBox\u00a0Staging is a drop-in replacement for older DOSBox versions\u2014some   existing and popular programs, such as Wine and GUI frontends, depend on the   <code>dosbox</code> binary name.  It\u2019s also the default name of our man page and   appears in the documentation.</p> </li> <li> <p>You don\u2019t need to generate your own desktop entry, appstream metadata   (<code>metainfo.xml</code>), nor package description: please see the relevant files   in the <code>contrib/linux/</code> directory.</p> </li> <li> <p>We provide desktop icons in scalable or raster formats (optimized for small   sizes). Find them in the <code>contrib/icons/</code> directory.</p> </li> <li> <p>During the configuration step, remember to add   <code>-DNDEBUG</code>   to preprocessor flags (it\u2019s important!), as well as using <code>-O3</code> in both   C and C++ compiler flags, for example:</p> <pre><code>./configure CPPFLAGS=\"-DNDEBUG\" CFLAGS=\"-O3\" CXXFLAGS=\"-O3\"\n</code></pre> </li> <li> <p>Our testing indicates that GCC generates faster binaries than Clang, but   use whatever compiler is more appropriate for your OS.</p> </li> <li> <p>The license is \u201cGNU GPL version 2.0 or later\u201d (SPDX: <code>GPL-2.0-or-later</code>).   GitHub does not show \u201cor later\u201d, but our packages should show the proper   license info.</p> </li> </ul> <p>To all our package maintainers: thank you! </p>"},{"location":"downloads/release-notes/0.75.2/#contributors","title":"Contributors","text":""},{"location":"downloads/release-notes/0.75.2/#maintainers","title":"Maintainers","text":"<ul> <li>Patryk Obara</li> <li>kcgen</li> <li>nemo93</li> </ul>"},{"location":"downloads/release-notes/0.75.2/#contributors_1","title":"Contributors","text":"<ul> <li>Bernard Cafarelli</li> <li>David Heidelberg</li> <li>Feignint</li> <li>MasterO2</li> <li>NicknineTheEagle</li> <li>WengierWu</li> </ul>"},{"location":"downloads/release-notes/0.75.2/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.76.0/","title":"0.76.0 release notes","text":"<p>Release date: 2020-12-03</p>"},{"location":"downloads/release-notes/0.76.0/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.76.0/#summary","title":"Summary","text":"<p>This release introduces significant enhancements to the quality of audio emulation (GUS, built-in MIDI, PC speaker), improved support for PowerPC and POWER8 architectures, and a healthy mix of usability, documentation, code quality improvements.</p> <p>Enjoy! </p>"},{"location":"downloads/release-notes/0.76.0/#new-features-in-detail","title":"New features in detail","text":""},{"location":"downloads/release-notes/0.76.0/#gravis-ultrasound-emulation-improvements","title":"Gravis UltraSound emulation improvements","text":"<p>Sample from Rise of the Triad (1995). For other comparisons see link.</p> <p>Using headphones is highly recommended!</p> GUS emulator Sample (FLAC) Old implementation  Your browser does not support the <code>audio</code> element. New implementation (with improvements)  Your browser does not support the <code>audio</code> element. <p>Several changes have been made to the GUS emulation resulting in (sometimes) audible differences, as follows:</p> <ul> <li> <p>Output volume is now typically on-par with other audio devices.</p> </li> <li> <p>Panning of voices is now performed using constant-power, as described in the   Gravis\u2019 SDK documentation. Constant-power panning was originally researched by   the British Broadcasting Corporation (BBC) and found to produce the most   realistic perception of voice placement on a radial axis from the listener.</p> </li> <li> <p>When quitting DOSBox Staging, information about the game\u2019s GUS audio stream   will be provided, such as the breakdown of 8-bit versus 16-bit samples. A   potential suggestion to adjust the game\u2019s GUS mixer level, either upward or   downward may also be provided, which you could paste into your game\u2019s startup   batch file or <code>[autoexec]</code> section.</p> </li> </ul> <p>We recommend using GUS emulation for the handful of DOS games that natively support the GUS\u2019s multi-voice feature. For a list of these games, see: GUS Native games.</p> <p>For more details about DOSBox Staging\u2019s GUS support and enhancements, see: GUS\u00a0Enhancements.</p> <p>For information about constant-power panning, see pages 7 and 8 of the BBC R&amp;D White Paper.</p>"},{"location":"downloads/release-notes/0.76.0/#built-in-glsl-shaders","title":"Built-in GLSL shaders","text":"<p>Two high-quality shaders that emulate the visual look of an analog CRT monitor are now included:</p> <ul> <li><code>glshader = crt-easymode-flat</code>: for DOS games using resolutions 640\u00d7400    or higher.</li> <li><code>glshader = crt-fakelottes-flat</code>: for DOS games using smaller resolutions    (e.g. 320\u00d7200).</li> </ul> <p></p> <p>Jazz Jackrabbit (Holiday Hare 1995 Edition) \u2014 showcasing <code>crt-fakelottes-flat</code> </p> <p></p> <p>Jazz Jackrabbit (Holiday Hare 1995 Edition) \u2014 showcasing <code>crt-fakelottes-flat</code> (zoomed-in view)   </p>"},{"location":"downloads/release-notes/0.76.0/#built-in-midi-support-via-fluidsynth","title":"Built-in MIDI support via FluidSynth","text":"<p>FluidSynth 2.x, a powerful and accurate MIDI synthesizer, has been integrated into DOSBox to directly support MIDI playback. This means you no longer need to use an external MIDI synthesizer (but it\u2019s still possible, of course).</p> <p>Configure your game to use General MIDI (GM) output on port <code>330</code> and update your DOSBOX Staging config as follows to start using it:</p> <pre><code>[midi]\nmididevice = fluidsynth\nmpu401     = intelligent\n[fluidsynth]\nsoundfont = my-favourite-soundfont.sf2\n</code></pre> <p>DOSBox will look for soundfont files in the <code>soundfonts</code> directory within your configuration directory and in additional platform-specific directories (e.g. <code>/usr/share/soundfonts/</code> on Linux).</p> <p>You can also use absolute paths or paths relative to the current working directory (for bundling <code>.sf2</code> files in game directories).</p>"},{"location":"downloads/release-notes/0.76.0/#fine-grained-midi-level-controls","title":"Fine-grained MIDI level controls","text":"<p>Some SoundFonts can be \u201clouder\u201d than others, such as Timbres of Heaven. You can provide an optional volume-scaling percentage after the SF2 filename, such as:</p> <pre><code>soundfont = timbres_of_heaven.sf2 20\n</code></pre> <p>This will reduce the SoundFont\u2019s volume to 20%.</p> <p>Most games that play MIDI music provide an in-game volume adjustment, but some games may not save your settings while others may not even allow this adjustment. For these games, use the <code>mixer FSYNTH</code> command to set your desired MIDI output volume either in your startup batch file or the <code>[autoexec]</code> section in the game\u2019s config file, e.g.:</p> <pre><code>C:\\&gt;mixer FSYNTH 33\n</code></pre>"},{"location":"downloads/release-notes/0.76.0/#what-soundfont-should-i-use","title":"What soundfont should I use?","text":"<p>This is very much a matter of personal opinion. We\u2019ve compiled a list of SoundFont recommendations suitable for DOS gaming on our wiki.</p> <p>Linux users: if you have the fluid-soundfont installed on your OS, it will be picked up automatically by default.</p>"},{"location":"downloads/release-notes/0.76.0/#integer-scaling-pixel-perfect-option-for-opengl-output","title":"Integer scaling (pixel-perfect) option for OpenGL output","text":"<p>Integer scaling (aka pixel-perfect mode) is now also available via OpenGL.</p> <p>You can test integer scaling by setting the following <code>output</code> options:</p> <ul> <li> <p><code>output = openglpp</code> \u2014 OpenGL + integer scaling. This option is used to provide   backwards compatibility with other DOSBox forks.</p> </li> <li> <p><code>output = texturepp</code> \u2014 SDL2 texture backend + integer scaling. This option   was added in 0.75.0.</p> </li> </ul> <p>These two options behave pretty much the same, except Linux users can enjoy resizable windows with <code>output = openglpp</code>.</p> <p>Examples running fullscreen on 1080p display:</p> <p></p> <p>The Lost Vikings (1993) \u2014 with integer scaling   </p> <p></p> <p>Epic Pinball (1993) \u2014 with integer scaling   </p> <p>Tip</p> <p>Integer scaling works best for games that use square pixels; most DOS games use non-square pixels (often using resolution 320\u00d7200 / PAR 5:6)\u2014for those titles sharp-bilinear scaling (DOSBox Staging default setting) works better.</p> <p>This video essay by Displaced Gamers provides a great explanation:</p> <p>DOS Gaming Aspect Ratio \u2014 320\u00d7200   </p> <p>The <code>output = openglpp</code> option with <code>windowresolution = resizable</code> is also a good choice for text mode DOS applications as it produces sharp text (but sacrifices the proper DOS font aspect ratio):</p> <p></p> <p>Turbo Pascal in windowed mode with pixel-perfect scaling   </p>"},{"location":"downloads/release-notes/0.76.0/#dynamic-recompilation-for-powerpc-and-power8-ppc64le","title":"Dynamic recompilation for PowerPC and POWER8 (ppc64le)","text":"<p>Roughly two years ago jmarsh of the vogons.org forums published a feature-complete dynamic recompilation patch supporting the PowerPC (32-bit) architecture. This was quickly expanded by the community to support the POWER8 (64-bit) architecture as well. Both patches (with slight improvements) were merged to DOSBox Staging.</p> <p>Shoutout to the AmigaOS community for the help with thoroughly testing this significant PowerPC contribution! </p>"},{"location":"downloads/release-notes/0.76.0/#quick-edit-and-find-your-configuration-file","title":"Quick-edit and find your configuration file","text":"<p>It can be cumbersome to edit and find your default <code>dosbox-staging.conf</code> file. You might not know where it\u2019s located or it might be hidden away due to certain OS settings.</p> <p>These two command-line options can help:</p> <ul> <li> <p><code>dosbox --editconf</code>, opens the <code>.conf</code> file in a text editor.</p> <p>This option respects the <code>EDITOR</code> environment variable if set to your prefered editor. Otherwise, it uses one of the following: <code>nano</code>, <code>vim</code>, <code>vi</code>, <code>notepad++.exe</code>, or <code>notepad.exe</code>.</p> </li> <li> <p><code>dosbox --printconf</code>, prints the path to the <code>.conf</code> file.</p> </li> </ul>"},{"location":"downloads/release-notes/0.76.0/#ls-command","title":"LS command","text":"<p>The <code>ls</code> (list directory contents) command is widely available across Unix-based operating systems. Most users of modern OSes are more likely to have it in their muscle memory rather than the <code>DIR</code> DOS command.</p> <p>A very simple implementation of <code>ls</code> has been added that resembles the default operation of GNU <code>ls</code>:</p> <ul> <li>Fits as many directory entries as possible on the screen</li> <li>Differentiates directories, executables, and plain files using color</li> <li>Prints files in lowercase and directories in uppercase, Norton Commander style</li> </ul> <p></p> <p>Windows 3.11 listed using <code>dir /w /p</code> \u2014 not enough space to show all   files, hard to distinguish between files and directories   </p> <p></p> <p>The same directory listed using <code>ls</code> \u2014 more efficient utilisation of space   in 80\u00d725 DOS text mode, easier to read   </p>"},{"location":"downloads/release-notes/0.76.0/#rapid-dc-offset-correction-for-the-emulated-pc-speaker","title":"Rapid DC offset correction for the emulated PC speaker","text":"<p>Audio speakers work by pushing and pulling their diaphragm at a rate equal to the audio\u2019s frequency.</p> <p>Physical PC speakers can sometimes be left in a pushed-out or pulled-in state through constant voltage, called DC offset, which typically isn\u2019t a problem on real hardware. However in DOSBox, the PC speaker\u2019s offset samples mix with those from other audio sources such as the Sound Blaster or Adlib, which can:</p> <ul> <li> <p>Cause a pop if the next sample played has a position significantly different   from the position of the DC offset.</p> </li> <li> <p>Harm accurate sound reproduction of other sound devices by moving half the   waveform further away from the center line (making it louder) and the other   half of the waveform closer to the center line (making it quieter).</p> </li> </ul> <p>This new configuration option, <code>zero_offset</code> under the <code>[speaker]</code> section, defaults to <code>'auto'</code>. It\u2019s enabled for non-Windows systems and  disabled on Windows as some of its audio drivers appear to attempt their own DC offset correction.</p> <p>For more details about this change, see: #480</p> <p>For a discussion about Windows 10 performing DC offset correction, see: #625</p> <p></p> <p>The game has left the PC speaker in an offset position, which is detected   and silently \u201cwound down\u201d in a fraction of a second.   </p>"},{"location":"downloads/release-notes/0.76.0/#audio-pop-and-click-prevention","title":"Audio pop and click prevention","text":"<p>Some games generate audio pops or clicks during startup. We\u2019ve added two changes to reduce these occurences:</p> <ul> <li>Initial audio by all emulated devices is fed through a 15-ms envelope   specifically timed to prevent unnatural electronic pops and clicks, yet fast   enough to ensure that sharp-attack natural sounds (such as a cymbal crash) are   not affected.</li> </ul> <p> </p> <p>On startup, the game greets our ears with an unatural instantaneous pop. In   the second image, we see the enveloper briefly in action ramping the   instaneous volume to prevent the pop.   </p> <p>For more visuals and detail about the enveloper, see: #442</p> <ul> <li>Some games test their interface to the Sound Blaster 16 using one or more   small \u201cjunk\u201d DMA transfers. Unfortunately on actual hardware, these result in   startup clicks and pops, which can be jarring when using a headset.  We now   suppress these initial junk transfers.</li> </ul> <p>For a list of many more games that had their pops cleaned up, see: #411</p> <p></p> <p>On startup, Lands of Lore: The Throne of   Chaos\u2018s   audio driver blasts our ears with two instantaneous pops, which are   eliminated after suppression.   </p>"},{"location":"downloads/release-notes/0.76.0/#splash-screen-and-help-banner-verbosity-control","title":"Splash screen and help banner verbosity control","text":"<p>The splash screen and its delay, as well as the blue help banner, can now be skipped using the <code>startup_verbosity</code> setting in the <code>[dosbox]</code> section in the config file.  The verbosity can be set as follows:</p> <ul> <li> <p><code>high</code> shows everything: the splash screen, blue help banner, and initial   console output.</p> </li> <li> <p><code>medium</code> skips just the splash screen and its delay, but still shows the blue   help banner and initial console output.</p> </li> <li> <p><code>low</code> skips both the splash screen, delay, and blue help banner, but still   shows  initial console output.</p> </li> <li> <p><code>quiet</code> skips all of the above. The first output will either be the command   prompt or output from startup executables or batch files.</p> </li> </ul> <p>By default, the verbosity is set to <code>auto</code>, which is either <code>low</code> when an executable or directory is passed on the command-line or <code>high</code> when DOSBox Staging is started without initial commands.</p> <p>For a visual depiction of the options, see: #477</p>"},{"location":"downloads/release-notes/0.76.0/#revise-help-messages-for-mount-and-imgmount-commands","title":"Revise help messages for MOUNT and IMGMOUNT commands","text":"<p>These commands are usually thoroughly documented in the manual, but having usage examples at your fingertips is more convenient. Help can be invoked by passing one of the following parameters: <code>/?</code> (DOS style), or <code>-h</code>, <code>--help</code> (GNU style).</p> <p>Read more in: #729</p> <p></p> <p>Revised help messages provide usage examples, common parameter descriptions,   and use a limited set of colours to improve readability.   </p>"},{"location":"downloads/release-notes/0.76.0/#improve-telnet-mode-handling-for-modem-emulation","title":"Improve Telnet-mode handling for modem emulation","text":"<p>For those hosting a BBS behind a Telnet interface, you can now pre-configure your serial port in Telnet-mode with the <code>telnet:1</code> argument, as follows:</p> <pre><code>[serial]\nserial1 = modem telnet:1 listenport:2323\n</code></pre> <p>For those dialling BBSs hosted behind a Telnet interface, use the following dial-prefix: <code>AT+NET1DT</code>. In general, the <code>+NET1</code> or <code>+NET0</code> AT-command will enable or disable Telnet-mode, respectively.</p> <p>This change brings Telnet-mode in-line with the Hayes multi-character command specification, which should be compatible with existing BBS software.</p> <p>For more background about this change, see: #582</p> <p></p> <p>When telnet-mode is set according to the remote BBS\u2019s needs, you will   experience fast and corruption-free transfers.   </p>"},{"location":"downloads/release-notes/0.76.0/#fix-setting-file-timestamp","title":"Fix setting file timestamp","text":"<p>DOS function 5701h \u201cSet File Time/Date\u201d was implemented.</p> <p>This corrects a long-standing emulation issue when it comes to date handling of files created in DOS (e.g. when files are being unpacked from an archive). This fixes some game installers and other software that checks file modification times.</p>"},{"location":"downloads/release-notes/0.76.0/#case-insensitive-paths-handling","title":"Case-insensitive paths handling","text":"<p>Paths passed to commands <code>mount</code>, <code>imgmount</code>, and audio track paths in <code>.cue</code> and <code>.ins</code> files are now treated as case-insensitive, regardless of the operating system.</p> <p>Fixes numerous issues with running DOS games on Linux or FreeBSD. This change alone corrects the vast majority of Windows-only DOS game releases on GOG or Steam (such as e.g. Settlers II, Redneck Rampage, or Mortal Kombat* series)\u2014users no longer need to manually adjust the paths after unpacking games from Windows installer. This should significantly improve the quality of Lutris installers as well.</p>"},{"location":"downloads/release-notes/0.76.0/#revise-default-keyboard-shortcuts","title":"Revise default keyboard shortcuts","text":"<p>The default keyboard shortcuts were revised to avoid triggering conflicting OS default shortcuts. We\u2019ve only changed those that that were not typically used by general users.</p> <p>The list of new default shortcuts are:</p> <ul> <li>Alt+Enter \u2013 Switch between fullscreen and window mode</li> <li>Alt+Pause \u2013 Pause/Unpause emulator</li> <li>Ctrl+F1 \u2013 Start the keymapper</li> <li>Ctrl+F4 \u2013 Change between mounted floppy/CD images</li> <li>Ctrl+F5 \u2013 Save a screenshot</li> <li>Ctrl+F6 \u2013 Start/Stop recording sound output to a wave file</li> <li>Ctrl+F7 \u2013 Start/Stop recording video output to a zmbv file</li> <li>Ctrl+F9 \u2013 Shutdown emulator</li> <li>Ctrl+F10 \u2013 Capture/Release the mouse</li> <li>Ctrl+F11 \u2013 Slow down emulation</li> <li>Ctrl+F12 \u2013 Speed up emulation</li> <li>Ctrl+Alt+Home \u2013 Restart emulator</li> <li>Hold Alt+F12 \u2013 Fast forward</li> </ul> <p>Keymapper received tiny usability improvements as well: it displays the keyboard shortcut (binding) for the selected action.</p>"},{"location":"downloads/release-notes/0.76.0/#monochrome-palette-colour-setting","title":"Monochrome palette colour setting","text":"<p>When emulating monochrome displays (Hercules or CGA/monochrome), the default colour palette can now be selected in the configuration file.</p> <p>This feature was backported to 0.75.2 release; read more.</p>"},{"location":"downloads/release-notes/0.76.0/#raw-mouse-input-setting","title":"Raw mouse input setting","text":"<p>User can now bypass the operating system\u2019s mouse acceleration and sensitivity settings. This works in fullscreen or when the mouse is captured in window mode.</p> <p>This feature was backported to 0.75.2 release; read more.</p>"},{"location":"downloads/release-notes/0.76.0/#10-axis-controller-support","title":"10-axis controller support","text":"<p>Old joysticks compatible with DOS games can be emulated using modern 10-axis controllers (like DualShock or Xbox controllers).</p> <p>This feature was backported to 0.75.1 release; read more.</p>"},{"location":"downloads/release-notes/0.76.0/#log-memory-base-address","title":"Log memory base address","text":"<p>The base memory address of DOS\u2019s emulated memory region is now logged to the console to help some users of external software, such as Cheat Engine.</p> <p>This feature was backported to 0.75.1 release; read more.</p>"},{"location":"downloads/release-notes/0.76.0/#bugfixes","title":"Bugfixes","text":"<p>Some notable bugfixes:</p> <ul> <li>Prevent SDL2 crash on exit when using Wayland. (#336)</li> <li>Fix sound effects in Prince of Persia on Tandy. (#457)</li> <li>Prevent crash on SDL2 re-creating OpenGL window. (#510)</li> <li>Fix <code>dir /p</code> in non-standard text modes. (#528)</li> <li>Prevent injection of spurious newlines in autoexec and bat files. (#536)</li> <li>Fix <code>capture_mouse</code> <code>middlegame</code> setting. (#563)</li> <li>Fix a CD-DA roll-over bug when calculating PCM frames. (#569)</li> <li>Fix boot failure from an image mounted as C:. (#589)</li> <li>Fix memory leak in the modem phone book. (#622)</li> <li>Fix <code>cls</code> command. (#639)</li> <li>Increase default DOS file limit for emulation of program Subiekt 4. (#656)</li> <li> <p>Fix Pentium CPUID to indicate CPU without FDIV bug. (#694)</p> </li> <li> <p>(from SVN) Multiple bugfixes and regression fixes for various games or demoscene   productions, such as   Clue: Master Detective   (1989), (8c002),   Pleasure\u2019n Pain demo   (8c07c, e9a67), MayDay demo (b6e77), PC Tools 9, and others.</p> </li> <li> <p>(from SVN) Set Precision Exception in <code>FRNDINT</code> (Round to Integer instruction),    to avoid bug when running Borland Pascal <code>pow</code> implementation. (7892b)</p> </li> </ul>"},{"location":"downloads/release-notes/0.76.0/#known-issues","title":"Known issues","text":"<ul> <li> <p>(added on 2020-12-04) Windows x64 builds are not available for now due   to regression after building in Visual Studio 16.8.2. (#746)</p> </li> <li> <p>The W^X memory protection (enabled by default via e.g. SELinux) prevents   dynamic recompiler from working. (#253)</p> </li> <li> <p>Keymapper has problems with mapping multiple axes when multiple controllers   are plugged in (e.g. notably when using modern joysticks and throttles   connected at the same time). (#342)</p> </li> <li> <p>GLSL shader implementation crashes on certain Intel GPUs on Arch. (#319)</p> </li> <li> <p>Mapping key scancodes on X11 using <code>xmodmap</code> can break SDL2 ability to   detect your keyboard layout and leave you with non-functional keyboard input.   Use udev instead of xmodmap to prevent this problem.</p> </li> <li> <p>Some users of Gnome 3.38.1 experience problems when toggling fullscreen (both   X11 and Wayland). This seems to be a Gnome issue; if you experience it as   well, please make a report in the bugtracker.</p> </li> </ul>"},{"location":"downloads/release-notes/0.76.0/#removed-features","title":"Removed features","text":"<ul> <li> <p>Option <code>gusrate</code> in the <code>[gus]</code> section was removed. The revised Gravis UltraSound   emulation implementation made this option obsolete.</p> </li> <li> <p>Option <code>oplrate</code> in the <code>[sblaster]</code> section was removed. This value is now   automatically tied to <code>rate</code> in <code>[mixer]</code> to avoid resampling (so users do not   need to manually correlate values for these two options any more).</p> </li> </ul>"},{"location":"downloads/release-notes/0.76.0/#notes-for-developers","title":"Notes for developers","text":"<ul> <li> <p>Project switched to using C++14.</p> </li> <li> <p>We introduced unit tests (using Google Test framework). At the moment,   unit tests are running on Linux only\u2014to build them use <code>--enable-tests</code>   configure flag and <code>make test</code> to run them. They are included in CI gating.</p> </li> <li> <p>Windows x64 builds were added to Visual Studio solution (both Debug and   Release profiles).</p> </li> <li> <p>CI was extended with gating based on MSVC (32-bit and 64-bit builds)</p> </li> <li> <p>Due to instability and extremely slow installation times MSYS2 was   removed from gating CI. It is still included in our daily builds, but we do   not recommend using MSYS2 for development.</p> </li> <li> <p>Linux builds for ARMv6, ARMv7, ARMv8 (AArch64), ppc64le, and s390x   architectures were added to our set of daily builds.</p> </li> <li> <p>We fixed all <code>-Wall -Weffc++</code> warnings on Linux and macOS and corrected   a large number of issues detected via static and dynamic code analysis tools.</p> </li> </ul> <p></p> <p>When the project started we inherited 1411 warnings from DOSBox; as of   November 2020, the builds are finally clean, so it\u2019s easier to make sure we   do not introduce new warnings.   </p>"},{"location":"downloads/release-notes/0.76.0/#changes-merged-from-upstream-projects","title":"Changes merged from upstream projects","text":"<ul> <li>Merge DOSBox SVN changes up to revision 4392</li> <li>Sync dr_mp3 v0.6.11 from upstream</li> <li>Sync dr_flac v0.12.13 from upstream</li> <li>Sync dr_wav v0.12.4 from upstream</li> <li>Sync xxhash 0.8.0 from upstream</li> <li>Sync stb header v2.36 from upstream</li> <li>Sync stb_vorbis v1.19 from upstream</li> </ul>"},{"location":"downloads/release-notes/0.76.0/#contributors","title":"Contributors","text":"<p>During DOSBox Staging 0.76 development period we merged 1035 commits, including 55 commits originating from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.76.0/#maintainers","title":"Maintainers","text":"<ul> <li>Patryk Obara</li> <li>kcgen</li> <li>nemo93</li> </ul>"},{"location":"downloads/release-notes/0.76.0/#direct-contributors","title":"Direct contributors","text":"<ul> <li>Affonso Amendola</li> <li>Bernard Cafarelli</li> <li>cfoesch</li> <li>ClassicHasClass</li> <li>David Heidelberg</li> <li>drfiemost</li> <li>Edward Betts</li> <li>Erlotinib</li> <li>Expack3</li> <li>Feignint</li> <li>Jonathan Campbell</li> <li>MasterO2</li> <li>NicknineTheEagle</li> <li>Nikos Chantziaras</li> <li>Robert de Rooy</li> <li>Troy Campbell</li> <li>Tyrell Sassen</li> <li>Vladimir Serbinenko</li> <li>Wengier</li> </ul>"},{"location":"downloads/release-notes/0.76.0/#dosbox-contributors","title":"DOSBox contributors","text":"<p>SVN r4336:r4392</p> <ul> <li>Harekiet</li> <li>jmarsh</li> <li>Jonathan Campbell</li> <li>NewRisingSun</li> <li>Qbix</li> <li>ripsaw8080</li> </ul>"},{"location":"downloads/release-notes/0.76.0/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.77.0/","title":"0.77.0 release notes","text":"<p>Release date: 2021-07-02</p>"},{"location":"downloads/release-notes/0.77.0/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.77.0/#significant-changes","title":"Significant changes","text":""},{"location":"downloads/release-notes/0.77.0/#migrated-to-the-meson-build-system","title":"Migrated to the Meson build system","text":"<p>Migrated Staging from autotools to the Meson build system. Those building from source, please see <code>BUILD.md</code> in the repository. See: #854</p>"},{"location":"downloads/release-notes/0.77.0/#macos-and-selinux-security-policy-compliance","title":"macOS and SELinux security policy compliance","text":"<p>Added write-xor-execute page support to comply with the latest macOS and SELinux security policies</p> <p>Thanks to jmarsh and Jonathan Campbell for discussions on vogons. See: #1031</p>"},{"location":"downloads/release-notes/0.77.0/#variable-expansion-in-the-interactive-dos-shell","title":"Variable expansion in the interactive DOS shell","text":"<p>See: #1059</p>"},{"location":"downloads/release-notes/0.77.0/#finished-fluidsynth-integration","title":"Finished FluidSynth integration","text":"<p>FluidSynth is now included in all release binaries. See the wiki notes for how to use it. Run <code>MIXER /LISTMIDI</code> in the DOS shell to see your available soundfonts.</p> <p>Thanks to:</p> <ul> <li> <p>Christian Lestrade for   authoring this support in   2005, and all subsequent maintainers.</p> </li> <li> <p>Meson for   adding FluidSynth   to the WrapDB.</p> </li> </ul>"},{"location":"downloads/release-notes/0.77.0/#finished-mt-32-integration","title":"Finished MT-32 integration","text":"<p>The MT-32 emulator is now included in all release binaries. See the wiki notes for how to use it. Run <code>MIXER /LISTMIDI</code> in the DOS shell to see the available MT-32 models and versions.</p> <p>See the list of unmissable MT-32 experiences, courtesy vogons.org forum user Shreddoc and contributors.</p> <p>Thanks to:</p> <ul> <li> <p>Canadacow for authoring   MT-32 emulation in 2003, KingGuppy and Mok for the follow-on work, and   SergM who continues to maintain and improve the Munt project today.</p> </li> <li> <p>Meson for adding   libmt32emu to the WrapDB.</p> </li> <li> <p>Microsoft for adding   libmt32emu to Vcpkg.</p> </li> </ul>"},{"location":"downloads/release-notes/0.77.0/#ibm-ps1-audio-device-support","title":"IBM PS/1 Audio device support","text":"<p>See the wiki notes for how to use it.</p> <p>Thanks to JMK for authoring PS/1 Audio emulation in 2008.</p>"},{"location":"downloads/release-notes/0.77.0/#innovation-ssi-2001-audio-device-support","title":"Innovation SSI-2001 audio device support","text":"<p>See the wiki notes for how to use it.</p> <p>Thanks to:</p> <ul> <li> <p>Vasyl for authoring   SSI-2001 emulation in 2006.</p> </li> <li> <p>Dag Lem for authoring, and Antti Lankila and Leandro Nini for   improving the SID chip emulator.</p> </li> </ul>"},{"location":"downloads/release-notes/0.77.0/#macos-hotkey-changes","title":"macOS hotkey changes","text":"<p>Replaced the default Ctrl+F1 - F12 hotkeys on macOS with Cmd+F1 - F12 to reduce conflicts with the OS.</p> <p>Thanks to Antti Peltola, Burrito78, and Kirk Klobe for guidance and testing.</p>"},{"location":"downloads/release-notes/0.77.0/#translation-improvements","title":"Translation improvements","text":"<p>Added or improved translations for French, Italian, Polish, Russian, and Spanish.</p> <p>Thanks to Draky50110 (fr), Kappa971 (it), dreamer (po), IlyaIndigo (ru), and Peluchito (es).</p>"},{"location":"downloads/release-notes/0.77.0/#improved-startup-settings","title":"Improved startup settings","text":"<p>Added <code>splash_only</code> to the <code>startup_verbosity</code> settings. This shows the splash but skips the help banner.</p>"},{"location":"downloads/release-notes/0.77.0/#relative-window-size-support","title":"Relative window size support","text":"<p>Three relative window sizes, <code>small</code>, <code>medium</code>, or <code>large</code>, are now understood by the <code>windowresolution</code> config setting. These T-shirt sizes correspond to a window that\u2019s 25%, 50%, or 80% of your desktop\u2019s area, regardless of DPI or type of monitor (be it 720p, 1080p, or 4K).</p>"},{"location":"downloads/release-notes/0.77.0/#window-resizing-enabled-by-default","title":"Window resizing enabled by default","text":"<p>Window resizing using corner-drag is now auto-enabled on all platforms when conditions permit.</p>"},{"location":"downloads/release-notes/0.77.0/#bugfixes","title":"Bugfixes","text":"<p>The following user-visible bugs were fixed:</p> <ul> <li> <p>Will no longer lose focus on Raspberry Pi when launched fullscreen in an Xorg   session. (#995)</p> </li> <li> <p>Release builds now use <code>dosbox-staging.conf</code> as the primary config file instead of   <code>dosbox-staging-git.conf</code>. (#932)</p> </li> <li> <p>Windows release builds once again mount Opus CD-DA tracks, which was a   regression in 0.76. (#885)</p> </li> <li> <p><code>AUTOTYPE</code> now works with all games. Until now, a subset of games didn\u2019t   respond to its keystrokes.   (#942)</p> </li> <li> <p>Shoulder triggers on some six-axis controllers, such as the PS4 and   Logitech\u2019s F310 and F710 controllers, can now be mapped.   (#944)</p> </li> <li> <p>When toggling out of fullscreen mode, in some corner cases this resulted in   a blank window. This   is now fixed. (#1096)</p> </li> </ul>"},{"location":"downloads/release-notes/0.77.0/#contributions","title":"Contributions","text":"<p>The 0.77 release includes 920 commits plus 35 commits originating from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.77.0/#dosbox-staging-members","title":"DOSBox Staging members","text":"<p>The following members actively supported the project during the 0.77 timeframe:</p> <ul> <li>Antti Peltola (macOS testing and feedback)</li> <li>Brandon Munger (collaborator)</li> <li>Burrito78 (macOS testing and feedback)</li> <li>GranMinigun (testing and triage)</li> <li>kcgen (maintainer)</li> <li>Kirk Klobe (maintainer)</li> <li>Dennis L\u00fchring (collaborator)</li> <li>nemo93 (Wiki maintainer)</li> <li>Patryk Obara (maintainer)</li> <li>Ruben Genoese (testing and triage)</li> <li>Wengier (collaborator)</li> </ul>"},{"location":"downloads/release-notes/0.77.0/#direct-contributors","title":"Direct contributors","text":"<p>The following authors, co-authors, wiki editors, translators, testers, and bug reporters directly contributed to the 0.77 release:</p> <ul> <li>Allofich</li> <li>Antti Peltola</li> <li>Brandon Munger</li> <li>Burrito78</li> <li>Dennis L\u00fchring</li> <li>Didu</li> <li>Draky50110</li> <li>Dugan Chen</li> <li>eli-schwart</li> <li>Emmanuel Gil Peyrot</li> <li>Feignint</li> <li>Gilles</li> <li>GranMinigun</li> <li>hail-to-the-ryzen</li> <li>IlyaIndigo</li> <li>IPeluchito</li> <li>jmarsh</li> <li>Joshua Kr\u00e4mer</li> <li>Kappa971</li> <li>kcgen</li> <li>Ken H\u00e4ndel</li> <li>Kirk Klobe</li> <li>mdmallard</li> <li>nemo93</li> <li>Otto Urpelainen</li> <li>Patryk Obara</li> <li>Peluchito</li> <li>Ruben Genoese</li> <li>rhys073</li> <li>Sarah Whitman</li> <li>Toby Jennings</li> <li>warpdesign</li> <li>Wengier</li> </ul>"},{"location":"downloads/release-notes/0.77.0/#dosbox-contributors","title":"DOSBox contributors","text":"<p>The following DOSBox authors\u2019 SVN commits (r4393 through r4459) were merged during the 0.77 timeframe:</p> <ul> <li>jmarsh</li> <li>Peter Veenstra</li> <li>ripsaw8080</li> <li>Sjoerd van der Berg</li> </ul>"},{"location":"downloads/release-notes/0.77.0/#indirect-contributors","title":"Indirect contributors","text":"<p>The following patch or external project authors\u2019 sources were merged during the 0.77 timeframe:</p> <ul> <li>Antti S. Lankila (reSIDfp maintainer)</li> <li>Dag Lem (original reSID author)</li> <li>David Reid (dr_libs audio codecs author)</li> <li>Dean Beeler (original MT-32 patch author)</li> <li>Jason Kim (PS/1 patch author)</li> <li>Jonathan Campbell (DOSBox-X maintainer)</li> <li>nukeykt (Nuked OPL emulator author)</li> <li>sergm (Munt and MT-32 patch maintainer)</li> <li>Vasyl Tsvirkunov (SS1-2001 patch author)</li> <li>Wengier (DOSBox-X maintainer)</li> <li>ykhwong (DOSBox Daum maintainer)</li> </ul>"},{"location":"downloads/release-notes/0.77.0/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p> <p>The project maintains original authorship on all commits (including those from upstream, patches, and external projects) to ensure correct attribution is recorded in the version control system.</p>"},{"location":"downloads/release-notes/0.77.1/","title":"0.77.1 release notes","text":"<p>Release date: 2021-08-28</p>"},{"location":"downloads/release-notes/0.77.1/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.77.1/#bugfixes","title":"Bugfixes","text":"<p>The following user-visible bugs were fixed in 0.77.1 (reported-by; fixed-by):</p> <ul> <li> <p>Fix crash when using 32-bit build and the dynamic-core on Windows 10   (Banjo-Oz; kklobe).</p> </li> <li> <p>Fix crash when using 32-bit build and the dynamic-core on Raspbian (nemo93;   kklobe).</p> </li> <li> <p>Fix degraded joystick control during once-a-month integer time-rollover   event (cimarronm).</p> </li> <li> <p>Fix inability for a program to use its own bundled <code>HELP</code> and <code>CHOICE</code>   executables (SmilingSpectre; Wengier).</p> </li> <li> <p>Fix inability to map joystick events when joysticktype was configured as   <code>none</code> (GranMinigun; kcgen).</p> </li> <li> <p>Fix incorrect setup of the joystick when type configured as <code>2axis</code> (choum;   kcgen).</p> </li> <li> <p>Fix input control lag on some Windows systems and on macOS when the \u201cMagnet\u201d   GUI management program is running (Burrito78; kcgen).</p> </li> <li> <p>Fix mouse control in Alive \u2013 Behind the Moon (DOSBox SVN   r4461/ripsaw8080).</p> </li> <li> <p>Fix performance regression when building releases on arm-based Linux SBC   (mrfixit2001).</p> </li> <li> <p>Fix potential Tseng ET3000 video mode corruption (DOSBox SVN r4460;   ripsaw8080).</p> </li> <li> <p>Fix resizing of window impacting the debugger TUI on Windows (DOSBox SVN   r4462; ripsaw8080).</p> </li> <li> <p>Fix potential crash when quickly Alt+Tabing on Windows (kklobe).</p> </li> <li> <p>Fix size and placement of video content when using a resizeable window mode   (bmunger; kcgen).</p> </li> <li> <p>Fix unformattable content in translation files (dreamer; kcgen).</p> </li> <li>Synchronize Italian translation files (Kappa971).</li> <li>Synchronize German translation files (Burrito78).</li> <li>Generate macOS Universal Binary supporting x86_64 and arm64 (Kirk Klobe)</li> </ul>"},{"location":"downloads/release-notes/0.77.1/#translations-pack-included","title":"Translations pack included","text":"<p>French, German, Italian, Polish, Russian, and Spanish users: move the bundled <code>translations</code> directory into your DOSBox Staging configuration directory.</p> <p>macOS users</p> <p>Right click the dosbox-staging.app file and select \u201cShow Package Contents\u201d. The <code>translations</code> folder is inside <code>Contents/resources/</code>.</p> <p>After the move, you will have:</p> Linux <code>/home/username/.config/dosbox/translations/</code> macOS <code>~/Library/Preferences/DOSBox/translations/</code> Windows <code>C:\\Users\\&lt;username&gt;\\AppData\\Local\\DOSBox\\translations\\</code> <p>Load your language on the command-line:</p> <pre><code>dosbox -lang de\ndosbox -lang es\ndosbox -lang fr\ndosbox -lang it\ndosbox -lang pl\ndosbox -lang ru\n</code></pre> <p>Or via primary or local config file:</p> <pre><code>[dosbox]\nlanguage = de\n# de, es, fr, it, pl, ru\n</code></pre> <p>Tip</p> <p>Use <code>dosbox -editconf</code> to open your config file.</p> <p>For future reference, the above is also discussed in the README.</p>"},{"location":"downloads/release-notes/0.77.1/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox Team and the DOSBox-X Team.</p> <p>DOSBox Staging maintains original authorship on all commits to ensure attribution is recorded in the version control system (git).</p>"},{"location":"downloads/release-notes/0.78.0/","title":"0.78.0 release notes","text":"<p>Release date: 2021-12-25</p>"},{"location":"downloads/release-notes/0.78.0/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.78.0/#significant-changes","title":"Significant changes","text":"<ul> <li> <p>Added Universal binary for macOS, supporting x86-64 and ARM64 (Kirk Klobe)   (#1240)</p> </li> <li> <p>Added a workaround for vsync lag, which is useful for video outputs that   enforce vsync (Kirk Klobe) (#1158)</p> </li> <li> <p>Added window size and placement customizations (John Novak) (#1272)</p> </li> <li> <p>Added full <code>/help</code> output text for the <code>AUTOTYPE</code>, <code>BOOT</code>, <code>CALL</code>, <code>CHOICE</code>,   <code>CLS</code>, <code>COPY</code>, <code>DIR</code>, <code>ECHO</code>, <code>EXIT</code>, <code>GOTO</code>, <code>HELP</code>, <code>IF</code>, <code>INTRO</code>, <code>KEYB</code>,   <code>LS</code>, <code>MD</code>/<code>MKDIR</code>, <code>MEM</code>, <code>RD</code>/<code>RMDIR</code>, <code>REN</code>/<code>RENAME</code>, <code>RESCAN</code>, <code>SHIFT</code>,   <code>SUBST</code>, and <code>TYPE</code> commands (Wengier) (#1356)</p> </li> <li> <p>Added MSYS2-based release builds and instuctions for those on Windows using   MSYS2 (Sherman Perry) (#1443)</p> </li> <li> <p>Merged PCjr composite patch by NewRisingSun. Thanks to JKapp76 for testing   and feedback (NewRisingSun) (#1122)</p> </li> <li> <p>Merged CGA composite improvement patch by reenigne, respectively. Thanks to   JKapp76 for testing and feedback (reenigne) (#1157)</p> </li> <li> <p>Added bash-shell completion. See <code>contrib/linux/bash-completion/README</code> for   adding this to your shell (FeignInt) (#1200)</p> </li> <li> <p>Added Loguru, a fast cross-platform logging subsystem. Logs are now   time-stamped and warnings are now colorized (Kirk Klobe) (#1225)</p> </li> <li> <p>Merged S3 video patch by s3freak. This adds more video modes and supports   up to 8 MiB of video memory, <code>vmemsize = 8</code>, when using <code>machine = svga_s3</code>.   Thanks to Zorix, Grounded0, Brandon Roberts, GranMinigun, Kirk   Klobe, and nemo93 for testing (s3freak) (#1244)</p> </li> <li> <p>Added configurable FluidSynth chorus and reverb settings. Thanks to   GranMinigun for the extensive listening tests (kcgen) (#1268)</p> </li> <li> <p>Added auto-exit. When an executable that\u2019s passed on the command-line exits,   then so too will the emulator. This is equivalent to manually adding the   <code>-exit</code> command-line flag. Thanks to Burrito78 for testing (kcgen)   (#1269)</p> </li> <li> <p>Added   layered and portable configuration file handling. Thanks to JKapp76,   Grounded0, and Burrito78 for testing (kcgen)</p> </li> <li> <p>Added ENet (reliable UDP) as an option for modem and null-modem transport,   as well as <code>SERIAL.COM</code> for runtime serial-port configuration (Scott   Duensing) (#1398)</p> </li> <li> <p>Added support for virtual Ethernet and TCP/IP networking via slirp   (Jookia) (#1419)</p> </li> <li> <p>Added support for networking in Windows for Workgroups 3.11   from the shell.   Previously networking in WfW was only possible when booting a real MS-DOS   installation from a bootable HDD image (Wengier, nanshiki) (#1447)</p> </li> <li> <p>Added IDE controller support, authored by joncampbell123 of the DOSBox-X   project, for CD-ROM image-mounts, which is useful for CD-ROM based games   that also happen to need a real DOS environment such as Revell\u2019s car games,   like European Racers (joncampbell123, Wengier) (#1451)</p> </li> </ul>"},{"location":"downloads/release-notes/0.78.0/#bugfixes","title":"Bugfixes","text":"<ul> <li> <p>Fixed 32-bit dynamic core crashes (Kirk Klobe) (#1205)</p> </li> <li> <p>Fixed regression when setting <code>windowresolution</code> in the config file. Thanks   to arrowgent for the report and testing (kcgen) (#1144)</p> </li> <li> <p>Fixed hanging in Mortal Kombat Trilogy when <code>joysticktype = none</code>. Thanks to   nemo93 for the report and GranMinigun for also testing (kcgen)   (#1241)</p> </li> <li> <p>Fixed regression during shutdown while using the ALSA sequencer. Thanks to   AaronBPaden for the report and testing (kcgen) (#1362)</p> </li> <li> <p>Fixed zero-offset PC Speaker issue on Windows 11. Thanks to ggpettas for   reporting (kcgen) (#1389)</p> </li> <li> <p>Fixed regression that broke video recording. Thanks to Grounded0 for   reporting and testing (kcgen) (#1400)</p> </li> <li> <p>Fixed ability to run an application-provided <code>help.exe|com</code> program. Thanks   to SmilingSpectre for reporting (Wengier) (#1136)</p> </li> <li> <p>Removed VESA modes 320\u00d7200\u00d715/16/24, which were added late in   the 90s and were not properly supported by some games (NicknineTheEagle) (#1457)</p> </li> </ul>"},{"location":"downloads/release-notes/0.78.0/#translation-updates","title":"Translation updates","text":"<ul> <li>Italian (Kappa971)</li> <li>German (Burrito78)</li> <li>Russian (GranMinigun)</li> </ul> <p>Translations (de, es, fr, it, pl, and ru) are included with the release package and can be selected using the two-letter country code either via environment variable (<code>LANG=de</code>), config file (<code>[dosbox] language = it</code>), or command-line (<code>-lang ru</code>). See Section 14 in the <code>README</code> file for more details.</p>"},{"location":"downloads/release-notes/0.78.0/#repository-authors","title":"Repository authors","text":"<p>To ensure authors are credited for their work, the project records authorship on all commits in the version control system, including all works from the upstream DOSBox project, patch authors, and external projects.</p> 0.78 author Lines changed arrowgent 361 Brandon Roberts 1495 Burrito78 1882 Christer Solskogen 4 Dan Church 2 David Reid 6733 Eli Schwartz 6 GranMinigun 1204 Gregory Pakosz 1178 John Novak 668 Jookia 2296 Kappa971 2773 kcgen 63022 Kirk Klobe 1658 llm 6 NicknineTheEagle 30 Patryk Obara 103 ripsaw8080 59 s3freak 648 Scott Duensing 7330 Sherman Perry 5408 Sjoerd van der Berg 28 Wengier 5430 Yann Collet 2438 ykhwong 7 <p>During the 0.78 timeframe, DOSBox SVN commits r4466 through r4471 were merged to the project and authorship is reflected above.</p>"},{"location":"downloads/release-notes/0.78.0/#wiki-authors","title":"Wiki authors","text":"0.78 wiki author Lines changed Alberto Salvia Novella 164 Burrito78 2 Grounded0 557 John Novak 12 Joshua Fern 30 kcgen 243 Kirk Klobe 2 LowLevelMahn 14 MasterO2 395 nemo93 5370 Tobias Gruetzmacher 5"},{"location":"downloads/release-notes/0.78.0/#financial-contributors","title":"Financial contributors","text":"<ul> <li> <p>Antti Peltola: Project sponsor. His combined contribution of 4,000 USD   spanning the 2021 period to maintainers and the project has allowed the team   to add a dedicated Apple M1 build host. Thank you!</p> </li> <li> <p>Burrito78: Project backer. Thank you!</p> </li> </ul> <p>To support our work, join the Open Collective.</p>"},{"location":"downloads/release-notes/0.78.0/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.78.1/","title":"0.78.1 release notes","text":"<p>Release date: 2022-01-07</p>"},{"location":"downloads/release-notes/0.78.1/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.78.1/#fixes-and-regressions","title":"Fixes and regressions","text":"<p>Maintenance changes to 0.78.1 are as follows (reported-by; fixed-by):</p> <ul> <li> <p>Fixed a crash when exiting fullscreen mode and also using OpenGL output   (NicknineTheEagle; kcgen)</p> </li> <li> <p>Fixed a crash and host input lockup when using SDL\u2019s kmsdrm video driver   (GranMinigun)</p> </li> <li> <p>Fixed an early exit bug when using the <code>-exit</code> and <code>-c exit</code> command-line   arguments (pheener and d10sfan, kcgen)</p> </li> <li> <p>Fixed a memory leak when changing one or more serial port types at runtime   (kcgen)</p> </li> <li> <p>Fixed a regression that failed to apply aspect correction when using   pixel-perfect output modes (Diduz; kcgen)</p> </li> <li> <p>Fixed a regression that disabled the keyboard input when using the debugger   (LowLevelMahn; kcgen)</p> </li> <li> <p>Fixed a regression that impacted 32-bit performance on some Windows systems   (RaymanXY; Kirk Klobe and kcgen)</p> </li> <li> <p>Fixed a regression that causes a crash when opening UPX-compressed code-page   files (FeralChild64; Wengier)</p> </li> </ul>"},{"location":"downloads/release-notes/0.78.1/#functionality-refinements","title":"Functionality refinements","text":"<ul> <li> <p>Improved the modem\u2019s command-mode handling (NicknineTheEagle)</p> </li> <li> <p>Corrected the modem\u2019s DTR drop delay units from ms to hundredths of a second   (NicknineTheEagle)</p> </li> <li> <p>Reverted the allowance that let the VESA refresh rate use the host rate   (RaymanXY; kcgen)</p> </li> <li> <p>Allowed read-only image mounting for write-protected disk and floppy images   (Burrito78; Wengier)</p> </li> </ul>"},{"location":"downloads/release-notes/0.78.1/#documentation-related-improvements","title":"Documentation-related improvements","text":"<ul> <li> <p>Updated the German messages and config file text (Burrito78)</p> </li> <li> <p>Updated the Italian messages and config file text (Kappa971)</p> </li> <li> <p>Fixed a documentation conflict describing the command line\u2019s version flag   (arrowgent)</p> </li> <li> <p>Documented how to install gmock, a dependency added during 0.78.0, on Fedora   (oturpe)</p> </li> </ul>"},{"location":"downloads/release-notes/0.78.1/#development-and-packaging-fixes","title":"Development and packaging fixes","text":"<ul> <li> <p>Fixed a compilation issue with Loguru on ARM32 using GCC 8   (rtissera; kcgen)</p> </li> <li> <p>Fixed a compilation issue with older C++17 compilers missing   <code>std::filesystem</code> support (jowtron; gulrak and kcgen)</p> </li> <li> <p>Fixed a build tool-specific bug that exposed the UI when running gmock tests   (oturpe and voyageur; brandonrobertz and kcgen)</p> </li> </ul>"},{"location":"downloads/release-notes/0.78.1/#known-issues","title":"Known issues","text":"<ul> <li> <p>The MSYS2-built debugger will fail to open if launched from the Windows UI.</p> <ul> <li> <p>As a work-around, run it from within a command console.</p> </li> <li> <p>Thanks to Sherman Perry for investigating this issue and isolating it</p> </li> <li>to the Windows Console API.</li> </ul> </li> <li> <p>Audio might stutter on some Windows platforms. If your system is affected,   adjust the mixer\u2019s settings in your config file as follows:</p> <pre><code>[mixer]\nblocksize = 1024\nprebuffer = 25\n</code></pre> <p>Tip</p> <p>Run <code>dosbox -editconf</code> to open your config file.</p> <p>Thanks to Genju for reporting this regression and isolating the solution.</p> </li> </ul>"},{"location":"downloads/release-notes/0.78.1/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.79.0/","title":"0.79.0 release notes","text":"<p>Release date: 2022-09-19</p>"},{"location":"downloads/release-notes/0.79.0/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.79.0/#what-you-can-expect","title":"What you can expect","text":"<ul> <li> <p>It should run everything that prior versions did.</p> </li> <li> <p>The default settings will give you improved audio, refined graphical scaling   and colour accuracy, more robust mouse handling, and a more usable shell.</p> </li> <li> <p>There are new and some deprecated config settings: your console log will   inform you with orange-coloured warning messages to help you.</p> </li> <li> <p>For performance-demanding games that use <code>max</code> cycles, it should provide   just as much performance (or a bit more) than prior versions.</p> </li> <li> <p>International users: it should detect your language and keyboard layout   on startup. We recommend reading the Localisation section for details.</p> </li> <li> <p>Repo packagers: learn about bundled resource files   and the updated Meson build settings.</p> </li> </ul> <p>Read on for all the details!</p>"},{"location":"downloads/release-notes/0.79.0/#audio-improvements","title":"Audio improvements","text":""},{"location":"downloads/release-notes/0.79.0/#adlib-gold-surround-module-emulation","title":"AdLib Gold Surround Module emulation","text":"<p>The ultra-rare AdLib Gold surround sound daughterboard is now emulated, which makes it possible to finally enjoy the Dune soundtrack in its full glory! That\u2019s the only game in existence that makes use of the surround module.</p> <p>The following config is recommended for Dune. The setup utility should auto-detect AdLib Gold and the surround module correctly with these settings.</p> <pre><code>[sblaster]\nsbtype = sb16\noplmode = opl3gold\n</code></pre>"},{"location":"downloads/release-notes/0.79.0/#sound-card-output-filter-emulation","title":"Sound card output filter emulation","text":"<p>Most DOS-era sound cards feature an output low-pass filter (and sometimes a high-pass filter too) that play an important role in giving their sound its character. DOSBox Staging can now accurately emulate these analog output stage filters for all supported sound devices.</p>"},{"location":"downloads/release-notes/0.79.0/#sound-blaster","title":"Sound Blaster","text":"<p>For backward compatibility reasons, the <code>sb_filter</code> config parameter defaults to the newly introduced <code>modern</code> filter, which uses the simple linear interpolation method of previous DOSBox versions. To turn on accurate analog output filter emulation, set the <code>sb_filter</code> to <code>auto</code>. This will set the correct filters for each Sound Blaster model depending on the <code>sb_type</code> value. You can also set a model-specific filter manually if you wish, e.g. this is how to use a Sound Blaster 16 but with Sound Blaster Pro filters:</p> <pre><code>[sblaster]\nsbtype = sb16\nsb_filter = sbpro1\n</code></pre> <p>Some Sound Blaster models can toggle the filter on and off in software; you can force the filter to be always on by setting <code>sb_filter_always_on</code> to <code>true</code>.</p> <p>OPL and CMS filters are also accurately emulated; please refer to the descriptions of the <code>opl_filter</code> and <code>cms_filter</code> config parameters for further details.</p>"},{"location":"downloads/release-notes/0.79.0/#small-speaker-systems","title":"Small-speaker systems","text":"<p>Filters are enabled by default for all small-speaker audio systems (PC Speaker, PS/1 Audio, Tandy, and the various LPT DAC options). Depending on the particular device, these filters either emulate the analog output filters of the original device, or the sound coming out of a small band-limited speaker in an acoustic environment. Either way, the result is a more period-accurate and pleasant listening experience, especially on headphones.</p> <p>Small-speaker filters are controlled by the following config parameters:</p> <ul> <li><code>lpt_dac_filter</code></li> <li><code>pcspeaker_filter</code></li> <li><code>ps1audio_dac_filter</code></li> <li><code>ps1audio_filter</code></li> <li><code>tandy_dac_filter</code></li> <li><code>tandy_filter</code></li> </ul>"},{"location":"downloads/release-notes/0.79.0/#custom-filters","title":"Custom filters","text":"<p>Advanced users can specify custom filter settings for any of the supported sound devices. You can specify either a high-pass filter, a low-pass filter, or both at the same time using the following format</p> <pre><code>TYPE ORDER FREQ [TYPE ORDER FREQ]\n</code></pre> <p>where TYPE can be <code>hpf</code> (high-pass) or <code>lpf</code> (low-pass), ORDER is the order of the filter from 1 to 16 (1st order results in a 6dB per octave slope, 2nd order in a 12dB per octave slope, etc.), and FREQ is the filter\u2019s cutoff frequency in Hz.</p> <p>For example, to use a 2nd order (12dB/oct) low-pass filter at 8 kHz for the Sound Blaster:</p> <pre><code>sb_filter = lpf 2 8000\n</code></pre> <p>To use a 3rd order (18dB/oct) high-pass filter at 120 Hz, and a 1st order (6dB/oct) low-pass filter at 6.5 kHz for the PC Speaker:</p> <pre><code>pcspeaker_filter = hpf 3 120 lfp 1 6500\n</code></pre> <p>In addition to the sound devices mentioned above, you can use custom filters even with devices that don\u2019t filter the output in the original hardware (e.g. GUS, MT-32), and the FluidSynth virtual MIDI device via the following config parameters:</p> <ul> <li><code>fsynth_filter</code></li> <li><code>gus_filter</code></li> <li><code>innovation_filter</code></li> <li><code>mt32_filter</code></li> </ul>"},{"location":"downloads/release-notes/0.79.0/#crossfeed","title":"Crossfeed","text":"<p>Listening to audio material on headphones where certain sounds are only present in either the left or the right channel can be a rather distracting and unpleasant experience. This is most noticeable on certain Dual OPL game soundtracks and tracker music (e.g. MOD, XM, S3M, IT, etc.)</p> <p>The new crossfeed feature remedies that; by enabling <code>crossfeed</code> in the <code>[mixer]</code> section, a certain percentage of the left channel is mixed into the right, and vice versa. The default crossfeed strength is 40% which is a good general setting, but you can provide a custom percentage value as well (e.g. <code>crossfeed = 55</code>).</p> <p>The amount of crossfeed can be fine-tuned per individual channels via mixer commands; please type <code>MIXER /?</code> in the DOSBox prompt for further details.</p>"},{"location":"downloads/release-notes/0.79.0/#reverb-and-chorus","title":"Reverb and chorus","text":""},{"location":"downloads/release-notes/0.79.0/#reverb","title":"Reverb","text":"<p>One of the most exciting new audio features is the ability to add reverb (the emulation of real acoustic spaces) and chorus effects to any mixer channel. This can add a lot of atmosphere to dry-sounding synth soundtracks (typically OPL music) and elevate them to a whole new level! Enabling reverb and chorus processing is especially useful for headphone-listening.</p> <p>The quickest way to enable the reverb effect globally is to put <code>reverb = on</code> in the <code>[mixer]</code> config section. This will add reverb to all synth channels (e.g. PC Speaker, OPL, CMS), and a lesser amount to digital audio channels (e.g. Sound Blaster, GUS). While the default setting works well with most games, it\u2019s highly recommended to experiment with the five available reverb presets to find the optimal setting for each game:</p> <ul> <li> <p><code>tiny</code> simulates the sound of a small integrated speaker in a domestic room.   This preset is specifically tailored for small-speaker audio systems (PC   Speaker, Tandy, PS/1 Audio, and LPT DAC devices).</p> </li> <li> <p><code>small</code> adds a subtle sense of space; it\u2019s best suited for games that use a   single synth (typically OPL) for both the music and the sound   effects.</p> </li> <li> <p><code>medium</code> is the default preset; it\u2019s a middle-of-the-road setting that works   well with a wide variety of games.</p> </li> <li> <p><code>large</code> is a large hall-style reverb that is recommended for games that use   separate audio channels for music and digital audio (e.g. OPL audio and   Sound Blaster digital sound.)</p> </li> <li> <p><code>huge</code> is a stronger variant of the large hall preset which is ideal for   slower-paced, atmospheric music.</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.0/#chorus","title":"Chorus","text":"<p>Another way to add a sense of space to the sound is by enabling the chorus effect. This adds stereo movement and increases the perceived stereo width, which is especially noticeable on purely mono signals on headphones (e.g. PC Speaker or OPL2 music). To enable it, just put <code>chorus = on</code> into the <code>[mixer]</code> config section, or select one of the three predefined chorus strength presets (<code>light</code>, <code>normal</code>, and <code>strong</code>).</p> <p>Similarly to crossfeed, per-channel reverb and chorus settings can be tweaked by mixer commands; please type <code>MIXER /?</code> in the DOSBox prompt for details.</p> <p>Audio examples</p> <p>Naturally, you can combine chorus and reverb, and it\u2019s not only possible to do so, but highly recommended for achieving the best results! The below recordings showcase how crossfeed, reverb, chorus, and output stage filters can work in tandem to give old DOS game soundtracks a new life.</p> <p>The exact settings used for these recordings are documented on the wiki, along with suggested audio configs for many other games. Make sure to check them out and experiment with the settings yourself! \ud83d\ude0e \ud83d\udd09 \ud83c\udfa7</p>      Your browser does not support the <code>video</code> element.    <p>Alone in the Dark (1992, floppy version) \u2014 introduction   </p> Game Type Audio example Alone in the Dark(floppy version) OPL2  Your browser does not support the <code>audio</code> element. Warcraft: Orcs &amp; Humans OPL3  Your browser does not support the <code>audio</code> element. Dungeon Master II:The Legend of Skullkeep Dual\u00a0OPL2  Your browser does not support the <code>audio</code> element. Ultima Underworld I: The Stygian Abyss Dual OPL2  Your browser does not support the <code>audio</code> element. Elvira: Mistress of the Dark Dual\u00a0OPL2  Your browser does not support the <code>audio</code> element. Skate or Die! Tandy  Your browser does not support the <code>audio</code> element. Zak McKracken and the Alien Mindbenders Tandy  Your browser does not support the <code>audio</code> element. Budokan: The Martial Spirit CMS  Your browser does not support the <code>audio</code> element  The Secret of Monkey Island CMS  Your browser does not support the <code>audio</code> element."},{"location":"downloads/release-notes/0.79.0/#master-compressor","title":"Master compressor","text":"<p>An auto-levelling dynamic range compressor has been introduced to the master channel to ensure that the audio output never gets distorted, no matter how high the volume levels are. This is on by default and is virtually transparent when the output is not driven into clipping. However, purists can disable it by setting <code>compressor</code> to <code>off</code>, and then ensure correct non-clipping output levels manually.</p>"},{"location":"downloads/release-notes/0.79.0/#general-mixer-improvements","title":"General mixer improvements","text":"<ul> <li> <p>The mixer now uses a full 32-bit floating-point processing path internally,   which means you can no longer overload individual mixer channels into   clipping by using high per-channel volume settings. As long as the summed   master output is not clipping, it\u2019s guaranteed that nothing else will.</p> </li> <li> <p>A fixed high-pass filter at 20 Hz has been introduced right before the final   output that gets rid of any DC-offset and subsonic rumble globally.</p> </li> <li> <p>The <code>MIXER</code> command has received an overhaul too. First of all, the status   output looks better, and the following improvements have been made:</p> <ul> <li> <p>Now you can set reverb, chorus, and crossfeed levels per mixer channel;   type <code>MIXER /?</code> in the DOSBox prompt for further details.</p> </li> <li> <p>The <code>FM</code> channel has been renamed to <code>OPL</code>.</p> </li> <li> <p>The <code>SPKR</code> channel has been renamed to <code>PCSPEAKER</code>.</p> </li> <li> <p>The sample rate column has been removed (it served no useful purpose,   and the displayed values were often technically correct but misleading).</p> </li> </ul> </li> <li> <p>For a high-level overview of the new mixer architecture, please refer to   this diagram.</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.0/#one-opl-mode-to-rule-them-all","title":"\u201cOne OPL mode to rule them all\u201d \ud83d\udc8d","text":"<p>NukedOPL has long been the default OPL mode in Staging. As it\u2019s basically a bit-perfect emulation of the Yamaha YMF262 OPL3 chip, and it runs fast enough even on low-end hardware such as the Raspberry Pi 4, all other less accurate OPL emulation modes have been removed.</p>"},{"location":"downloads/release-notes/0.79.0/#fluidsynth-configuration-changes","title":"FluidSynth configuration changes","text":""},{"location":"downloads/release-notes/0.79.0/#fluidsynth-reverb-and-chorus","title":"FluidSynth Reverb and Chorus","text":"<p>Due to the introduction of the new mixer-level reverb and chorus effects, the FluidSynth <code>reverb</code> and <code>chorus</code> config parameters have been renamed to <code>fsynth_reverb</code> and <code>fsynth_chorus</code>, respectively.</p> <p>To maintain backward compatibility with existing configurations, the FluidSynth reverb and chorus effects are enabled by default, so all your SoundFonts will sound just like in previous DOSBox versions. If you enable the mixer-level reverb (or chorus) as well (e.g. by putting <code>reverb = on</code> in the <code>[mixer]</code> section), you would get a second round of reverb (or chorus) processing on the FluidSynth output. This is by design as it allows users the greatest level of control over customising SoundFonts (e.g. some would sound best with the FluidSynth reverb only, some with both, etc.)</p> <p>Note</p> <p>In the SF2 format the reverb and chorus amounts are specified on a per-instrument basis, while the mixer-level effects are applied \u201cglobally\u201d to all instruments in the summed FluidSynth output. Therefore, what works best really depends on the particular SoundFont in question and on individual user preference (see this discussion for further technical details).</p>"},{"location":"downloads/release-notes/0.79.0/#volume-scaling","title":"Volume Scaling","text":"<p>Previously, it was possible to specify a percentage after the SoundFont\u2019s name in the config to adjust its volume (e.g. <code>soundfont = way_too_loud.sf2 30</code>). This was introduced as a workaround for certain loud SoundFonts that tended to clip the mixer channel internally.</p> <p>With the new floating-pointing mixer signal path, it\u2019s no longer possible to drive any of the mixer channels into clipping, therefore this workaround has been deprecated. Please use standard mixer commands to lower the volume of the <code>FSYNTH</code> channel if you wish to do so.</p>"},{"location":"downloads/release-notes/0.79.0/#ripas-pc-speaker-patch","title":"ripa\u2019s PC speaker patch","text":"<p>We\u2019ve integrated ripa\u2019s impulse-model PC speaker patch alongside DOSBox\u2019s existing (discrete-model) PC speaker implementation, which is still the default.</p> <p>To use it, set the <code>pcspeaker</code> config setting to <code>impulse</code> (or go back to default with <code>discrete</code>).</p> <p>James-F and VileRancour have mentioned in the linked thread that it generally improves the accuracy of square-wave effects, such as in Commander Keen and Duke Nukem (2D). This patch also can produce sounds when none previously existed, such as in Wizball, as noted by ripsaw8080.</p> <p>For example, here\u2019s Wizball using the settings below:</p> <pre><code>[mixer]\nrate = 32000\n[speaker]\npcspeaker = discrete\n</code></pre>      Your browser does not support the <code>video</code> element.    <p>Wizball (1987) \u2014 using <code>discrete</code> PC speaker emulation   </p> <p>Note</p> <p>There are some audible regressions and harmonics that still exist in some games, so that\u2019s why this is an alternative and not the default.</p>"},{"location":"downloads/release-notes/0.79.0/#parallel-port-dac-models-disney-covox-and-stereo-on-1","title":"Parallel port DAC models: Disney, Covox, and Stereo-On-1","text":"<p>Those familiar with DOSBox know that these three devices are emulated with the universal <code>disney = true</code> setting.</p> <p>Like <code>sbtype</code>, we wanted the model of LPT DAC to be configurable, and so Staging\u2019s deprecated the <code>disney</code> setting in favour of <code>lpt_dac</code> that takes any of the following:</p> <ul> <li><code>disney</code>, for the Disney Sound Source</li> <li><code>covox</code>, for the Covox Speech Thing</li> <li><code>ston1</code>, for the Stereo-on-1 DAC device</li> <li><code>off/none</code>, to disable the DAC (default)</li> </ul> <p>This is paired with a corresponding filter setting, <code>lpt_dac_filter</code>, which approximates how the original device sounded. This means that the Disney Sound Source (which included a little speaker inside it) will sound a lot like you might remember.</p> <code>lpt_dac</code> Examples (ModPlay Pro &amp; Star Control II\u2019s 8-bit Pkunk MOD) <code>disney</code>  Your browser does not support the <code>audio</code> element. <code>covox</code>  Your browser does not support the <code>audio</code> element. <code>ston1</code>  Your browser does not support the <code>audio</code> element. <p>Like the other audio filters settings, the <code>lpt_dac_filter</code> can be toggled on, off, or customised.</p>"},{"location":"downloads/release-notes/0.79.0/#audio-mute-and-pause","title":"Audio mute and pause","text":"<p>The audio stream can now be manually muted with Ctrl+F8 (or Cmd+F8 on macOS).</p> <p>You can also mute the audio automatically when DOSBox Staging goes to the background with this config setting:</p> <pre><code>[sdl]\nmute_when_inactive = true\n</code></pre> <p>Or you can pause emulation entirely when in the background with:</p> <pre><code>[sdl]\npause_when_inactive = true\n</code></pre>"},{"location":"downloads/release-notes/0.79.0/#graphical-improvements","title":"Graphical improvements","text":""},{"location":"downloads/release-notes/0.79.0/#shader-reload-shortcut","title":"Shader reload shortcut","text":"<p>As DOSBox Staging currently lacks a shader preset system, tweaking shader parameters can only be accomplished by making changes to the shader source files themselves. Previously, you had to restart DOSBox to see the effects of such changes, which made fine-tuning shaders quite cumbersome, to say the least.</p> <p>Now you can just use the Ctrl+F2 shortcut (Cmd+F2 on macOS) to reload the current shader at any time. Progress! \ud83d\ude0e</p>"},{"location":"downloads/release-notes/0.79.0/#cga-palette-override","title":"CGA palette override","text":"<p>Now it is possible to override the default, canonical interpretation of the 16-colour CGA/EGA RGBI palette. The feature overrides the CGA colours in any CGA/EGA-like mode, so it even works in CGA/EGA modes with an emulated VGA or TGA (Tandy) graphics adapter.</p> <p>Several presets have been included (e.g. Amiga and Atari ST colours for Sierra games, and various CGA/EGA monitor emulations), and you can specify custom palettes as well. Make sure to check out the description of the <code>cga_colors</code> config parameter for the list of available presets (you can read more about them here).</p> <p>Defender of the Crown</p> <p><code>tandy-warm</code> emulates the colours as they appear on an actual Tandy monitor, which results in more subdued and pleasant colours. This is especially apparent on the greens.</p> <p></p> <p><code>cga_colors = default</code> </p> <p></p> <p><code>cga_colors = tandy-warm</code> </p> <p>Gold Rush</p> <p>The Amiga/Atari ST ports of Sierra AGI games feature a tweaked CGA palette with improved skin tones and sky colours.</p> <p></p> <p><code>cga_colors = default</code> </p> <p></p> <p><code>cga_colors = agi-amigaish</code> </p> <p>Zak McKracken and the Alien Mindbenders</p> <p>Now you can play the PC version of this classic adventure with Tandy sound and Commodore 64 colours!</p> <p></p> <p><code>cga_colors = default</code> </p> <p></p> <p><code>cga_colors = colodore</code> </p>"},{"location":"downloads/release-notes/0.79.0/#scaled-image-quality-improvements","title":"Scaled image quality improvements","text":"<p>When the image is scaled by non-integer ratios (e.g. when aspect correction is enabled with the default <code>sharp</code> OpenGL shader), previously the interpolation was performed in a gamma-incorrect way, leading to various unwanted artifacts. These were most noticeable on checkerboard dither patterns (used frequently in EGA games), appearing as interference (moir\u00e9) patterns, and on high-contrast antialiased text (e.g. regular black text on white background appeared bold).</p> <p>macOS notes</p> <p>All Mac browsers tend to display the below images with incorrect gamma on the built-in MacBook displays, which makes the \u201cbad\u201d images look less wrong, and there are slight interference patterns on the \u201cgood\u201d images. Please download the images and view them in the Preview app instead, which displays them correctly.</p> <p>Time Quest</p> <p></p> <p>Good   </p> <p></p> <p>Bad   </p> <p>Space Quest III: The Pirates of Pestulon</p> <p></p> <p>Good   </p> <p></p> <p>Bad   </p> <p>Windwalker</p> <p></p> <p>Good   </p> <p></p> <p>Bad   </p>"},{"location":"downloads/release-notes/0.79.0/#high-dpi-on-macos","title":"High DPI on macOS","text":"<p>The backstory: DOSBox Staging uses OpenGL output with the sharp bilinear scaling shader to keep the picture crisp no matter how big or small the image is, and minimise blurring on pixel transitions.</p> <p>Due to the way macOS handles DPI scaling, the image was drawn at a much lower resolution, usually just a quarter of the window size. Then it was stretched by the system, producing an unpleasantly mushy presentation. But we want our pixels to be so sharp they could cut one\u2019s eyes  </p> <p></p> <p>Without high DPI support   </p> <p></p> <p>With high DPI support   </p> <p>Now DOSBox Staging can handle high DPI displays, be it Retina or not, so you and shaders alike can see all the (physical) pixels.</p> <p>Please note that this is currently experimental: only macOS is currently supported, and we haven\u2019t thoroughly tested multi-display setups. Please report any weird behaviour! Support for Windows will come in the future, and for Linux, it is still uncertain. Also note that due to the way rendering is currently implemented, you may observe lowered performance on higher resolution displays, especially when running off integrated graphics. This might be remedied in the future as well.</p>"},{"location":"downloads/release-notes/0.79.0/#window-transparency-support","title":"Window transparency support","text":"<p>There might be situations where you want to place the DOSBox Staging window on top of another window while seeing both windows at the same time. Indeed, you can now set the DOSBox Staging window as transparent, with a customised level of window transparency, so that you can see the background window as well. There is a new config option <code>transparency</code> for this, whose valid values are between <code>0</code> (no transparency; default) to <code>90</code> (high transparency).</p> <p></p>"},{"location":"downloads/release-notes/0.79.0/#frame-presentation-modes","title":"Frame presentation modes","text":"<p>DOSBox presents frames when new content is available, which means that sometimes the effective frame rate can vary between 0 FPS (if the screen content isn\u2019t changing) and as fast as the DOS vertical refresh (vblank) rate (typically up to ~70 Hz). We\u2019ll call this presentation mode Variable Frame Rate or VFR.</p> <p>In addition to VFR, DOSBox Staging supports a Constant Frame Rate (CFR) presentation mode, which presents a constant frame rate defined by the emulated DOS rate, as well as variations on both:</p> <ul> <li> <p>Synced CFR, which presents a constant frame rate but is synchronised   with the host\u2019s refresh rate. This presents only the most recently updated   frame when the DOS rate exceeds the host rate.</p> </li> <li> <p>Throttled VFR, which presents a variable frame rate up to the DOS rate   throttled to the display\u2019s rate. This presents only the most recently   updated frame when the DOS rate exceeds the host rate.</p> </li> </ul> <p>By default, DOSBox Staging inspects runtime conditions and picks the optimal presentation mode.</p> <p></p> <p>Synced CFR mode selected due to vsync-enforced video drivers   </p> <p>Although typically not needed, power users might be interested in forcing a given mode or rate, which can be done using the following config settings (which includes detailed descriptions in the conf):</p> <pre><code>[sdl]\npresentation_mode = auto | cfr | vfr\nhost_rate = auto | sdi | vrr | custom-rate\n[dosbox]\ndos_rate = default | host | custom-rate\n</code></pre>"},{"location":"downloads/release-notes/0.79.0/#dos-shell-improvements","title":"DOS shell improvements","text":""},{"location":"downloads/release-notes/0.79.0/#piping-from-the-dos-prompt-or-batch-files","title":"Piping from the DOS prompt or batch files","text":"<p>DOSBox did not support the piping operation previously, but DOSBox Staging now brings piping support as how it has worked in DOS and most other operating systems. This allows two or more commands to communicate by passing the output text of one command to another as its input text. For example, commands like <code>ECHO Y | CHOICE</code> will work, so that the <code>Y</code> option will be passed as the input of <code>CHOICE</code> command. Chained piping is also supported, such as <code>DIR | SORT | MORE</code> for displaying sorted directory output one screen at a time (provided that you have the <code>SORT</code> and <code>MORE</code> commands from MS-DOS or FreeDOS in your path). If the current directory and <code>C:\\</code> are both read-only, the environment variable <code>%TEMP%</code> (or <code>%TMP%</code>) needs to be set within DOS pointing to a writable directory so that piping will work properly (e.g. <code>SET TEMP=C:\\TEMP</code>).</p>"},{"location":"downloads/release-notes/0.79.0/#file-attribute-support-and-attrib-command","title":"File attribute support and ATTRIB command","text":"<p>File attributes contain information about how the files should be used, and in DOS these correspond to Archive (<code>A</code>), Read-only (<code>R</code>), Hidden (<code>H</code>), and System (<code>S</code>) attributes. DOSBox Staging now adds support for file attributes through <code>ATTRIB</code> command (type <code>ATTRIB /?</code> for more information about this command) or through DOS API that accesses to file attributes. For example, some game installers and applications make use of file attributes. All file attributes are currently supported except for system and hidden attributes on mounted local drives for non-Windows platforms.</p> <p></p>"},{"location":"downloads/release-notes/0.79.0/#default-choices-for-the-choice-command","title":"Default choices for the CHOICE command","text":"<p>The <code>CHOICE</code> command allows you to choose from a list of options, but sometimes you want to have some default choice if no selection is made within the specific time period. DOSBox Staging now allows you to do this, by specifying the <code>/T</code> option which includes a default choice and the time period in seconds. For example, <code>CHOICE /C:ABC /T:B,2</code> will default to the choice <code>B</code> (among <code>A</code>, <code>B</code>, and <code>C</code>) if no key press is made within 2 seconds.</p>"},{"location":"downloads/release-notes/0.79.0/#mount-improvements","title":"Mount improvements","text":""},{"location":"downloads/release-notes/0.79.0/#physical-cd-rom-mount-support","title":"Physical CD-ROM mount support","text":"<p>Mounting physical CDs is now (re-)implemented in DOSBox Staging for better compatibility with games like Under a Killing Moon, System Shock, and The Pandora Directive. The feature is supported in DOSBox SVN but was forced to be dropped from DOSBox Staging earlier during the SDL2 migration process. We\u2019ve brought it back by using the SDL1 CD support code as an external library, plus restoring the main SDL CD interface from DOSBox.</p> <p>To use the feature, execute the command <code>mount -cd</code> to list all CD drives and their numbers, and use <code>-usecd NUMBER</code> parameter to specify a CD drive <code>NUMBER</code>, just like you would do in DOSBox SVN. Playing CD audio tracks from physical discs is also supported in Windows as with DOSBox SVN.</p> <p></p>"},{"location":"downloads/release-notes/0.79.0/#read-only-disk-image-mount-support","title":"Read-only disk image mount support","text":"<p>You might have encountered the problem previously that you could not mount write-protected disk images, which happened simply because DOSBox Staging required write access to mount disk images.</p> <p>Sometimes the user may also want to mount a disk image in a read-only manner (so that the content in the disk image will not be changed inside the emulator), even if the disk image itself is not write-protected. We have realised that in either case the requirement for write access is not needed for mounting disk images, so we have added support for mounting them in a read-only manner, either when the disk image files are read-only or when the <code>-ro</code> flag is specified by the users.</p>"},{"location":"downloads/release-notes/0.79.0/#z-drive-customisation-and-directory-support","title":"Z-drive customisation and directory support","text":"<p>The internal Z drive that is automatically mounted when you launch DOSBox Staging is now fully customisable, allowing users to add their own files or programs to the drive by putting them in the <code>drivez</code> subdirectory inside the DOSBox Staging program directory. Files already existing on the Z drive will be replaced by the user-provided ones, e.g. you can use your own <code>MEM.COM</code> or <code>KEYB.COM</code> commands instead of the default ones on the Z drive. Moreover, support for one-level subdirectories has been added, allowing users to better organise their files, resulting in a cleaner-looking Z drive. The drive\u2019s contents can be refreshed via the <code>RESCAN</code> command to reflect any changes made to it at the host OS level.</p>"},{"location":"downloads/release-notes/0.79.0/#imgmount-wildcard-support","title":"IMGMOUNT wildcard support","text":"<p>The <code>IMGMOUNT</code> command allows you to mount disk or CD images, but sometimes you may want to mount multiple images to a single drive, swappable via a keyboard shortcut. Previously you had to specify the names of the all the image files one by one, even if they have some patterns in common (like <code>DISK1.IMG</code>, <code>DISK2.IMG</code>, <code>DISK3.IMG</code>, etc). <code>IMGMOUNT</code> command now supports wildcards for mounting image files, so that you can just specify a file pattern that matches all the image files that you want to include. For example, the command <code>IMGMOUNT a d:\\*.img -t floppy</code> will mount all image files with the IMG extension on <code>D:\\</code> as floppy images.</p> <p></p>"},{"location":"downloads/release-notes/0.79.0/#automount-of-resource-drives","title":"Automount of resource drives","text":"<p>Directories can now be automounted, provided the <code>automount</code> config setting is enabled (which it is, by default).</p> <p>These automount directories are single-letter directories, <code>a</code> through <code>y</code> representing the mounted drive letter (where <code>z</code> is reserved for DOSBox\u2019s drive) placed inside a local <code>drives/</code> directory, relative to the startup location. This <code>drives/</code> directory can also be placed in a scanned resource location, like your DOSBox config directory or the release package\u2019s <code>resources/</code> area.</p> <p>Each drive can be customised with an accompanying <code>&lt;letter&gt;.conf</code> to define its mount <code>type</code>, <code>label</code>, and <code>path</code>. For example, to mount a local <code>drives/d/</code> directory as a <code>D:</code> CD-ROM with the label <code>SIERRA</code>, the accompanying <code>d.conf</code> would contain:</p> <pre><code>[drive]\ntype = cdrom\nlabel = SIERRA\n</code></pre> <p>A bundled <code>Y:</code> automount is provided in the release\u2019s <code>resources/</code> directory that bundles a couple FreeDOS 3rd party tools (<code>XCOPY.COM</code>, <code>DELTREE.COM</code>, <code>DEBUG.COM</code>) along with an accompanying <code>y.conf</code> to add it to the PATH.</p> <p>Note</p> <p>This feature doesn\u2019t yet support image mounts, such as <code>.img</code>, <code>.bin/cue</code>, or <code>.iso</code>.</p>"},{"location":"downloads/release-notes/0.79.0/#localisation-improvements","title":"Localisation improvements","text":""},{"location":"downloads/release-notes/0.79.0/#code-pages-and-keyboard-layouts","title":"Code pages and keyboard layouts","text":"<p>The 20-year-old FreeDOS code pages (screen fonts) and keyboard layouts were updated to the latest versions, offering countless new definitions for use. See the full list in the following documentation:</p> <ul> <li>List of available code pages</li> <li>List of available keyboard layouts</li> </ul> <p>Some notable examples:</p> <ul> <li> <p><code>KEYB bg 3021</code> \u2014 sets a Bulgarian keyboard layout and code page, with   Cyrillic characters encoded according to the MIK standard</p> </li> <li> <p><code>KEYB cz489 867</code> \u2014 a so-called programmer keyboard layout (national   characters available with Right Alt+0 - 9) for Czech and Slovak   languages, with Kamenick\u00fd character encoding - which was more popular than   code page 852</p> </li> <li> <p><code>KEYB de 858</code> \u2014 German keyboard, code page with EUR currency symbol</p> </li> <li> <p><code>KEYB hu 3845</code> \u2014 Hungarian keyboard, CWI-2 character encoding</p> </li> <li> <p><code>KEYB pl 668</code> \u2014 code page specially designed for the Polish language;   places national characters on the same positions as standard code page 852   (so it is compatible with current software and text documents), but   preserves more table drawing symbols</p> </li> <li> <p><code>KEYB pl 667</code> \u2014 Mazovia encoding for Polish language, used mainly by older   business software</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.0/#country-support-for-different-date-time-and-decimal-formats","title":"Country support for different date, time, and decimal formats","text":"<p>The display formats for dates, times, and decimals were previously fixed to the United States style, but this is no longer the case with this new version. Indeed, DOSBox Staging can now display date, time, and decimal formats according to the system locale and country settings, and for example, in the Canadian French locale (country code 2) the date and time will be displayed as <code>2002-10-01 12:34</code> instead of <code>10-01-2002 12:34p</code> as displayed in the United States locale (country code 1). There is a new config option <code>country</code> which allows you to manually specify the country code for the date, time, and decimal formats.</p> <p></p> <p>Canadian French locale   </p> <p></p> <p>United States locale   </p>"},{"location":"downloads/release-notes/0.79.0/#local-language-and-keyboard-layout-detection-improvements","title":"Local language and keyboard layout detection improvements","text":"<p>On macOS and Windows systems, local languages now are more robustly detected and applied.</p> <p>Note that these can still be manually set using the <code>language</code> and <code>keyboardlayout</code> config settings when needed, or via the <code>KEYB</code> command as mentioned above.</p>"},{"location":"downloads/release-notes/0.79.0/#input-improvements","title":"Input improvements","text":""},{"location":"downloads/release-notes/0.79.0/#mouse-wheel-emulation","title":"Mouse-wheel emulation","text":"<p>The built-in mouse driver now provides a wheel support for application aware of CuteMouse extensions; examples include Necromancer\u2019s DOS Navigator and Mpxplay.</p> <p>The original CuteMouse driver version 2.1 is also able to use the PS/2 mouse wheel, just start it with <code>CTMOUSE /o</code>.</p>"},{"location":"downloads/release-notes/0.79.0/#serial-mice-emulation","title":"Serial mice emulation","text":"<p>Numerous serial (COM port) mice are now emulated:</p> <ul> <li>original Microsoft mouse with 2 buttons</li> <li>Logitech mouse, with 3 buttons</li> <li>wheel mouse with 3 buttons</li> <li>Mouse Systems mouse (old mouse type, not compatible with the ones listed   above), with 3 buttons</li> </ul> <p>To enable serial mouse, user the <code>SERIAL 1 mouse</code> command (this will attach it to the COM1 port), or edit the <code>[serial]</code> section of the configuration file. By default, DOSBox Staging tries to determine what kind of mouse the game or application expects.</p> <p>With serial mouse emulation, Windows 1.01 is finally usable!</p>"},{"location":"downloads/release-notes/0.79.0/#windows-31-seamless-mouse-integration","title":"Windows 3.1 seamless mouse integration","text":"<p>It is now possible to have a seamless mouse integration using one of the following 3rd party VMware-compatible Windows 3.1 mouse drivers:</p> <ul> <li> <p>VBADOS by javispedro   \u2014 this one requires a corresponding DOS mouse driver to be started; this   driver also provides seamless mouse integration for a real DOS if booted   inside DOSBox Staging</p> </li> <li> <p>vmwmouse by NattyNarwhal \u2014   does not require any specific DOS driver and has experimental support for   mouse wheel, but current version 0.1 has stability problems</p> </li> </ul> <p>For now, only the mouse is supported (no VMware directory sharing, etc.), only using VMware protocol (no VirtualBox-only drivers). Windows 9x VMware mouse driver is not supported.</p>"},{"location":"downloads/release-notes/0.79.0/#joystick-calibration-hotkeys","title":"Joystick calibration hotkeys","text":"<p>Most DOS games that offer analog joystick control include some form of calibration. However, some games have poor or limited calibration resulting in the joystick\u2019s position drifting or being offset, despite calibration attempts.</p> <p>To compensate for these rare cases, DOSBox Staging lets you adjust the joystick\u2019s X and Y position parameters in real time by enabling the <code>use_joy_calibration_hotkeys</code> setting in the <code>[joystick]</code> config section.</p> <p>Once activated, you can tap Ctrl + arrow-keys or Alt + arrow-keys to adjust either the joystick\u2019s scalar multiplier or absolute offset position, respectively. These let you \u201ccounterbalance\u201d calibration issues in real time.</p> <p>Each tap of the hotkeys will log the calibration values for the given axis. For example:</p> <pre><code>x_calibration = 0.576211,0.02\ny_calibration = 0.5474,-0.005\n</code></pre> <p>Once you\u2019ve found the optimal settings for a game, the logged calibration values can be placed in the game\u2019s local config file (so the setting are only active for the affected game). Using the above as an example:</p> <pre><code>[joystick]\nuse_joy_calibration_hotkeys = false\njoy_x_calibration           = 0.576211,0.02\njoy_y_calibration           = 0.5474,-0.005\n</code></pre> <p>Note that you can disable the calibration hotkeys once you\u2019ve found settings that work for a problematic game.</p> <p>Here\u2019s a video showing how the calibration hotkeys \u201cpull\u201d the joystick in various directions:</p>      Your browser does not support the <code>video</code> element.    <p>The new joystick calibration feature in action   </p>"},{"location":"downloads/release-notes/0.79.0/#general-improvements","title":"General improvements","text":""},{"location":"downloads/release-notes/0.79.0/#command-line-setting-of-configuration-options","title":"Command-line setting of configuration options","text":"<p>Some people may want to temporarily run DOSBox Staging with specified config option(s), and in this new version you can do this with the new <code>-set</code> command-line option when launching DOSBox Staging, instead of having to modify the configuration file before you start DOSBox Staging.</p> <p>For example, the user can temporarily run DOSBox Staging with the EMS memory disabled with the command line <code>dosbox -set ems=false</code>, overriding the setting in the configuration file.</p> <p>The <code>-set</code> option can be specified multiple times for different config options, similar to the <code>-c</code> option which can be used multiple times to run multiple commands after DOSBox Staging starts.</p>"},{"location":"downloads/release-notes/0.79.0/#windows-installer-for-windows-users","title":"Windows installer for Windows users","text":"<p>Previously, DOSBox Staging was only available as portable zip packages for Windows users, but this has changed in this new version\u2014as a Windows user you can now install DOSBox Staging more easily with the installer, which is especially recommended for new and first-time users. When the installer is used, the installation process will be automated while allowing you to change certain things like the installation folder, and you will be able to launch DOSBox Staging as soon as the installation ends. Shell context menus can also be automatically added for a faster launch of DOSBox Staging from Windows Explorer.</p> <p></p> <p>Windows installer welome page   </p> <p></p> <p>Icons after installation   </p>"},{"location":"downloads/release-notes/0.79.0/#configurable-modem-connect-speeds","title":"Configurable modem connect speeds","text":"<p>The soft-modem\u2019s reported connect speed can be customised using the serial port\u2019s <code>baudrate</code> setting. for example:</p> <pre><code>serial1 = modem baudrate:2400\n</code></pre> <p>Although this doesn\u2019t change the underlying baud rate, it can help satisfy old modem software if it\u2019s unable to handle (or parse) the larger connect values.</p>"},{"location":"downloads/release-notes/0.79.0/#handling-options-for-memory-faults-in-buggy-games","title":"Handling options for memory faults in buggy games","text":"<p>Extremely rare programming bugs \ud83d\ude09 in some DOS games (and programs) may cause them to accidentally write data beyond their allocated memory region, similar to \u201cpainting outside the lines\u201d. DOSBox is great at catching these instances: it flags the corruption and quits, preventing the program from barreling on and possibly doing more harm such as writing corrupt save games, documents, and so on.</p> <p>DOSBox Staging defaults to this same behaviour, but adds the <code>[dosbox] mcb_fault_strategy</code> config setting:</p> mcb_fault_strategy Behaviour How it affects the buggy game <code>deny</code> Report and quit as soon as a fault is detected (default) Game terminates, no risk of subsequent file corruption <code>repair</code> Report and repair up to 100 sequential faults Game continues, but may still be unstable if its developers expected the corruption <code>report</code> Report the corruption and carry on Game continues, but risks further instability and file corruption <code>allow</code> Carry on without reporting Game continues, but risks further instability and file corruption <p>Only consider this if your game is prone to crashing with MCB chain corruption errors reported in the console log.</p>"},{"location":"downloads/release-notes/0.79.0/#developer-related-improvements","title":"Developer-related improvements","text":""},{"location":"downloads/release-notes/0.79.0/#self-documenting-bit-twiddling-with-bit_view","title":"Self-documenting bit twiddling with bit_view","text":"<p>We\u2019ve implemented a <code>bit_view</code> C++ class using constant expressions to access a subset of a data-field\u2019s bits, allowing them to be read, written, assigned, flipped, cleared, and tested, without the need to for the usual twiddling operations.</p> <p>Constructing a <code>bit_view</code> is similar to a C bitfield, however unlike C bitfields, <code>bit_view</code>s are free from undefined behaviour and have been proven using GCC\u2019s and Clang\u2019s undefined behaviour sanitisers.</p> <p>There\u2019s more detail and some code examples here.</p>"},{"location":"downloads/release-notes/0.79.0/#memory-block-and-type-size-simplification","title":"Memory block and type size simplification","text":"<p>The emulated main memory (up to 64 MiB) and the video card\u2019s memory (to up 8 MiB) are both now allocated statically to reduce pressure on heap storage (#1714).</p> <p>More progress has been made in reducing the use of large variables type-sizes down to purpose-fit sizes per the DOS/hardware specification (typically 8 or 16-bit) (#1721).</p>"},{"location":"downloads/release-notes/0.79.0/#tracy-profiler-integration","title":"Tracy profiler integration","text":"<p>The Tracy event profiler has been integrated into the build system and basic hooks are in place to log frames and tics. These are only active (and not compiled in) unless Tracy is enabled.</p> <p>Here\u2019s what it looks like:</p> <p></p> <p>Tracy runtime-profiling DOSBox Staging   </p> <p>It can be enabled at build-time with <code>-Dtracy=true</code>. Learn more about it, and how to build the server-side component here: #1749</p>"},{"location":"downloads/release-notes/0.79.0/#continuous-integration-msys2-workflow-improvements","title":"Continuous integration MSYS2 workflow improvements","text":"<p>The MSYS2-based workflow has been brought in line with current best practices, which dramatically improved its build time and lead to us now using it to generate the default Windows release binaries.</p>"},{"location":"downloads/release-notes/0.79.0/#release-package-shell-script","title":"Release-package shell script","text":"<p>Release packages are now generated using a cross-platform POSIX-compliant shell script. With this logic moved into a script, developers can now easily test the creation of a release package locally, which was previously impossible as that logic only lived in a GitHub-syntax YAML.</p>"},{"location":"downloads/release-notes/0.79.0/#static-analysis","title":"Static analysis","text":"<p>The team continues to fix and address static analysis issues as flagged by various analysers. Here are our Coverity Scan metrics to-date:</p> <p></p> <p></p>"},{"location":"downloads/release-notes/0.79.0/#translation-status","title":"Translation status","text":"<ul> <li>German: up-to-date</li> <li>Italian: up-to-date</li> <li>Polish: up-to-date</li> <li>Russian: config sections up-to-date</li> <li>French: not updated</li> <li>Spanish: not updated</li> </ul> <p>The 0.79.0 configuration file is also in UTF-8 format for the German, Italian, and Polish languages under the package\u2019s <code>resources/translated-0.79-conf-files</code> directory.</p> <p>The messaging system now supports self-documenting markup syntax, which is much easier to read and maintain compared to the previous ANSI escape sequences.</p> Old escape-code style New markup style <code>Escribiendo ^[[34;1mdir^[[0m all\ufffd mostrar\ufffd su contenido.</code> <code>Digita [color=blue]dir[reset] per visualizzarne il contenuto.</code>"},{"location":"downloads/release-notes/0.79.0/#notable-fixes","title":"Notable fixes","text":"<ul> <li> <p>Fixed Ultima Underworld issues with gaming (high polling rate) mice   (#1722)</p> </li> <li> <p>Fixed lockups and input issues with the debugger on macOS and Linux. Note   that for those using the debugger on Linux, we recommend building it with   SDL 2.0.18, because some input/interaction bugs exist when using newer SDL   versions.</p> </li> <li> <p>Fixed colours becoming very dim on newer Intel integrated GPUs due to   Intel\u2019s OpenGL drivers not properly handling the sRGB linear colour space.</p> </li> <li> <p>Fixed a memory-read race condition present during the splash-image display,   which also reduced start-up time by around 200 ms.</p> </li> <li> <p>Fixed display of the low-resolution halfline VESA 2.0 mode used by Extreme   Assault through the addition of a new <code>vesa_mode</code> config setting value,   named <code>halfline</code>.</p> </li> <li> <p>Named the macOS application \u201cDOSBox Staging.app\u201d per the macOS per Human   Interface Guidelines.</p> </li> <li> <p>Fixed a usability trap door when opening the mapper without mouse support:   in these cases, the user was unable to exit the mapper. The mapper now only   opens when mouse support is enabled.</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.0/#special-thanks","title":"Special thanks","text":"<ul> <li> <p>John Novak for all the audio enhancements, mixer cleanup, shader   improvements, and code reviews</p> </li> <li> <p>FeralChild64 for the mouse overhaul, code page and layout cleanup and   improvements, and code reviews</p> </li> <li> <p>Wengier for the shell improvements, mount and CLI additions, and Windows   installer</p> </li> <li> <p>Antti Peltola for providing historic resources, documentation help, and   project support</p> </li> <li> <p>shermp for the MSYS2 cleanup, cross-platform packaging script and CI   cleanup, ANSI markup system, and code reviews</p> </li> <li> <p>Kirk Klobe for the debugger fixes, Tracy integration, and paging and   memory system refinements</p> </li> <li> <p>GranMinigun for the HiDPI additions, video chain fixes, and Russian   translations</p> </li> <li> <p>nemo93 for testing 400+ games on the Raspberry Pi</p> </li> <li> <p>Kappa971 for the Italian and configuration file translations, and   leading the translation effort</p> </li> <li> <p>Burrito78 for the German translation</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.0/#contributors","title":"Contributors","text":""},{"location":"downloads/release-notes/0.79.0/#maintainers","title":"Maintainers","text":"<ul> <li>kcgen</li> <li>John Novak</li> <li>FeralChild64</li> <li>shermp</li> <li>Wengier</li> </ul>"},{"location":"downloads/release-notes/0.79.0/#authors","title":"Authors","text":"<ul> <li>kcgen</li> <li>John Novak</li> <li>FeralChild64</li> <li>Wengier</li> <li>shermp</li> <li>Kirk Klobe</li> <li>GranMinigun</li> <li>Patryk Obara</li> <li>ripsaw8080 (DOSBox maintainer)</li> <li>NicknineTheEagle</li> <li>David Reid (dr_lib author, 3rd party dependency)</li> <li>Leandro Nini (libresidfp author, 3rd party dependency)</li> <li>Jonathan Campbell (DOSBox-X maintainer)</li> <li>Dean Beeler</li> <li>ripa (DOSBox patch author)</li> <li>Keenan Weaver</li> <li>Dennis L\u00fchring</li> <li>IPeluchito</li> <li>Otto Liljalaakso</li> <li>Peter Ferrie</li> <li>arrowgent</li> <li>gulrak</li> <li>hunterk</li> </ul>"},{"location":"downloads/release-notes/0.79.0/#translators","title":"Translators","text":"<ul> <li>Burrito78 (German)</li> <li>FeralChild64 (Polish)</li> <li>GranMinigun (Russian)</li> <li>Kappa971 (Italian)</li> </ul>"},{"location":"downloads/release-notes/0.79.0/#sponsors","title":"Sponsors","text":"<ul> <li>Antti Peltola: 3,000 USD during the 0.79 development cycle</li> <li>Wengier</li> </ul>"},{"location":"downloads/release-notes/0.79.0/#backers","title":"Backers","text":"<ul> <li>Burrito78</li> <li>Hugo Locurcio</li> </ul> <p>Thank you to our financial contributors who allow us to purchase hardware, licenses, and other non-trivial expenses to keep the team and project going.</p> <p>To support our work, donate to our GitHub Sponsors or Open Collective.</p>"},{"location":"downloads/release-notes/0.79.0/#thank-you","title":"Thank you","text":"<p>We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.</p>"},{"location":"downloads/release-notes/0.79.1/","title":"0.79.1 release notes","text":"<p>Release date:  2022-09-30</p>"},{"location":"downloads/release-notes/0.79.1/#summary","title":"Summary","text":"<p>We recommend repository maintainers move to 0.79.1, which should be much easier to package. Details in the Packaging fixes section below.</p> <p>We recommend users of our zip, dmg, and Windows installer packages upgrade from 0.79.0 to fix some audio and usability bugs.</p> <p>This maintenance release was made possible by everyone who tried 0.79.0, submitted bugs and pull requests, and tested the updates: thank you!</p>"},{"location":"downloads/release-notes/0.79.1/#how-to-upgrade","title":"How to upgrade","text":"<p>Download and launch the latest version:</p> <ul> <li>Linux (or Steam on Linux)</li> <li>Windows</li> <li>macOS</li> </ul> <p>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.</p>"},{"location":"downloads/release-notes/0.79.1/#fixes-and-regressions","title":"Fixes and regressions","text":"<ul> <li> <p>Fixed a CD-DA playback regression in Might and Magic 6 when using   multi-image mounts (kcgen)</p> </li> <li> <p>Allowed the Esc key and window-close events to exit from the paused   state (Wengier)</p> </li> <li> <p>Fixed a bug that prevented automounted drives from being used by   <code>[autoexec]</code> commands (kcgen)</p> </li> <li> <p>Fixed an audio filter reset regression flagged in Blues Brothers: Jukebox   Adventure (kcgen)</p> </li> <li> <p>Fixed a 16-bit stereo DMA regression detected when using the Sound Blaster\u2019s   <code>modern</code> filter (kcgen)</p> </li> </ul> Your browser does not support the <code>video</code> element. <p>303 by Acme \u2014 30fps encoding, 120k cycles, and SB16 using the <code>modern</code> filter   </p>"},{"location":"downloads/release-notes/0.79.1/#functionality-refinements","title":"Functionality refinements","text":"<ul> <li> <p>Improved ability to pipe between applications by using <code>Y:</code> as a temporary   path (Wengier)</p> </li> <li> <p>Switched to warning-level logging for MIDI configuration issues (Michael   Drueing)</p> </li> <li> <p>Improved the lookup of resources when XDG variables aren\u2019t set correctly   (kcgen, Eli Schwartz)</p> </li> <li> <p>Updated the Dutch language to use the US keyboard layout by default   (Wengier)</p> </li> <li> <p>Included Xbox compatible controller mapperfiles for 180+ games:   conf,   wiki (nemo93)</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.1/#translation-improvements","title":"Translation improvements","text":"<ul> <li>Added Dutch translation (Robert de Rooy)</li> <li>Fixed outdated content in German translation (Burrito78)</li> <li> <p>Synced Italian translation (Kappa971)</p> </li> <li> <p>Dropped non-existant <code>KEYB</code> help messages from translation system   (Wengier)</p> </li> <li> <p>Replaced more escape codes with markup tags in the translations (Robert de   Rooy)</p> </li> <li> <p>Moved the mount type descriptions into the translation system (Wengier)</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.1/#wiki-updates-since-0790","title":"Wiki updates since 0.79.0","text":"<ul> <li> <p>New Keymapper page   with examples for those with Xbox controllers (nemo93)</p> </li> <li> <p>New FAQ   answering questions about audio settings, configuration files, video output,   and other topics (nemo93)</p> </li> <li> <p>Notable additions to the UniVBE,   Special keys,   Getting started,   Suggested audio settings,   Config examples,   AUTOTYPE candidates,   and Games with CD-DA, GUS and MIDI audio   pages (nemo93)</p> </li> </ul>"},{"location":"downloads/release-notes/0.79.1/#packaging-fixes","title":"Packaging fixes","text":"<ul> <li> <p>Adjusted Meson\u2019s FluidSynth dependency spec to match upstream\u2019s packaging   (Kirk Klobe)</p> </li> <li> <p>Switched Meson to use SpeexDSP from the host first and fallback to wrap   (kcgen)</p> </li> <li> <p>Switched Meson to use shared (instead of static) libraries by default   (kcgen)</p> </li> <li> <p>Fixed installation of <code>resources</code> when using <code>meson install</code> (kcgen, Eli   Schwartz)</p> </li> </ul> <p>Packagers will get shared libs and installed resources with these standard steps:</p> <pre><code>meson setup --prefix /writable/install/path build\nmeson install -C build\n</code></pre>"},{"location":"downloads/release-notes/0.79.1/#thank-you","title":"Thank you","text":"<p>Thanks to our financial contributors who allow us to purchase hardware, licenses, and other non-trivial expenses to keep the team and project going.</p> <p>To support our work, donate to our GitHub Sponsors or Open Collective.</p> <p>We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.</p>"},{"location":"downloads/release-notes/0.80.0/","title":"0.80.0 release notes","text":"<p>Release date: 2022-12-21</p>"},{"location":"downloads/release-notes/0.80.0/#summary","title":"Summary","text":"<p>ReelMagic DOS games are now playable thanks to the efforts of Jon Dennis, Chris Guthrie, and Joseph Whittaker, with testing and feedback from Vogons users Uka, DonutKing, and Vetz. Mouse emulation has been improved and now supports up to six independent mice, enabling split-screen play in games like The Settlers and The Settlers II. More settings, including video, audio, and mixer effects, can now be changed on the fly. Following macOS, high DPI support on multi-display setups now comes to Windows. A new <code>--working-dir</code> command line flag allows DOSBox Staging to launch from a specific working directory. Repo packagers should note that sdl2_image is now a dependency.</p> <p>Read on for all the details!</p>"},{"location":"downloads/release-notes/0.80.0/#how-to-upgrade","title":"How to upgrade","text":"<p>Get started by downloading the latest version and updating your configuration file:</p>"},{"location":"downloads/release-notes/0.80.0/#downloads","title":"Downloads","text":"<ul> <li>Linux</li> <li>Windows</li> <li>macOS</li> </ul>"},{"location":"downloads/release-notes/0.80.0/#upgrade-your-configuration-file","title":"Upgrade your configuration file","text":"<ol> <li>Launch the new release.</li> <li>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file.</li> </ol> <p>Note</p> <ul> <li> <p>Existing settings will be retained, but extraneous comments will be   dropped.</p> </li> <li> <p>Starting with version 0.80, the configuration file is written in the   language in which DOSBox Staging was started.</p> </li> <li> <p>To write an English configuration file, launch with the <code>-lang en</code>   command-line flag (to start DOSBox Staging in English) and then (re-)write   your configuration file.</p> </li> </ul>"},{"location":"downloads/release-notes/0.80.0/#new-features","title":"New features","text":""},{"location":"downloads/release-notes/0.80.0/#reelmagic-support","title":"ReelMagic support","text":"<p>DOS ReelMagic games are now playable thanks to Jon Dennis\u2019s patch with help from Chris Guthrie and Joseph Whittaker.</p> <p>See the <code>[reelmagic]</code> section in your configuration file to enable this. We suggest only enabling ReelMagic emulation on an as-needed basis.</p>      Your browser does not support the <code>video</code> element.    <p>Return to Zork (1995) \u2014 introduction   </p> <p>Jon plans to add DMA support (primarily used by the ReelMagic Windows 3.1x driver and games) when time permits, but most ReelMagic games for DOS are already fully functional and playable.</p>"},{"location":"downloads/release-notes/0.80.0/#mouse-improvements","title":"Mouse improvements","text":""},{"location":"downloads/release-notes/0.80.0/#dedicated-configuration-section","title":"Dedicated configuration section","text":"<p>The mouse configuration has been moved to its own section and additional options have been added. A tool called <code>mousectl</code> is available on <code>Z:</code> for more detailed per-interface mouse configuration. \u00a0</p>"},{"location":"downloads/release-notes/0.80.0/#dual-mouse-gaming","title":"Dual mouse gaming","text":"<p>Multiple physical mice can now be mapped to specific emulated mouse interfaces, enabling two-player split-screen gaming (The Settlers and The Settlers II) using two USB mice on a single computer.</p> <p>See the wiki article for more details.</p>      Your browser does not support the <code>video</code> element.    <p>The Settlers II (1996) \u2014 showcasing dual-mouse gaming in action   </p>"},{"location":"downloads/release-notes/0.80.0/#improved-support-for-third-party-int33-windows-mouse-drivers","title":"Improved support for third-party INT33 Windows mouse drivers","text":"<p>javispedro\u2018s INT33 mouse driver for Windows 3.1x is fully supported and no longer requires the use of the separate DOS driver, except when booting from a disk image. The driver also resolves compatibility issues with seamless mouse integration and adds mouse wheel support.</p> <p>See the wiki article for more details.</p>"},{"location":"downloads/release-notes/0.80.0/#mouse-related-help-in-the-title-bar","title":"Mouse-related help in the title bar","text":"<p>The title bar now displays some short help about the mouse, such as how it can be captured or released.</p>"},{"location":"downloads/release-notes/0.80.0/#high-dpi-on-windows","title":"High DPI on Windows","text":"<p>Following macOS, high DPI support now comes to Windows: the DOSBox window should scale nicely along other programs, and retain correct dimensions when moving between monitors with different scaling factors set.</p> <p>Note</p> <p>This feature is currently experimental! If you notice any weird behaviour, please report it!</p>"},{"location":"downloads/release-notes/0.80.0/#ability-to-use-local-configs-via-finder-on-macos","title":"Ability to use local configs via Finder on macOS","text":"<p>A new <code>--working-dir &lt;path&gt;</code> command line parameter has been introduced to make it possible to launch DOSBox Staging using local configs from the Finder on macOS. Previously, you had to use DOSBox from the command line to achieve this. \u00a0</p>"},{"location":"downloads/release-notes/0.80.0/#how-to-use-it","title":"How to use it","text":"<p>Follow the steps indicated in the DMG package, as shown:</p> <p></p> <p>Simply copy the included <code>Start DOSBox Staging.command</code> to any folder that contains a local <code>dosbox.conf</code> and then open it (<code>Start DOSBox Staging.command</code>) in Finder. DOSBox Staging will act as if started from that folder and will pick up the local config. \u00a0</p> <p>Note</p> <p>You might be asked to give DOSBox Staging access to the containing folder upon the first launch\u2014just click OK if that dialog comes up.</p>"},{"location":"downloads/release-notes/0.80.0/#general-improvements","title":"General improvements","text":""},{"location":"downloads/release-notes/0.80.0/#morecom-command","title":"<code>more.com</code> command","text":"<p>The <code>more</code> command is now internally implemented (should be more user-friendly than the original DOS one), and its engine is used for displaying help messages longer than one screen.</p>      Your browser does not support the <code>video</code> element.    <p>more.com \u2014 Better and Improved\u2122   </p>"},{"location":"downloads/release-notes/0.80.0/#on-the-fly-changes","title":"On-the-fly changes","text":"<p>Several settings can be safely adjusted at runtime, including the output video settings, resolution, OpenGL shaders, audio devices, and mixer settings.</p>      Your browser does not support the <code>video</code> element.    <p>Reconfiguring audio on-the-fly \u2014 changing sound cards in a PC has never   been easier!   </p>"},{"location":"downloads/release-notes/0.80.0/#post-rendered-screenshots","title":"Post-rendered screenshots","text":"<p>DOSBox has long provided the Ctrl+F5 hotkey to capture the emulated video card\u2019s image prior to rendering.</p> <p>DOSBox Staging 0.80 now pairs this with Alt+F5 (or Option+F5 on macOS) to capture the as-seen (post-rendered) image.</p>"},{"location":"downloads/release-notes/0.80.0/#more-bundled-opengl-shaders","title":"More bundled OpenGL shaders","text":"<p>The balance of usable shaders from Tyrells\u2019 CRT shader collection, as well as GranMinigun\u2019s interpolating Catmull\u2013Rom spline shader have been added.</p> <p>Launch DOSBox Staging with the <code>--list-glshaders</code> command-line argument to list the available OpenGL shaders. For example:</p> <pre><code>List of available GLSL shaders\n------------------------------\n\nPath '/usr/src/dosbox-staging/build/resources/glshaders' has:\n        |- crt/aperture\n        |- crt/caligari\n        |- crt/easymode\n        |- crt/easymode.tweaked\n        |- crt/fakelottes\n        |- crt/fakelottes.tweaked\n        |- crt/geom\n        |- crt/geom.tweaked\n        |- crt/hyllian-updated\n        |- crt/hyllian\n        |- crt/lottes-fast\n        |- crt/lottes-fast.subtle+gain\n        |- crt/lottes\n        |- crt/lottes.tweaked\n        |- crt/mattias\n        |- crt/pi-vertical\n        |- crt/pi\n        |- crt/yee64\n        |- crt/yeetron\n        |- crt/zfast\n        |- crt/zfast-composite\n        |- interpolation/catmull-rom\n        |- interpolation/sharp\n        |- scaler/advinterp2x\n        |- scaler/advinterp3x\n        |- scaler/advmame2x\n        |- scaler/advmame3x\n        |- scaler/rgb2x\n        |- scaler/rgb3x\n        |- scaler/scan2x\n        |- scaler/scan3x\n        |- scaler/tv2x\n        `- scaler/tv3x\n</code></pre> Full PR list of additions and improvements <ul> <li>Add <code>--working-dir</code> command line option (#2122)</li> <li>Add a subset of OpenGL shaders from Tyrells\u2019 repo (#2137)</li> <li>Add direct support for Windows 3.1 seamless mouse driver by javispedro (#1996)</li> <li>Add libraries to support TrueType font rendering (#2075)</li> <li>Add more cleanup on audio device tear-down (#2099)</li> <li>Add mouse related hints to title bar (#2062)</li> <li>Add release drafter support files (#2036)</li> <li>Add screenshots for rendered output #2073) (#2078)</li> <li>Allow to cancel interactive mouse mapping with a keyboard (#2067)</li> <li>Bump actions/cache from 2 to 3.0.11 (#2025)</li> <li>Bump actions/download-artifact from 2 to 3 (#2028)</li> <li>Bump actions/upload-artifact from 2 to 3 (#2026)</li> <li>Bump fountainhead/action-wait-for-check from 1.0.0 to 1.1.0 (#2027)</li> <li>Bump microsoft/setup-msbuild from 1.1 to 1.2 (#2123)</li> <li>Bump microsoft/setup-msbuild from 1.2 to 1.3 (#2129)</li> <li>Check file-descriptor dependency for Enet, slirp, and ManyMouse (#2108)</li> <li>Cleanup a handful of build issues for clang 10.x and 11.x (#2096)</li> <li>Cleanup issues in ReelMagic flagged by Coverity (#2084)</li> <li>Cleanup overcomplicated data conversions in Unicode support (#2104)</li> <li>Cleanup string IDs of DOS programs (#2064)</li> <li>Compiler warning fix in ManyMouse library (#2076)</li> <li>Contribute a script to convert from YouTube chapters to CD-DA (#2037)</li> <li>Customise the looks of the macOS DMG distribution disk image (#2127)</li> <li>Debloat the binary: use more heap storage and retire the software scalar (#2101)</li> <li>Drop architecture spec from setup-msbuild GitHub action (#2124)</li> <li>Enable DPI scaling on Windows (#2105)</li> <li>Fix a couple CWE issues in ManyMouse (#2040)</li> <li>Fix sentence starting with lower case in MOUNT command help (#2068)</li> <li>Generate linker map file by default (#2103)</li> <li>Implement MORE.COM command (#2020)</li> <li>Import Jon Dennis\u2019s ReelMagic emulation package #1112) (#2077)</li> <li>Improve detection of atomics, testing of speexDSP, and cleanup README (#1992)</li> <li>Improve interactive mouse mapping (#2065)</li> <li>Improve management of audio devices (#2095)</li> <li>Look for libXInput dependency (#2085)</li> <li>Minor mouse enhancements (#2060)</li> <li>Mouse mapper and configuration mechanism (#2000)</li> <li>Refactor ReelMagic player with per-stream handle registration (#2086)</li> <li>Refactor the ReelMagic audio FIFO class (#2090)</li> <li>Simplifies file search in virtual drive (#2130)</li> <li>Split contributed CD-DA scripts into fetch vs. cue functions (#2045)</li> <li>Sync reSIDfp with upstream (#2092)</li> <li>Update CI against latest deprecations and OS versions (#2031)</li> <li>Update Tracy to v0.9 (#2069)</li> <li>Update the build system wraps and automate CI action maintenance (#2024)</li> <li>Update wraps and PVS Studio (#2097)</li> <li>Use MORE engine for help output (#2079)</li> <li>Use a <code>sdd::unique_ptr</code> to manage the video memory (#2116)</li> <li>Use shared pointers to manage the virtual files (#2117)</li> </ul>"},{"location":"downloads/release-notes/0.80.0/#bug-and-regression-fixes","title":"Bug and regression fixes","text":"<ul> <li> <p>The mixer\u2019s effects (reverb, chorus, and crossfeed) can now be turned on and   off at runtime via the mixer command.</p> </li> <li> <p>FluidSynth\u2019s specific reverb and chorus configuration settings are now applied   and will replace the default values that were previously always applied.</p> </li> <li> <p>The modem\u2019s call now has a warm-up period where it will discard data. This   fixes a bug noted in Duke Nukem 3D where it would fail its initial   handshake on the first try.</p> </li> </ul> Full PR list of bug and regression fixes <ul> <li>Adapt <code>update-sources.sh</code> script to UTF-8 locale (#2011)</li> <li>Add modem call warm-up period (#2125)</li> <li>Always use VFR presentation mode for text modes (#2139)</li> <li>Avoid shifting negative DAC data in Sound Blaster (CWE-758) (#2115)</li> <li>Capture the OpenGL screenshot using RGBA pixel format (#2143)</li> <li>Change <code>config -wc</code> to write UTF-8 file (#1991)</li> <li>Drop architecture spec from setup-msbuild GitHub action (#2124)</li> <li>Fix FluidSynth reverb and chorus settings not applying (#2133)</li> <li>Fix a memory leak in the keyboard layout class (#1985)</li> <li>Fix assertion in mouse code for surface screen output (#2110)</li> <li>Fix bitwise shift of negative in DOS date pack call (#2034)</li> <li>Fix character D6 mapping in code page 3021 (Bulgarian MIK encoding) (#2094)</li> <li>Fix several English strings too long to fit on screen (#1998)</li> <li>Fix tab handling in MORE command (#2102)</li> <li>Improve <code>mixer.com</code> CLI handling of volume and effect arguments (#2021)</li> <li>Initialize the window\u2019s canvas size during its setup phase (#2038)</li> <li>Limit <code>bit_view</code>s to 8-bit registers to avoid byte-order assumption (#1999)</li> <li>MORE text output engine fixes (#2083)</li> <li>Parse language options before writing the conf file (#2001)</li> <li>Remove errorneous screen parameters check in mouse code (#2119)</li> <li>Restore 0.79.1 mouse acceleration model in DOS driver (#2087)</li> <li>Restore WheelHasMoved bit in DOS mouse driver to correct value (#2091)</li> <li>Use non-throwing form of <code>std::filesystem</code> calls (#1995)</li> </ul>"},{"location":"downloads/release-notes/0.80.0/#translation-improvements","title":"Translation improvements","text":""},{"location":"downloads/release-notes/0.80.0/#translations","title":"Translations","text":"<ul> <li>German: up-to-date</li> <li>Italian: up-to-date</li> <li>Polish: up-to-date</li> <li>Russian: up-to-date</li> <li>French: not updated</li> <li>Spanish: not updated</li> </ul>"},{"location":"downloads/release-notes/0.80.0/#related-improvements","title":"Related improvements","text":"<ul> <li> <p>The title bar is now translatable.</p> </li> <li> <p>The Brazilian ABNT2 slash and question mark keys are now handled.</p> </li> <li> <p>Translations are now stored in UTF-8 and converted to the selected DOS   codepage, dropping accents if needed, sometimes even performing crude   transliterations (for Latin, Greek, and Cyrillic alphabets DOSBox   shouldn\u2019t display garbled messages anymore regardless which codepage is   selected). This is especially important for languages where more than one   incompatible encoding was used in the DOS era. All FreeDOS codepages are   supported. Note that only DOSBox Staging\u2019s own messages benefit from this   feature.</p> </li> </ul> Full PR list of documentation and translation changes <ul> <li>Adapt <code>update-sources.sh</code> script to UTF-8 locale (#2011)</li> <li>Add Dutch tranlation of MOUSECTL (#2042)</li> <li>Add Dutch translation of MORE (#2048)</li> <li>Add handling for ABNT2 slash/question mark key (by rsribeiro) (#2082)</li> <li>Add release drafter support files (#2036)</li> <li>Clarify <code>tandy</code> and <code>ibm5153</code> <code>cga_colors</code> config descriptions (#2074)</li> <li>Cleanup string IDs of DOS programs (#2064)</li> <li>Convert esc codes to ansi in src (#2008)</li> <li>Delete obsolete translated msgs (#2058)</li> <li>Fix character D6 mapping in code page 3021 (Bulgarian MIK encoding) (#2094)</li> <li>Fix code page 30020 to UTF-8 mapping (#1988)</li> <li>Fix code page 30020 to UTF-8 mapping (#1988)</li> <li>Fix mistakes in switching to ansi text codes (#2017)</li> <li>Fix some errors in the Italian (it-it) translation (#2029)</li> <li>Fixed some ANSI escape codes in the Italian translation (#2013)</li> <li>Fixup nl.txt to match nl.lng (#2010)</li> <li>Improve build instructions (#2126)</li> <li>Improve detection of atomics, testing of speexDSP, and cleanup README (#1992)</li> <li>Minor Dutch translation updates (#2007)</li> <li>Parse language options before writing the conf file (#2001)</li> <li>Support for UTF-8 locale (2nd generation patch) (#1884)</li> <li>Support for UTF-8 locale (2nd generation patch) (#1884)</li> <li>Switch messages in <code>MSG_Add</code> from code page 437 to UTF-8 (#1984)</li> <li>Switch messages in <code>MSG_Add</code> from code page 437 to UTF-8 (#1984)</li> <li>Translate new message (#2032)</li> <li>Update Dutch (nl) translation (#2100)</li> <li>Update Dutch (nl) translation (#2141)</li> <li>Update Italian (it-it) translation (#2005)</li> <li>Update Italian (it-it) translation (#2041)</li> <li>Update Italian (it-it) translation (#2055)</li> <li>Update Italian (it-it) translation (#2072)</li> <li>Update Italian (it-it) translation (#2088)</li> <li>Update Polish (pl) translation (#1982)</li> <li>Update Polish (pl) translation (#2070)</li> <li>Update Polish (pl) translation (#2098)</li> <li>Update Polish (pl) translation (#2118)</li> <li>Update Polish (pl) translation, change ANSI escape codes to tags (#2012)</li> <li>Update Russian (ru-RU) translation (#2120)</li> <li>Various Dutch translation updates (#2016)</li> </ul>"},{"location":"downloads/release-notes/0.80.0/#documentation-updates","title":"Documentation updates","text":"<p>The following wiki articles have been updated:</p> <ul> <li> <p>The new Dual Mouse Gaming page   documents how to set up dual-mouse working in The Settlers and The Settlers II.</p> </li> <li> <p>The Windows 3.1x page   was updated with notes on how to set up the improved mouse driver, and more   sound drivers.</p> </li> <li> <p>The new Windows 3.0 page   documents how to set up Windows 3.0\u2019s video, sound, MIDI, mouse, and how to   print to files.</p> </li> <li> <p>The new Serial Ports page   documents all of the serial port settings.</p> </li> <li> <p>The Sound Cards page   was overhauled with descriptions and configuration help for all supported   sound devices.</p> </li> <li> <p>The Tips &amp; Tricks page   was updated with how to generate DOSBox mountable CD-DA content from public   domain or Creative Commons licensed YouTube chapters and playlists.</p> </li> </ul>"},{"location":"downloads/release-notes/0.80.0/#contributors","title":"Contributors","text":"<p>The following commit authors, sponsors, supporters, and backers all invested their time or funds into the 0.80 release effort. Thank you!</p> <p>Contributors are listed in alphabetic order.</p>"},{"location":"downloads/release-notes/0.80.0/#080-commit-authors","title":"0.80 commit authors","text":"<ul> <li>Burrito78</li> <li>dreamer</li> <li>drfiemost</li> <li>FeralChild64</li> <li>GranMinigun</li> <li>javispedro</li> <li>Jkapp76</li> <li>johnnovak</li> <li>jrdennisoss</li> <li>Kappa971</li> <li>kcgen</li> <li>kklobe</li> <li>LowLevelMahn</li> <li>memononen</li> <li>nemo93</li> <li>NicknineTheEagle</li> <li>rderooy</li> <li>rsribeiro</li> <li>tyrells</li> </ul>"},{"location":"downloads/release-notes/0.80.0/#080-sponsors","title":"0.80 sponsors","text":"<p>Sponsors who donated more than 100 USD per month to the project:</p> <ul> <li>Antti Peltola (1000 USD during the period)</li> <li>Wengier Wu (380 USD during the period)</li> </ul>"},{"location":"downloads/release-notes/0.80.0/#080-backers","title":"0.80 backers","text":"<p>Backers who donated more than 5 USD per month to the project:</p> <ul> <li>Burrito78</li> <li>Hannu Hartikainen</li> <li>Hugo Locurcio</li> </ul> <p>Thank you for considering supporting our work through a donation on GitHub Sponsors or Open Collective. Your contribution helps us purchase the necessary hardware and licenses to keep our project going.</p>"},{"location":"downloads/release-notes/0.80.0/#thank-you","title":"Thank you","text":"<p>We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.</p>"},{"location":"downloads/release-notes/0.80.1/","title":"0.80.1 release notes","text":"<p>Release date: 2023-01-06</p>"},{"location":"downloads/release-notes/0.80.1/#summary","title":"Summary","text":"<p>This maintenance release fixes minor issues with the mouse defaults, modem and Ethernet connection handling, and Meson dependencies.</p> <p>We are also happy to report that the high DPI improvements in the previous 0.80.0 release have been verified on Windows, meaning that high DPI support is now functional on all platforms. Thanks to GranMinigun for this addition!</p> <p>This maintenance release was made possible by everyone who tried 0.80.0, submitted bugs and pull requests, and tested the updates: thank you!</p>"},{"location":"downloads/release-notes/0.80.1/#how-to-upgrade","title":"How to upgrade","text":"<p>Get started by downloading the latest version and updating your configuration file:</p>"},{"location":"downloads/release-notes/0.80.1/#downloads","title":"Downloads","text":"<ul> <li>Linux</li> <li>Windows</li> <li>macOS</li> </ul>"},{"location":"downloads/release-notes/0.80.1/#upgrade-your-configuration-file","title":"Upgrade your configuration file","text":"<ol> <li>Launch the new release.</li> <li>At the<code>Z:\\&gt;</code> prompt, run <code>config -wc</code> to write the new configuration file.</li> </ol> <p>Note</p> <ul> <li>Existing settings will be retained, but extraneous comments will be   dropped.</li> </ul>"},{"location":"downloads/release-notes/0.80.1/#bug-and-regression-fixes","title":"Bug and regression fixes","text":"<ul> <li> <p>The mouse will now be captured only after the first click inside the window.   For users without a windowing environment, the previous capture-on-start   behavior will remain unchanged.</p> </li> <li> <p>The captured mouse will now be centered in the window upon release.</p> </li> <li> <p>The softmodem now includes a brief warm-up period where it will drop initial   unreliable data, similar to hardware modems. This allows Duke Nukem 3D to   establish its data connection on the first attempt.</p> </li> <li> <p>A potential slow memory leak related to closed Ethernet connections has been   fixed.</p> </li> <li> <p>A bug that caused the <code>C:</code> mount to become unlistable after launching DOSBox   Staging with a command-line mount while using <code>MORE.COM</code> has been fixed.</p> </li> <li> <p>The xinput2 library, an optional dependency of ManyMouse, can now be set via   the Meson options. For more information, see   <code>meson_options.txt</code>.</p> </li> <li> <p>When compiling on ARM platforms, the SpeexDSP wrap will now correctly check if   the host supports NEON instructions, and use them if available.</p> </li> </ul> Full PR list of bug and regression fixes <ul> <li>Add Linux ARM CI jobs using containerized cross-compiler (#2193)</li> <li>Add missing Windows 11 features to MORE command (#2142)</li> <li>Bump Coverity to v2022.06 (#2162)</li> <li>Bump actions/cache from 3.2.0 to 3.2.1 (#2152)</li> <li>Bump actions/cache from 3.2.1 to 3.2.2 (#2165)</li> <li>Center mouse cursor before releasing it (#2173)</li> <li>Change mouse capture default to \u2018onclick\u2019 (#2172)</li> <li>Check CLI arguments for directories using non-invasive test (#2148)</li> <li>Cleanup some minor Coverity issues (#2179)</li> <li>Fix CGA mono and Hercules intro banners (#2190)</li> <li>Fix imprecise help string in MORE command (#2161)</li> <li>Fix logging of some pre-EGA modes (#2187)</li> <li>Fix remaining two CWEs involving unchecked return values (#2150)</li> <li>Fix slirp/ne2000 warnings (#2182)</li> <li>Improve logging of the current display mode (#2168)</li> <li>Improve seamless mouse configuration entry description, mention the touchscreen (#2163)</li> <li>Make the xinput2 library optional for ManyMouse (#2155)</li> <li>Use extended ASCII check in MORE command (#2195)</li> <li>Use presence of desktop environment in mouse capture states (#2181)</li> </ul>"},{"location":"downloads/release-notes/0.80.1/#translation-improvements","title":"Translation improvements","text":"<p>This maintenance release includes updates to the Dutch, Italian, and Polish translations.</p> Full PR list of translation improvements <ul> <li>Update Dutch (nl) translation of MORE (#2164)</li> <li>Update Italian (it-it) translation (#2166)</li> <li>Update Polish (pl) translation (#2159)</li> <li>Update Polish (pl) translation (#2186)</li> <li>Update Polish (pl) translation, for 0.80.x only (#2194)</li> </ul>"},{"location":"downloads/release-notes/0.80.1/#contributors","title":"Contributors","text":"<p>The following commit authors, sponsors, supporters, and backers invested their time or funds into this maintenance release. Thank you!</p>"},{"location":"downloads/release-notes/0.80.1/#commit-authors","title":"Commit authors","text":"<p>In alphabetic order:</p> <ul> <li>FeralChild64</li> <li>johnnovak</li> <li>Kappa971</li> <li>kcgen</li> <li>NicknineTheEagle</li> <li>rderooy</li> <li>shermp</li> <li>ThomasEricB</li> </ul>"},{"location":"downloads/release-notes/0.80.1/#sponsors","title":"Sponsors","text":"<p>Sponsors who donated 100+ USD per month to the project:</p> <ul> <li>Antti Peltola</li> <li>Wengier Wu</li> </ul>"},{"location":"downloads/release-notes/0.80.1/#backers","title":"Backers","text":"<p>Backers who donated 5+ USD per month to the project:</p> <ul> <li>Burrito78</li> <li>Hannu Hartikainen</li> <li>Hugo Locurcio</li> </ul> <p>Thank you for considering supporting our work through a donation on GitHub Sponsors or Open Collective. Your contribution helps us purchase hardware and cover ongoing expenses to keep the project going.</p>"},{"location":"downloads/release-notes/0.80.1/#thank-you","title":"Thank you","text":"<p>We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.</p>"},{"location":"get-involved/","title":"Get involved","text":""},{"location":"get-involved/#github-repository","title":"GitHub repository","text":"<p>The DOSBox Staging project is hosted on GitHub. Here you\u2019ll find the full source code and various project related documentation. Send us patches if you improve something! \ud83d\ude04</p> <p>We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.</p>"},{"location":"get-involved/#report-an-issue","title":"Report an issue","text":"<p>While we do our best to ensure the quality of our releases, every software has bugs. If you think you\u2019ve spotted one, please report it in our issue tracker (requires a GitHub account).</p> <p>Alternatively, join our Discord channel to discuss the problem with one of our friendly staff members.</p>"},{"location":"get-involved/#wiki","title":"Wiki","text":"<p>The DOSBox Staging Wiki hosted on GitHub contains lots of useful tricks &amp; tips, how-to\u2019s, lists, and guides that can help newcomers and more experienced users alike.</p> <p>We very much recommend perusing it, and if you\u2019ve spotted an error or have something to share, please feel free to contribute to it.</p>"},{"location":"get-involved/#discord","title":"Discord","text":"<p>Join the team on Discord for a good chat over a virtual beverage of your choice!  </p> <p>We only ask you to adhere to our Code of Conduct so every participant can enjoy the discussion.</p>"},{"location":"get-involved/#make-a-donation","title":"Make a donation","text":"<p>DOSBox Staging is an entirely volunteer-based effort\u2014we\u2019re not getting paid for our activities. However, we have some running expenses and need to invest in hardware, licenses, and other non-trivial expenses to keep the team and the project going.</p> <p>If you wish to make a financial contribution to support us, you can do so at our GitHub Sponsors or Open Collective pages. </p> <p>We are grateful for all donations, no matter how big or small!</p>"},{"location":"get-involved/code-of-conduct/","title":"Code of conduct","text":"<p>In order to foster a welcoming, positive, and rewarding experience, we as community members pledge to uphold this code of conduct.</p> <p>Isn\u2019t decent behavior already expected? We want to bring our best to each other as peers, and explicitly documenting our expectations lets us set a high bar for ourselves.</p>"},{"location":"get-involved/code-of-conduct/#be-excellent-to-each-other","title":"Be excellent to each other","text":"<p>\u201cExcellent\u201d means we:</p> <ul> <li> <p>are wholly inclusive to existing members and newcomers looking to   learn or participate. Some may raise questions that have been addressed   before. Kindly point them to existing discussions. Everyone was new to a   project once.</p> </li> <li> <p>respect your abilities, interests, and personal differences.  Our   different talents documenting, testing, coding, reviewing, reporting, and/or   evangelizing are all valuable to the project.</p> </li> <li> <p>make concise and actionable points to respect your time as a volunteer.   We respect each other\u2019s time by keeping the signal-to-noise ratio high,   staying on-topic, and being a good house guest: every visit we strive to   leave the place in better shape than when we arrived.</p> </li> <li> <p>are kind and assume positive intent, even when we disagree while   working towards consensus and achieving the project\u2019s technical goals.</p> </li> <li> <p>educate and illuminate others with something we know more about. We were   all beginners once and can teach and learn through feedback and sharing.</p> </li> <li> <p>are open to feedback from others, be it technical points, interpersonal   tips, or language/wording suggestions.</p> </li> <li> <p>accept responsibility by apologizing to those affected by our mistakes   and graciously accept apologies knowing that mistakes are part of the   process.</p> </li> <li> <p>use words carefully because we may not all understand irony or negative   sarcasm. We communicate plainly, and we justify our positions objectively and   explicitly.</p> </li> <li> <p>leave with class, without drama or bitterness, when resigning for any   reason. We champion your rights under the terms of the GPL to fork the code   and create a new project\u2014just as we stand on the shoulders of those who gave   us the right to create this project.</p> </li> </ul>"},{"location":"get-involved/code-of-conduct/#reporting-issues","title":"Reporting issues","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team (see below). All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>The project team can be contacted via Discord.</p>"},{"location":"getting-started/beneath-a-steel-sky/","title":"Beneath a Steel Sky","text":"<p>The next game we\u2019re going to set up is Beneath a Steel Sky, a cyberpunk sci-fi adventure game from 1994. It\u2019s one of the standout timeless classics of the adventure genre, and best of all, Revolution Software released the game as freeware in 2003 (see their accompanying notes here).</p>"},{"location":"getting-started/beneath-a-steel-sky/#launching-games-more-easily","title":"Launching games more easily","text":"<p>Before we delve into the setup instructions, a few words on launching our growing collection of games more easily. Having to go to its folder whenever we want to launch a game gets old really fast. Here\u2019s how we can skip this step:</p> Windows <ol> <li> <p>Create a batch file called <code>Start DOSBox Staging.bat</code> with the following     content:</p> <pre><code>C:\\Users\\%USERNAME%\\AppData\\Local\\DOSBox\\dosbox.exe\n</code></pre> <p>That\u2019s the default installation path chosen by the installer. <code>%USERNAME%</code> is your Windows user name; of course, if you have installed DOSBox Staging to a different folder, you should adjust the path accordingly.</p> </li> <li> <p>Copy this batch file into your individual game folders and rename them to    the names of the games, e.g., <code>Prince of Persia.bat</code> in this example.</p> </li> <li> <p>Right-click on the batch file icon and select Send to \u2192 Desktop (create    shortcut) in the context menu.</p> </li> <li> <p>Now you can double-click on the new Prince of Persia.bat - Shortcut icon    on your desktop to start the game (of course, you can rename the icon to    Prince of Persia or whatever you like; this won\u2019t change the name of the    batch file it references).</p> </li> </ol> macOS <p>You can rename the Start DOSBox Staging icons in the individual game folders to the names of the games, then you can use Spotlight Search to start a game.</p> <p>For example, rename Start DOSBox Staging in the <code>Prince of Persia</code> folder to Prince of Persia. Start Spotlight Search by pressing Cmd+Space, then type in \u201cPrince\u201d. The Prince of Persia icon will show up in the search results\u2014you can simply press Enter on it to launch the game.</p> Linux <p>The easiest way is to create a shell script with the following content (of course, modify the path passed in as the argument of the <code>--working-dir</code> option so it points to your game directory):</p> <pre><code>#!/bin/bash\ndosbox --working-dir \"~/Documents/DOS Games/Prince of Persia\"\n</code></pre> <p>Then create an icon on your desktop that launches this script, or start it however you like.</p>"},{"location":"getting-started/beneath-a-steel-sky/#mounting-a-cd-rom-image","title":"Mounting a CD-ROM image","text":"<p>We\u2019re going to set up the liberated \u201ctalkie\u201d CD-ROM version of the game that has full voice-acting. You know the drill; create a new <code>Beneath a Steel Sky</code> subfolder inside your <code>DOS Games</code> folder and the usual <code>drives/c</code> subfolder within it. Then download the ISO CD-ROM image and put it into a <code>cd</code> subfolder inside your <code>Beneath a Steel Sky</code> game folder. The name of the <code>cd</code> subfolder has no special significance; you could put the <code>.iso</code> image anywhere, but it\u2019s good to get into the habit of organising your game files systematically (e.g., you could create a <code>Manual</code> of <code>Extras</code> subfolder too and put the scanned manuals and all other extra files there). It\u2019s a good idea to rename <code>Beneath a Steel Sky (1995)(Virgin).iso</code> to <code>cdrom1.iso</code>; our game folder has the full name of the game anyway. </p> <p>Speaking of manuals, make sure to get the scan of the Security Manual and the comic book that was included in the boxed version of the game.</p> <p>For the visually inclined, this is the structure we\u2019ll end up with:</p> <p></p> <p>We need to mount the CD image to be able to use it. Our C drive is the hard drive, so we\u2019ll mount the CD-ROM image as the next letter D by convention. This is equivalent to having a CD-ROM drive in our emulated computer assigned to the drive letter D and inserting the game CD into it.</p> <p>Mounting an image file, such as a floppy or CD-ROM image, is accomplished with the <code>imgmount</code> command. It is pretty simple to use: the first argument is the drive letter (<code>d</code>), the second the path to the CD-ROM image (<code>cd/cdrom1.iso</code>), and the third the type of the image file (<code>-t iso</code>).</p> <p>So this is what we need to put into our config:</p> <pre><code>[autoexec]\nimgmount d cd/cdrom1.iso -t iso\n</code></pre> <p>Warning</p> <p>If you\u2019ve kept the original name of the ISO, you\u2019ll need to enclose it in double quotes because it contains spaces:</p> <pre><code>imgmount d \"cd/Beneath a Steel Sky (1995)(Virgin).iso\" -t iso\n</code></pre> <p>Tip</p> <p>By always putting your CD-ROM images into the <code>cd</code> subfolder within your game folder and renaming the ISO files to <code>cdrom1.iso</code>, <code>cdrom2.iso</code>, and so on, it\u2019s easier to reuse the mount commands between configs.</p> <p>You can always run <code>imgmount /?</code> if you need a little reminder on how to use it (although the full list of options can be a little overwhelming).</p> <p>This is what you should see in the DOSBox Staging window after startup if everything is set up correctly:</p> <pre><code>Local directory drives/c/ mounted as C drive\nZ:\\&gt;imgmount d cd/cdrom1.iso -t iso\nMSCDEX installed.\nISO image cd/cdrom1.iso mounted as D drive\nZ:\\&gt;_\n</code></pre> <p>MSCDEX is the name of the MS-DOS CD-ROM driver, and the next line just informs us that our CD image is mounted as drive D. Time to get down to business then!</p>"},{"location":"getting-started/beneath-a-steel-sky/#installing-the-game","title":"Installing the game","text":"<p>Most games that come on CD images need to be installed on the hard drive first. Usually, there\u2019s an executable called <code>INSTALL.EXE</code> or <code>SETUP.EXE</code> in the root directory of the CD (the extension could be <code>.COM</code> or <code>.BAT</code> as well).</p> <p>Switch to the D drive by executing <code>d:</code> then run the <code>dir</code> command to inspect the contents of the CD:</p> <pre><code> Volume in drive D is BASS\n Directory of D:\\\n\nINSTALL  EXE                  28,846 06/15/1994  8:56a\nREADME   TXT                   1,569 09/08/2005  1:34a\nSKY      DNR                  40,796 07/07/1994  8:40a\nSKY      DSK              72,429,382 07/07/1994  8:40a\nSKY      EXE                 402,622 07/07/1994  7:21a\nSKY      RST                  53,720 07/07/1994  7:19a\n                6 file(s)            72,956,935 bytes\n                0 dir(s)                      0 bytes free\n</code></pre> <p>Okay, so we\u2019ve got two executables with the <code>.EXE</code> extension and one text file. View <code>README.TXT</code> using the <code>more</code> command (run <code>more README.TXT</code>, then keep pressing Space or Enter to go to the next page, or Ctrl+C to quit). It turns out it just contains some legal notice we don\u2019t really care about. <code>INSTALL.EXE</code> is what we\u2019re after, so let\u2019s run that!</p> <p>We\u2019re greeted by a pretty standard-looking text-mode installer. Either press any key or wait a few seconds to progress to the second screen where you need to select where the game will be installed:</p> <p></p> <p>You can navigate the interface with the cursor keys, Esc, Enter, and the mouse. The default <code>C:\\SKY</code> install location is perfectly fine, so just accept it by pressing Enter.</p> <p>That will take us to the setup screen where we can select the language of the in-game text (the voice-acting is in English only), and the sound card settings:</p> <p></p> <p>English is fine, and the game has auto-detected our sound card correctly (Sound Blaster 16\u2014this is the sound card DOSBox emulates by default), so just accept these settings for now. And now, the counterintuitive part: to finish the installation and save the settings, we need to press the Exit Install button, which will take us to the (guess what?) Exit Install dialog:</p> <p></p> <p>Here you need to press the Save Setup button to finalise the settings and exit the installer.</p> <p>As you can see, this is not exactly a masterclass in user interface design, but it does the job. Expect many DOS-era install and setup utilities to be similarly slightly illogical\u2014often it\u2019s not completely obvious what to do, but it\u2019s not too hard to figure it out with some trial and error.</p> <p>Anyway, after pressing Save Setup the installer will exit and print out the following instructions:</p> <pre><code>BENEATH A STEEL SKY has been installed to directory:\n\nC:\\SKY\n\nTo run the game type:\n\nC:\nCD \\SKY\nSKY\n</code></pre> <p>Okey-dokey, let\u2019s do as the computer says! It\u2019s the easiest to put the above commands into the <code>[autoexec]</code> section of our config, but let\u2019s comment the last <code>sky</code> command out for now by preceding it with a <code>#</code> character because we don\u2019t want to start the game just yet:</p> <pre><code>[autexec]\nimgmount d cd/cdrom1.iso -t iso\nc:\ncd \\sky\n#sky\n</code></pre>"},{"location":"getting-started/beneath-a-steel-sky/#changing-the-current-directory","title":"Changing the current directory","text":"<p>So before we run the game, what is this <code>cd \\sky</code> command? Does it have something to do with the <code>cd</code> subfolder where we put out CD-ROM image, perhaps?</p> <p>No, that\u2019s just a coincidence. The <code>cd</code> command stands for Change Directory; it is used to change the current directory that\u2019s displayed as part of the DOS prompt. So let\u2019s analyse what these lines we put into the <code>[autoexec]</code> section do:</p> <pre><code>c:\ncd \\sky\n</code></pre> <p>The first command <code>c:</code> switches to the C drive (remember, the current drive is the special built-in Z drive when DOSBox starts).</p> <p>Then the second <code>cd \\sky</code> command changes the current directory to the <code>sky</code> directory at the root level of the C drive. <code>cd sky</code> would work as well because the current directory is the root when we switch to the C drive right after startup.</p> <p>How do you go up one level to the parent directory? With the <code>cd ..</code> command (two dots means \u201cparent directory\u201d, and a single dot means \u201ccurrent directory\u201d).</p> <pre><code>C:\\SKY&gt;cd ..\nC:\\&gt;_\n</code></pre> <p>How do you go straight to the root directory? By executing <code>cd \\</code> (the <code>\\</code> backslash character means \u201croot directory\u201d).</p> <pre><code>C:\\SKY&gt;cd \\\nC:\\&gt;_\n</code></pre> <p>You can also switch to a nested subdirectory with a single <code>cd</code> command, e.g. if you have a directory called <code>one</code> at the root level which contains a subdirectory <code>two</code>, which in turn contains another subdirectory <code>three</code>, you can switch to <code>three</code> from any directory with the  <code>cd \\one\\two\\three</code> command. Note this is an imaginary example:</p> <pre><code>C:\\SKY&gt;cd \\one\\two\\three\nC:\\ONE\\TWO\\THREE&gt;_\n</code></pre> <p>Play around a bit with the drive and directory switching commands, then when you had enough, uncomment the last <code>sky</code> command in the <code>[autoexec]</code> section (remove the <code>#</code> character).</p> <p>Warning</p> <p>You cannot switch to a different drive with the <code>cd</code> command (e.g., <code>cd z:</code> or <code>cd z</code> won\u2019t work); you must use the drive letter followed by a semicolon (<code>z:</code> in this example)!</p>"},{"location":"getting-started/beneath-a-steel-sky/#adjusting-volume-levels","title":"Adjusting volume levels","text":"<p>After starting the game, don\u2019t watch the intro just yet; press Esc to jump straight to the opening scene. There\u2019s music playing, so far so good. Move the cursor over the door on the right side of the screen, and when it turns into a crosshair and the word \u201cDoor\u201d appears next to it, press the left mouse button to inspect it. Lo and behold, you\u2019ll hear our protagonist speak! But it\u2019s barely audible, the music is just too loud.</p> <p>There are a couple of ways to fix that. You can press F5 to bring up the game\u2019s options dialog where you can lower the music volume, but that would make the total audio output too quiet. Worse yet, the setting doesn\u2019t get saved, so you\u2019d need to do this every single time when starting up the game.</p> <p>As we\u2019ve learned before, games with Sound Blaster support tend to use the sound card\u2019s OPL synthesiser for the music and its digital audio capabilities for the speech. As the OPL synth and the digital audio have their dedicated mixer channels, their volumes can be adjusted independently of each other.</p> <p>\u201cWait a minute, what mixer channels now?!\u201d</p> <p>Okay, so DOSBox has an integrated audio mixer. All emulated sound cards have their own channels in the mixer, and certain \u201ccomposite\u201d audio devices may have multiple channels. The Sound Blaster is such a composite device, so it has two mixer channels: one for the OPL synthesiser, and one for digital audio.</p> <p>Execute the <code>mixer</code> command in the DOS prompt to view the current state of the mixer:</p> <p></p> <p>The first channel is the <code>MASTER</code> channel; this is the summed output of all other channels and it\u2019s always present. Below that is the <code>CDAUDIO</code> channel, the <code>OPL</code> and <code>PCSPEAKER</code> channels (you can guess these two, right?), and finally, the <code>SB</code> channel, which is for the digital audio output of the Sound Blaster.</p> <p>The Sound Blaster card and PC speaker are enabled by default; that\u2019s the reason for their channels appearing in the mixer, and the <code>CDAUDIO</code> channel is added automatically whenever we mount a CD-ROM image (because it might also contain audio tracks).</p> <p>To adjust the volume of any mixer channel, we use the <code>mixer</code> command and pass in the channel\u2019s name as the first argument, and the volume expressed as a percentage value as the second. So, to raise the volume of the <code>SB</code> channel to 500%, we need to execute the following:</p> <pre><code>mixer sb 500\n</code></pre> <p>By default, the command prints out the new state of the mixer after the adjustment:</p> <p></p> <p>You can combine multiple mixer commands in a single line, e.g., in the below example we\u2019ll set the <code>OPL</code> channel\u2019s volume to 50%, and the <code>SB</code> channel\u2019s to 500%:</p> <pre><code>mixer opl 50 sb 500\n</code></pre> <p>You can run <code>mixer /?</code> to see the full list of available mixer commands.</p> <p>Do we need to perform these mixer adjustments manually every single time before running the game? Of course not; we can simply include them in our <code>[autoexec]</code> section. The extra <code>/noshow</code> argument prevents the mixer from displaying its current state; there\u2019s no need for that in our automated startup script.</p> <pre><code>[autoexec]\nimgmount D \"cd/cdrom1.iso\" -t iso\nc:\ncd sky\nmixer opl 50 sb 500 /noshow\nsky\n</code></pre>"},{"location":"getting-started/beneath-a-steel-sky/#changing-the-emulated-sound-blaster-model","title":"Changing the emulated Sound Blaster model","text":"<p>DOSBox emulates the Sound Blaster 16 by default. This card can emulate all earlier Sound Blaster models and offers the widest compatibility with DOS games.</p> <p>But back in the day, there were more Sound Blaster variants and clones you could shake a stick at, many of them having quite different default volume levels. We simply don\u2019t know what particular model the developers used, so it\u2019s worth experimenting with a few different ones. Let\u2019s start with a first-revision Sound Blaster Pro! Add the following snippet to your config:</p> <pre><code>[sblaster]\nsbtype = sbpro1\n</code></pre> <p>We want to hear how the Sound Blaster Pro 1 sounds with the default, unaltered volume levels, so make sure to comment out the previously added <code>mixer</code> command in the <code>[autoexec]</code> section by prefixing it with a <code>#</code> character (Shift+3 on the US keyboard layout):</p> <pre><code>[autoexec]\nimgmount D \"cd/cdrom1.iso\" -t iso\nc:\ncd sky\n#mixer opl 50 sb 500 /noshow\nsky\n</code></pre> <p>It seems this simple change alone does the trick; now the speech can be heard clearly over the music and the overall volume level is good too! Of course, you can still fine-tune the individual channel volumes with the <code>mixer</code> command if you wish to do so.</p>"},{"location":"getting-started/beneath-a-steel-sky/#disabling-the-sound-blaster-mixer","title":"Disabling the Sound Blaster mixer","text":"<p>Another option we can try is not letting the game mess around with the OPL and digital audio volumes. Starting from the Sound Blaster Pro, programs can alter the volume levels of the Sound Blaster mixer, but we can disallow that by turning off the <code>sbmixer</code> setting. Comment out the <code>sbtype</code> setting because we want to experiment with our default Sound Blaster 16 model, and leave the <code>mixer</code> command in the <code>[autoexec]</code> section commented out too, of course.</p> <pre><code>[sblaster]\n#sbtype = sbpro1\nsbmixer = off\n</code></pre> <p>Well, that\u2019s another way of fixing the issue; the volume levels are now perfect!</p> <p>Warning</p> <p>Not letting a game adjust volume levels can sometimes backfire, e.g., in a game that intelligently lowers the OPL music level whenever speech is playing. But it\u2019s worth a shot; quite a few games benefit from wrestling the control from them and putting the mixer into \u201cmanual mode\u201d.</p>"},{"location":"getting-started/beneath-a-steel-sky/#adjusting-the-emulated-cpu-speed","title":"Adjusting the emulated CPU speed","text":"<p>Okay, we\u2019re going to do a little experiment next!</p> <p>In the opening scene, keep pressing the left mouse button repeatedly on the door, about two times per second, to keep starting and then stopping the speech. You\u2019ll very likely hear audio stuttering and dropouts, ranging from subtle to quite severe, depending on how powerful your computer is. Also, if you did watch the intro video (which I told you to skip for now), you\u2019d hear similar random audio stutterings from time to time.</p> <p>What\u2019s happening here? Well, DOS gaming spans almost two decades, and there were lots of different CPUs in use during that period, all having wildly different performance, or clock speeds. DOSBox doesn\u2019t emulate any specific CPU but a \u201cgeneric\u201d one. So how does it know at what speed to run a particular game then?</p> <p>It doesn\u2019t.</p> <p>To explain what\u2019s going on, we\u2019ll need to understand a few technical details. It won\u2019t hurt too much, I promise!</p>"},{"location":"getting-started/beneath-a-steel-sky/#real-and-protected-mode","title":"Real and protected mode","text":"<p>DOS games can be divided into two categories: older games, and newer games (who would\u2019ve guessed?) Older games released before about 1993 use something called real mode, while newer games released from 1993 onwards use protected mode. The important distinction here is that most CPU-hungry games are protected mode games (e.g., FPS games and flight simulators), while older pre-1993 real mode games generally have much less demanding performance requirements. Figuring out what exact CPU speed a particular game needs is almost impossible at the emulator level, but detecting whether a game uses real or protected mode is trivial. Therefore, DOSBox does the following automatic speed calibration by default:</p> <ul> <li> <p>For real mode games, it defaults to emulating 3000 CPU instructions   per millisecond.</p> </li> <li> <p>For protected mode games, it emulates as many CPU instructions as it can   per millisecond.</p> </li> </ul> <p>The reasoning here is that older games are often sensitive to CPU speed; they might run too fast or misbehave if the CPU is too performant, hence the more conservative setting. Newer, more demanding games, however, benefit from the extra speed advantage and can generally handle faster processors without negative side effects.</p> <p>While this approach generally gets all games running, manual tweaking of the emulated CPU speed is often required to make any particular game run smoothly. Protected mode games running at the maximum emulable CPU speed are particularly problematic because there might not be enough power left for smooth, glitch-free audio emulation. There\u2019s zero point in emulating a faster CPU than what the game needs as all that extra work could be put to better use\u2014such as smoother audio emulation.</p> <p>Beyond a Steel Sky is a protected mode game, but how we do know that? Let\u2019s comment out the last <code>sky</code> command in the <code>[autoexec]</code> section to prevent the game from auto-starting, then launch DOSBox Staging in windowed mode. DOSBox itself always starts in real mode, and let\u2019s take a look at the text in the DOSBox window\u2019s title bar! It starts with the following:</p> <pre><code>DOSBOX - 3000 cycles/ms\n</code></pre> <p>Remember what we learned earlier: in real mode, DOSBox defaults to emulating 3000 CPU instructions, or cycles, per millisecond. The text in the title bar tells us the current cycles value, so indeed, we must be running in real mode now!</p> <p>Now start the game with the <code>sky</code> command and keep your eyes peeled on the title bar. The text will soon change to the following:</p> <pre><code>SKY - max 100%\n</code></pre> <p><code>SKY</code> is the name of the executable that\u2019s running, and what do we see after that? <code>max 100%</code>! That\u2019s the tell-tale sign of a protected mode game because, as mentioned, DOSBox tries to emulate the fastest CPU it can in protected mode.</p> <p>And that\u2019s the crux of the problem\u2014there\u2019s not enough horsepower left to emulate the time-critical audio output without stuttering and glitches. The solution is kind of obvious: instead of letting DOSBox run amok with the CPU emulation, we\u2019ll restrict it to a reasonable speed.</p> <p>We do that by specifying the number of CPU instructions, or cycles, to emulate per millisecond with the following config snippet:</p> <pre><code>[cpu]\ncycles = 12000\n</code></pre> <p>Restart DOSBox Staging and do the \u201cdoor test\u201d again. All the audio glitches are now gone! Well done, time for a beer (or your beverage of choice)!  </p> <p>Real and protected mode</p> <p>In very simple terms, real mode is a programming model that uses the legacy 16-bit mode of an Intel 386 or later CPU, while protected mode takes full advantage of its capabilities and runs in 32-bit mode. Protected mode is the real deal, but it couldn\u2019t be universally utilised until 386 or better CPUs had gained widespread adoption. That happened around the year 1993; games released from thereon use protected mode almost exclusively.</p> <p>You can easily spot protected mode games by the presence of so-called DOS extenders in their main game directories. <code>DOS4GW.EXE</code>, <code>PMODEW.EXE</code>, and <code>CWSDPMI.EXE</code> were the most popular ones.</p> <p>But you don\u2019t need to worry about all that detail as DOSBox will indicate with 100% accuracy whether a game runs in real or protected mode. Just set <code>cycles</code> to <code>auto</code>, then watch the title bar of the DOSBox Staging window while running the game.</p>"},{"location":"getting-started/beneath-a-steel-sky/#finding-the-correct-speed-for-a-game","title":"Finding the correct speed for a game","text":"<p>Ok, so why 12\u2009000 and not any other number? The game\u2019s manual states that a 386 or better processor is required. Indeed, the game works fine at 6000 cycles which approximates a 386DX CPU running at 33 MHz, but the loading times are a bit on the slow side. Setting cycles to 12\u2009000\u2014which roughly corresponds to a 486DX2/66 with \u201cturbo mode\u201d off, running at 33 MHz\u2014speeds up the loading considerably while not causing any negative side effects. This is not surprising as the DX2/66 was one of the most popular CPUs in the 1990s for gaming. This is what Wikipedia says about it:</p> <p>The i486DX2-66 was a very popular processor for video game enthusiasts in the early to mid-90s. Often coupled with 4 to 8 MB of RAM and a VLB video card, this CPU was capable of playing virtually every game title available for years after its release, right up to the end of the MS-DOS game era, making it a \u201csweet spot\u201d in terms of CPU performance and longevity.</p> <p>The following table gives you reasonable rough cycles values for the most popular processors:</p> Emulated CPU MHz MIPS Approx. cycles 8088 4.77 ~0.3 300 286 8 ~0.7 700 286 12 ~1.5 1500 386SX 20 ~3 3000 386DX 33 ~6 6000 486DX 33 ~12 12\u2009000 486DX2 66 ~25 25\u2009000 Intel Pentium 90 ~50 50\u2009000 Intel Pentium MMX 166 ~100 100\u2009000 Intel Pentium II 300 ~200 200\u2009000 <p>Always treat these values only as starting points; as explained previously, accurately emulating the speed of any given processor is not possible due to the \u201cabstract\u201d nature of DOSBox\u2019s CPU emulation approach. But from a practical point of view, this does not matter; you just need to find the optimal cycles value the game works well with.</p> <p>You can fine-tune the cycles setting while playing the game with the Ctrl+F11 and Ctrl+F12 shortcuts (Cmd+F11 and Cmd+F12 on the Mac); these will increase the cycles value by 10%, or decrease it by 20%, respectively. Once you\u2019ve arrived at a good setting, just update your config according to the cycles value displayed in the DOSBox Staging window\u2019s title bar.</p> <p>Always try to find the minimum cycles value for each game that gives you an adequate performance to conserve host CPU power and reduce the likelihood of audio glitches\u2014overdoing it only makes things worse. Finally, here\u2019s a list of CPU speed sensitive games that should give you further tips and pointers.</p>"},{"location":"getting-started/beneath-a-steel-sky/#setting-up-roland-mt-32-sound","title":"Setting up Roland MT-32 sound","text":""},{"location":"getting-started/beneath-a-steel-sky/#installing-the-mt-32-roms","title":"Installing the MT-32 ROMs","text":"<p>You might have noticed the game offers a sound option called \u201cRoland\u201d in its setup utility. What this refers to is the Roland MT-32 family of MIDI sound modules. These were external devices you could connect to your PC that offered far more realistic and higher-quality music than any Sound Blaster or AdLib sound cards were capable of. They were the Cadillacs of DOS gaming audio for a while, and they still sound pretty good even by today\u2019s standards.</p> <p>DOSBox Staging can emulate all common variants of the MT-32 family, but it requires ROM dumps of the original hardware devices to do so. So first we need to download these ROMs from here as a ZIP package, then copy the contents of the archive into our designated MT\u201132 ROM folder:</p> Windows <code>C:\\Users\\%USERNAME%\\AppData\\Local\\DOSBox\\mt32-roms\\</code> macOS <code>~/Library/Preferences/DOSBox/mt32-roms/</code> Linux <code>~/.config/dosbox/mt32-roms/</code> <p>If the above download link doesn\u2019t work, search for \u201cmt32 roms mame\u201d and \u201ccm32l roms mame\u201d in your favourite search engine and you\u2019ll figure out the rest\u2026</p> <p>After you\u2019ve copied the ROM files into the appropriate location for your platform, start up DOSBox Staging again and run the <code>mixer /listmidi</code> command. This will verify your MT-32 ROM files and print a <code>y</code> character below the MT-32 ROM versions that have been successfully detected. The green <code>y</code> character indicates the currently selected MT-32 version. You should get an output similar to this:</p> <p></p>"},{"location":"getting-started/beneath-a-steel-sky/#selecting-the-mt-32-version","title":"Selecting the MT-32 version","text":"<p>As you might have guessed already, you can tell DOSBox Staging to emulate an MT-32 model of a specific revision; you can read about that on our wiki. But in practice, these two models will cover 99% of your gaming needs:</p> <code>cm32l</code> Unless a specific MT-32 model is requested, DOSBox Staging emulates the   Roland CM-32L by default which gives you the best overall compatibility.   This is a 2nd generation MT-32 with 32 additional sound effects that many   games make good use of. Certain studios, such as LucasArts, tended to favour   the CM-32L, so their games sound a little better on this module. <code>mt32_old</code> Certain older games, most notably the early Sierra adventure catalogue,   absolutely need a 1st generation MT-32; they will refuse to work   correctly on any other model. For those games, use <code>mt32_old</code>. <p>To enable MT-32 emulation and specify the model you wish to use, insert the following into your config:</p> <pre><code>[midi]\nmididevice = mt32\n[mt32]\nmodel = cm32l\n</code></pre> <p>How do you figure out which MT-32 model to use for a particular game? Well, you can\u2019t do that easily without a lot of research and trial and error, but thanks to the tireless work of certain prestigious individuals, you can simply refer to the list of MT-32-compatible computer games that tells you the correct model to use for most well-known games.</p> <p>Let\u2019s consult the list and see what it says about Beneath a Steel Sky!</p> <p>Requires CM-series/LAPC-I for proper MT-32 output. Buffer overflows on MT-32 \u2018old\u2019. Combined MT-32/SB output only possible using ScummVM</p> <p>Well, the list knows best, so we\u2019ll use the CM-32L for our game (as we\u2019ve done in the above config example).</p> <p>To appreciate the difference, you can try running the game with the <code>mt32_old</code> model after you\u2019ve had it successfully set up for the <code>cm32l</code>. You\u2019ll find the sound effects in the opening scene sound a lot better on the CM-32L.</p>"},{"location":"getting-started/beneath-a-steel-sky/#configuring-the-game-for-mt-32","title":"Configuring the game for MT-32","text":"<p>So now DOSBox Staging emulates the CM-32L, but we also need to set up the game for \u201cRoland sound\u201d. (They could\u2019ve been a bit more precise and told us the game works best with the CM-32L, couldn\u2019t they? It\u2019s not even mentioned in the manual!)</p> <p>Many games have a dedicated setup utility in the same directory where the main game executable resides. This is usually called <code>SETUP.EXE</code>, <code>SETSOUND.EXE</code>, <code>SOUND.EXE</code>, <code>SOUND.BAT</code>, or something similar. There is no standard, every game is different. You\u2019ll need to poke around a bit; a good starting point is to list all executables in the main game folder with the <code>dir *.exe</code>, <code>dir *.com</code>, and <code>dir *.bat</code> commands and attempt running the most promising-looking ones. The manual might also offer some helpful pointers, and so can the odd text file (<code>.TXT</code> extension) in the installation directory or the root directory of the CD (if the game came on a CD-ROM). Certain games have a combined installer and setup utility usually called <code>INSTALL.EXE</code> or <code>SETUP.EXE</code> which can be slightly disorienting for people with modern sensibilities. You\u2019ll get used to it.</p> <p>This particular game turns things up a notch and does not copy the installer/setup utility into <code>C:\\SKY</code> as one would rightly expect. To reconfigure the game, you need to run <code>INSTALL.EXE</code> from the CD, so from the D drive (I\u2019ve told you\u2014setting up the game itself is part of the adventure!)</p> <p>So let\u2019s do that. As we\u2019ve already installed the game on our C drive, we\u2019ll need to press Esc instead of Enter in the first Path Selection Window. Not exactly intuitive, but whatever. Now we\u2019re in the Setup Menu screen where we can change the language and configure the sound options. Select Roland sound, then press the Exit Install and Save Setup buttons to save your settings (don\u2019t even get me started\u2026)</p> <p>Okay, now the moment of truth: start the game with the <code>sky</code> command. If nothing went sideways, we should hear the much-improved, glorious MT-32 soundtrack! Now we\u2019re cooking with gas!</p> <p>So let\u2019s inspect our favourite door one more time\u2014hey, where did the voice-over go?! Yeah\u2026 you\u2019ve probably glossed over this little detail in the tip from the MT-32 wiki page:</p> <p>Combined MT-32/SB output only possible using ScummVM</p> <p>What this means for us ordinary mortals is that in the original game you can either use MT-32 for music and sound effects, and you get no speech; or you can use Sound Blaster for music, sound effects, and speech. MT-32 music and sound effects with speech via the Sound Blaster\u2014that\u2019s a no-go.</p> <p>The game has just taught us an important life lesson: you can\u2019t have everything, especially not in the world of older DOS games. You\u2019ll have to pick what you value most: better music and only subtitles, or full voice-acting with a slightly worse soundtrack. I\u2019m opting for the latter, and remember, we can always improve the Sound Blaster / AdLib music by adding chorus and reverb. This will get us a little bit closer to the MT-32 soundtrack:</p> <pre><code>[mixer]\nreverb = large\nchorus = strong\n</code></pre>"},{"location":"getting-started/beneath-a-steel-sky/#aspect-ratio-correction","title":"Aspect ratio correction","text":"<p>We\u2019re on a roll here; the game seems to provide us with endless education opportunities. We\u2019ll divert our eyes (ears?) from the audio to the graphics next!</p> <p>If you\u2019ve checked out the comic book included with the game (and you definitely should!) and you have a keen eye for detail, you might have noticed that the images in the intro sequence, which are scanned from the comics, appear vertically stretched on-screen. In fact, they appear exactly 20% taller than they should, which means the artwork was scanned using square pixels, then the stretching happens because of the 1:1.2 pixel aspect ratio of the 320\u00d7200 VGA screen mode (you might want to revisit the detailed explanation to refresh your memory).</p> <p></p>    Left: Screenshot from the intro with aspect ratio correction disabled (square pixels)   Right: The original image from the comic book included with the game    <p>As we\u2019ve learnt previously, DOSBox Staging enables aspect ratio correction by default to make 320\u00d7200 graphics appear exactly as they would on a 4:3 aspect ratio VGA monitor, which requires pixels to be drawn 20% taller. This is the most sensible default as aspect ratio correction is absolutely needed for the vast majority of DOS games to look correct, but there are exceptions\u2014this game is one of those rare cases. We need to disable aspect ratio correction for such games. With aspect ratio correction disabled, we\u2019ll always get square pixels, no matter what (1:1 pixel aspect ratio).</p> <p>That\u2019s quite easy to do, and we\u2019re also setting the viewport resolution to 4x scaling, effectively, because the game would appear too blocky when fit to fullscreen:</p> <pre><code>[render]\naspect = off\nviewport_resolution = 1280x800\n</code></pre> <p></p> <p>Beneath a Steel Sky with 1280\u00d7800 viewport resolution restriction and aspect ratio correction disabled   </p> <p></p> <p>Beneath a Steel Sky \u2014 Well, we won\u2019t escape this way\u2026   </p> <p>Of course, this would\u2019ve been a very misguided effort if it had only fixed the intro graphics but not the in-game visuals. Fortunately, it turns out both the intro and the in-game content had been drawn assuming square pixels. For example, note how the floppy icon looks like a tallish rectangle with aspect ratio correction enabled; that\u2019s wrong, floppies should appear as perfect squares. Human figures and circular objects would also appear slightly elongated vertically with aspect ratio correction enabled. Ultimately, we know the game was developed by Revolution, a European studio, and they also released the game for PAL Amigas that have square pixels. We also know that Revolution was very fond of the Amiga, and thus can be considered an Amiga-first developer. For such games, disabling aspect ratio correction is almost always the correct answer.</p> <p>So, the rules of thumb:</p> <p><code>aspect = on</code></p> <ul> <li> <p>For most games where DOS was the leading platform. This is the DOSBox   Staging default, and it ensures the overwhelming majority of DOS games   appear correctly out of the box.</p> </li> <li> <p>For games where the leading platform was the Amiga or Atari ST, but the   game was developed by a North American studio for the NTSC standard (or the   actual work was performed by a European studio, but it was commissioned   by North Americans, and the game was primarily intended for the NTSC-only   North American market).</p> </li> </ul> <p><code>aspect = off</code></p> <ul> <li>For most games developed by European studios where the Amiga   or Atari ST was the leading platform.</li> </ul> <p>Here\u2019s a non-exclusive list of the most important Amiga-first European studios:</p> <p>Bitmap Brothers, Bullfrog, Coktel Vision, Core Design, DMA Design, Delphine, Digital Illusions, Firebird, Horror Soft / Adventure Soft, Infogrames, Level 9, Magnetic Scrolls, Ocean, Psygnosis, Revolution, Sensible Software, Silmarils, Team 17, Thalamus, Thalion, Ubisoft</p> <p>From squares to rectangles</p> <p>For the vast majority of computer games from the 80s and 90s featuring 2D graphics, the art was created once for the leading platform which was then reused in the various other platform conversions. It was just not economical to draw the graphics multiple times in different aspect ratios and resolutions, hence this was done extremely rarely.</p> <p>We explained earlier that CRT monitors in the DOS era had a 4:3 aspect ratio, so in 320\u00d7200 mode the pixels had to be 20% taller for the image to completely fill the screen. DOSBox Staging does this aspect ratio correction by default which results in games primarily developed for DOS PCs assuming 1:1.2 pixel aspect ratio to look correct (as the artist intended).</p> <p>But what about games where the leading platform was the Amiga or the Atari ST, and the game was developed by a European studio? The analog TV standard in Europe was PAL, therefore Amigas sold in Europe were PAL machines that had square pixels in the 320\u00d7256 screen mode, the resolution most commonly used by PAL Amiga games. So what these European studios usually did was to draw the art assuming square pixels, but using only a 320\u00d7200 portion of the 320\u00d7256 total available area. On PAL Amigas the art appeared in the correct aspect ratio, but letterboxed; on NTSC Amigas and DOS PCs that had the 320\u00d7200 low-res screen mode, the art filled the whole screen but appeared slightly stretched vertically (by 20%). No one seemed to complain about this, and they saved a lot of money by not having to draw the art twice, so this became a common practice.</p> <p>However, now you have the option to enjoy these games in their correct aspect ratio, as per the artists\u2019 original intention by simply disabling DOSBox Staging\u2019s default aspect ratio correction.</p> <p>Don\u2019t trust the circles!</p> <p>Even keener observers might notice the image from the intro on the left features a circle that only appears perfect with aspect ratio correction enabled, in which case the image from the comics is stretched. But with aspect ratio correction disabled (as shown above), the circle appears to be a squashed oval, but the image from the comics looks perfect.</p> <p>The explanation is simple: the person who drew the circle around the scanned image did it assuming 1:1.2 pixel aspect ratio, so it looked like a perfect circle to him on his PC VGA monitor.</p> <p>That\u2019s a common theme: some games end up with assets added to them during the porting process, which can sometimes result in mixed aspect ratio assets in a single game. Sometimes it\u2019s just impossible to make the game appear correctly using a single fixed pixel aspect ratio, especially if such mixed aspect ratio assets are being displayed on screen at the same time.</p> <p>Generally, you cannot trust the circles. Sometimes they will appear perfect when the correct aspect ratio is used, sometimes they won\u2019t. It\u2019s much more reliable to judge aspect ratio correctness by looking at common objects, human bodies, and human faces.</p>"},{"location":"getting-started/beneath-a-steel-sky/#final-configuration","title":"Final configuration","text":"<p>Putting it all together, this is our final config:</p> <pre><code>[cpu]\ncycles = 12000\n[sdl]\nfullscreen = on\nviewport_resolution = 1280x800\n[render]\naspect = off\n# uncomment for VGA CRT emulation on a 4K display\n#glshader = crt/aperture\n[sblaster]\nsbmixer = off\n[midi]\nmididevice = mt32\n[mt32]\nmodel = cm32l\n[mixer]\nreverb = large\nchorus = strong\n[autoexec]\nimgmount d \"cd/cdrom1.iso\" -t iso\nc:\ncd sky\nsky\nexit\n</code></pre> <p>With this config, you can switch between Roland MT-32 and Sound Blaster / AdLib sound at will by only reconfiguring the game via <code>INSTALL.EXE</code>\u2014you don\u2019t need to make any further changes to the DOSBox config. In case you\u2019re wondering, enabling reverb and chorus does not add these effects to the MT-32 output by default; that\u2019s undesirable as the MT-32 has its own built-in reverb, so DOSBox Staging is intelligent enough not to apply double reverb to it.</p>"},{"location":"getting-started/dark-forces/","title":"Star Wars: Dark Forces","text":"<p>We will continue our trend of featuring a disproportionate amount of LucasArts games in our guide. The game we\u2019ll tackle next is the Star Wars: Dark Forces demo from 1995, an example of the first-person shooter (FPS) genre, featuring fast software-rendered 3D graphics.</p>"},{"location":"getting-started/dark-forces/#installing-the-game","title":"Installing the game","text":"<p>As per our usual routine, we\u2019ll create a new folder in <code>DOS Games</code> called <code>Dark Forces</code>, and the <code>drives/c</code> subfolder in it. The game demo comes in three ZIP archives, dforces1.zip, dforces2.zip, and dforces3.zip; we\u2019ll need to copy their contents to our virtual C drive. Make sure to download the manual as well.</p> <p>There\u2019s a <code>README.TXT</code> included with the demo, it\u2019s recommended to read at least the installation and the keyboard shortcuts sections (use <code>more README.TXT</code>). The instructions tell us exactly what we need to do (this is why you should always check out the included text files):</p> <pre><code>I) INSTRUCTIONS FOR INSTALLING AND RUNNING DARK FORCES DEMO:\n\n1. Create a directory for the demo on your hard drive.\n   (ex. C:\\DFDEMO)\n\n2. Extract the demo using PKUNZIP.EXE into the demo\n   directory.  If you have downloaded one or both of\n   the cutscene files, then unzip them as well.\n\n3. From the demo directory, type \"demo\" and  RETURN. This will\n   bring you to the install menu. From the install menu, follow\n   the on-screen instructions. Press \"I\" to install. This will\n   take you through through the sound card setup program. When\n   the install is finished it will bring you to the options\n   menu. From there you type \"1\" to run Dark Forces. In the\n   future, in order to get to the options menu, you should\n   type \"demo\" from the your demo directory.\n</code></pre> <p>We actually don\u2019t need that <code>DFDEMO</code> folder, and we\u2019ve already extracted the contents of the three ZIP archives to our root directory on drive C, so just follow the instructions in step 3. Choose the Express Setup option in the sound configuration utility by pressing E, and the rest should be straightforward. The setup program will detect the Sound Blaster 16 correctly and will even play some test sounds.</p> <p>After the setup has been completed, start the game by running <code>demo</code> again and then pressing the 1 key.</p> <p></p> <p>Star Wars: Dark Forces \u2014 Opening scene   </p>"},{"location":"getting-started/dark-forces/#autotype","title":"Autotype","text":"<p>Having to press the 1 key every time we start the game is not the end of the world, but it\u2019s not great either. Luckily, there\u2019s a way to automate that; the handy <code>autotype</code> DOSBox Staging command can simulate keypresses as implied by its name. This is what we need to put into our <code>[autoexec]</code> section to start the game without manual intervention:</p> <pre><code>[autoexec]\nc:\nautotype -w 0.5 1\ndemo\nexit\n</code></pre> <p>The first <code>-w 0.5</code> argument of the <code>autotype</code> command specifies an initial 0.5 second wait time before the \u201cauto-typing\u201d begins. This is followed by the <code>1</code> argument which will simulate pressing the 1 key.</p> <p>That\u2019s it! It\u2019s a simple but very useful feature. Run <code>autotype /?</code> to see the full list of available options and check out the list of AUTOTYPE candidates on our wiki for assorted real-life examples.</p>"},{"location":"getting-started/dark-forces/#display-refresh-rate","title":"Display refresh rate","text":"<p>Dark Forces uses the 320\u00d7200 / 256-colour VGA screen mode, just like the majority of DOS games from the 90s. This mode uses a fixed 70 Hz screen refresh rate, so if your emulated CPU is fast enough, you can get 70 FPS out of the game.</p> <p>But there\u2019s a problem: most modern non-variable refresh rate flat screens work at fixed 60 Hz. Luckily, DOSBox Staging intelligently times and drops frames if there\u2019s a mismatch between the refresh rate of the emulated graphics card and the actual refresh rate of your physical monitor. In most cases, this works fine out of the box without you needing to configure anything.</p> <p>However, even though DOSBox Staging is trying to do its best in such situations, refresh rates will always result in some visible unevenness of motion. This is especially noticeable in games that feature smooth scrolling (e.g., shoot\u2019em up games, platformers, and pinball games), and in fast-paced 3D games, such as Dark Forces.</p> <p>To achieve smoother motion, we have two options:</p> <ul> <li> <p>Using a variable-refresh rate (VRR) monitor \u2014 Nvidia G-Sync, AMD   FreeSync, VESA AdaptiveSync, and Apple ProMotion certified displays all   fall into this category. Any monitor that can continuously vary the   refresh rate from about 59 to 71 Hz should do the job. DOSBox Staging   automatically takes advantage of such displays by default.</p> </li> <li> <p>Using specific fixed refresh rates on non-VRR monitors \u2014 Even if   you\u2019re not a lucky owner of a VRR display, your monitor might support a   fixed 70 Hz refresh rate if you create a custom screen mode for it. This   is highly monitor dependent, but there\u2019s no harm in trying it out.</p> </li> </ul> <p>Note, however, that depending on the type of game, the 60/70 Hz mismatch might not matter much or at all. For instance, most adventure, strategy, and role-playing games rarely have fast-paced graphics; they generally only update the screen in the low 5-20 FPS range. Running the monitor at 70 Hz results in very little noticeable improvement with these games.</p> <p>Another important consideration is that most pre-VGA games don\u2019t feature smooth movement in their graphics, so the general unevenness of motion masks the slight judder resulting from the 60/70 Hz mismatch.</p> <p>For reference, these are the refresh rates of all emulated graphics cards:</p> Graphics adapter Refresh rate SVGA and VESA 70 Hz or higher \u2014 640\u00d7480 or higher extended and VESA modes VGA 60 Hz \u2014 640\u00d7480 standard mode only70 Hz \u2014 all other standard modes CGA, PCjr, Tandy, EGA 60 Hz Hercules 50 Hz <p>Creating custom 60 and 70 Hz screen modes</p> <p>\u201cCustom resolution\u201d is a bit of a misnomer because what we\u2019re after is creating a new screen mode that uses your monitor\u2019s native resolution, but with a custom refresh rate.</p> <p>You can create such custom resolutions using the Nvidia Control Panel or with the Custom Resolution Utility (CRU) on Windows. You\u2019ll probably need to enable CVT reduced blanking (CVT-RB or CVT-RBv2) to go up to 70 Hz. For the best results, it\u2019s recommended to use the exact fractional 59.713 Hz and 70.086 Hz refresh rates for the nominal \u201c60 Hz\u201d and \u201c70 Hz\u201d DOS rates, respectively.</p> <p>The drawback of this approach is that you need to set the appropriate custom resolution before starting DOSBox Staging, and if a game switches between different refresh rates, well, you\u2019re out of luck\u2014these games can only work 100% correctly either on a true VRR display or a real old-school CRT monitor. However, most games only use a single fixed refresh rate, which is usually the standard 70 Hz VGA rate, so this technique is still very practical.</p>"},{"location":"getting-started/dark-forces/#vertical-syncing","title":"Vertical syncing","text":"<p>Dark Forces synchronises its screen updates to the refresh rate of the emulated VGA card, which is always 70 Hz. This is hardcoded behaviour that cannot be disabled in the game\u2019s configuration.</p> <p>DOSBox Staging itself also uses vertical syncing by default to synchronise updating the emulated image to the vertical refresh rate of your physical monitor. Without DOSBox-level vsync, fast-paced games such as this one would exhibit a lot of tearing. This is important to understand: to get zero tearing, vertical syncing must be happening both in the game and at the DOSBox level!</p> <p>Conversely, DOSBox-level vsync only means that the emulated image is output to your physical monitor without flickering and tearing; the emulated DOS game itself might or might not use vertical syncing, and thus might or might not produce tearing artifacts of its own (these artifacts are present when running the game on real hardware too\u2014there\u2019s nothing we can do about them).</p> <p>You don\u2019t have control over the vertical syncing behaviour in most DOS games. For example, Commander Keen 4\u20136, Doom, and many other FPS games have hardcoded vsync with a fixed 35 FPS cap. These games were programmed with fixed refresh rates in mind from the ground up; trying to disable the vsync or altering the FPS cap would completely break them (but the good news is you can\u2019t do that anyway).</p> <p>To recap, the following variations are possible when it comes to vsync:</p> Game uses vsync? DOSBox-level vsync enabled? Result yes yes no tearing no yes some tearing; also present on real hardware yes no bad tearing (in fast-paced games) no no very bad double-tearing (in fast-paced games) <p>As you can see, there is no point in disabling vsync in DOSBox itself, and even with DOSBox vsync enabled you might still get tearing in some games, but that\u2019s just how the games were coded. We can\u2019t \u201cfix\u201d that at the emulator level; that would require making changes to the games\u2019 code. On the other hand, that\u2019s the \u201cauthentic DOS experience\u201d for you! </p>"},{"location":"getting-started/dark-forces/#setting-the-emulated-cpu-speed","title":"Setting the emulated CPU speed","text":"<p>Hardware-accelerated 3D graphics only became widespread in the second half of the 90s after the end of the DOS era, so most DOS games only use software rendering. Dark Forces is no exception, which means your emulated CPU needs to be fast enough to reach the 70 FPS maximum the game supports.</p> <p>The game prints out the familiar message of the DOS/4GW DOS extender at startup, which means this is a protected mode game:</p> <pre><code>DOS/4GW Protected Mode Run-Time  Version 1.95\nCopyright (c) Rational Systems, Inc. 1990-1993\n</code></pre> <p>As we\u2019ve learnt, protected mode games default to using all available CPU power. While this will most likely help achieve a stable 70 FPS (if your computer is powerful enough), running the CPU at maximum speed could starve the audio emulation, leading to audible glitches, clicks, and pops.</p> <p>To avoid such issues, it\u2019s much preferable to emulate a CPU that is powerful enough to handle 70 FPS but not more. One way to come up with a good cycles number is to start the game with a relatively low cycles setting, say 10\u2009000, then keep increasing it with the Ctrl+F12 shortcut (Cmd+F12 on the Mac) while playing to arrive at the lowest value that results in adequate performance. As a reminder, you can decrease the current cycles value too with the Ctrl+F11 (Cmd+F11) shortcut.</p> <p>So let\u2019s add the following to our config:</p> <pre><code>[cpu]\ncycles = 10000\n</code></pre> <p>Start the game and hold the Left or Right key to keep turning around, then increase the cycles value until the motion becomes smooth (again, unless you\u2019re using a VRR monitor or a fixed 70 Hz refresh rate, it will never become completely smooth). Somewhere around 50\u2009000 cycles seems to do the trick, which roughly corresponds to a Pentium 90 based on our table of common processors.</p> <p>So we\u2019ll go with that setting. You might need to increase this if later levels are more demanding on the CPU, but this is a good starting point:</p> <pre><code>[cpu]\ncycles = 50000\n</code></pre> <p>Running out of steam</p> <p>As you keep increasing the fixed cycles value, the audio will start breaking up, and the motion will become very stuttery after a certain point. This means you\u2019re trying to emulate a faster CPU than your computer can handle. If you\u2019re on a less powerful machine, this unfortunately can happen before reaching the minimum cycles value necessary for a smooth and stable 70 FPS.</p> <p>You have only two options in this situation: live with a lower cycles setting that results in less than 70 FPS, or buy a more powerful computer with a faster processor that can handle higher cycles values.</p> <p>Also, make sure you\u2019re not running any other CPU-intensive programs at the same time in the background. Virus scanners, backup software, copying large files to USB storage, heavy network traffic, and even ordinary web browsers with many tabs open can chew up a significant part of your total CPU power. Certain popular chat programs can be very demanding on the CPU too, and, surprisingly, even innocent-looking stuff such as automatic wallpaper changers can have negative effects on the performance of DOSBox.</p> <p>As a general rule, it\u2019s best to close all other programs if you\u2019re encountering performance issues with DOSBox and try again. Just apply common sense and treat DOSBox as any other performance-intensive modern game.</p>"},{"location":"getting-started/dark-forces/#setting-up-general-midi-sound","title":"Setting up General MIDI sound","text":"<p>Our previous example game, Beneath A Steel Sky, supports the Roland MT-32 MIDI sound module to provide more realistic-sounding music than what the Sound Blaster\u2019s OPL synthesiser is capable of. Dark Forces, however, was composed for a newer family of MIDI sound modules that support the so-called General MIDI standard.</p> <p>DOSBox Staging comes with an integrated General MIDI compliant synthesiser called FluidSynth. Unlike the MT-32 emulation, FluidSynth does not attempt to mimic any specific hardware device but a very generic MIDI sound module. This sound module doesn\u2019t have any built-in sounds\u2014you need to load so-called SoundFont files (<code>.sf2</code> extension) into FluidSynth to get any sound out of it; these contain the instrument definitions and the sound data.</p> <p>You can read more about the history of MIDI in DOS gaming at the end of this section, but the short practical summary is as follows:</p> <ul> <li> <p>The Roland Sound Canvas SC-55 was the de-facto standard General MIDI sound   module until the very end of the DOS years (around 1997).</p> </li> <li> <p>DOSBox Staging does not emulate the SC-55 directly, but there are SoundFonts   you can load into FluidSynth that approximate the sound of the SC-55.</p> </li> </ul> <p>One extra detail is that Roland went a bit beyond the General MIDI standard in their Sound Canvas series; these modules actually support the GS standard, which is basically General MIDI plus some Roland-specific enhancements. Many games use these extra features, and while General MIDI compatible SoundFonts will work with them, for the best results it\u2019s recommended to use GS standard compatible ones.</p> <p>One such SoundFont is GeneralUser GS; download the latest version, then copy the SoundFont file with the <code>.sf2</code> extension into its designated folder:</p> Windows <code>C:\\Users\\%USERNAME%\\AppData\\Local\\DOSBox\\soundfonts\\</code> macOS <code>~/Library/Preferences/DOSBox/soundfonts/</code> Linux <code>~/.config/dosbox/soundfonts</code> <p>The next step is to configure DOSBox Staging to use this SoundFont for General MIDI playback. The name of the SoundFont might be slightly different if a new version has been released since the writing of this guide; make sure you use the correct filename for the <code>soundfont</code> setting.</p> <pre><code>[midi]\nmididevice = fluidsynth\n[fluidsynth]\nsoundfont = \"GeneralUser GS v1.471.sf2\"\n</code></pre> <p>The only thing left to do is to reconfigure the game to use General MIDI for music:</p> <ul> <li> <p>Comment out the <code>autotype</code> command in the <code>[autoexec]</code> section and restart   DOSBox.</p> </li> <li> <p>Press 3 in the startup menu to reconfigure the sound settings, then   C to do a custom setup.</p> </li> <li> <p>Enter the Advanced Menu (it\u2019s above Quit at the bottom).</p> </li> <li> <p>Select the General MIDI device for Music, and select the default <code>330</code>   value for the Port setting.</p> </li> <li> <p>The Digital Sound settings don\u2019t need changing as our Sound Blaster 16 has   been auto-detected correctly.</p> </li> </ul> <p>The final configuration should look like this:</p> <p></p> <p>Press Enter on the Test Music menu item and you should hear the start of the Imperial March playing with much more realistic instruments!</p> <p>How to drive a manual</p> <p>Note that if you try to use Detect in the Music section, the auto-detection will fail and the Music option will revert to None. This can happen with some setup utilities, therefore it\u2019s important to know that the port of the General MIDI device must be set to 330, should the auto-detection fail. This is sometimes called the MPU-401 port, MPU port, or just MIDI port.</p> <p>Similarly, most games can auto-detect the Sound Blaster settings, but sometimes you need to enter them manually. The default DOSBox settings are port (I/O address) 220, IRQ (interrupt) 7, and DMA channel 1.</p> <p>It\u2019s worth watching the whole intro at this point to appreciate how much more realistic the General MIDI rendition of this orchestral piece sounds compared to the OPL synth.</p> <p>Of course, you can always try other GM or GS compatible SoundFonts too\u2014that\u2019s the beauty of General MIDI! FluidR3_GS and Creative Labs 4M GM_4gmgsmt are good candidates as they sound fairly close to the SC-55 sound set. The list of recommended SoundFonts on our wiki should also give you some further pointers on which SoundFonts are worth trying and where to find them.</p> <p>Note that while some SoundFonts, such as GeneralUser GS, give you overall good results in most games, other SoundFonts might excel in a handful of titles and sound terrible in others. To give you an idea, here\u2019s how the intro music sounds on the original Roland SC-55 hardware versus a few different SoundFonts. As mentioned, GeneralUser GS and Creative 4GMGSMT are the closest in terms of overall balance and character, the rest are rather hit-and-miss. My advice: just pick one that gives you good overall results and stick with it.</p> <p>Further comparison recordings can be found on our wiki.</p> Roland SC-55 v1.21 (hardware)  Your browser does not support the <code>audio</code> element. GeneralUser GS  Your browser does not support the <code>audio</code> element. Creative 4GMGSMT  Your browser does not support the <code>audio</code> element. FluidR3  Your browser does not support the <code>audio</code> element. FatBoy  Your browser does not support the <code>audio</code> element. Arachno  Your browser does not support the <code>audio</code> element. <p>Turn it down, please!</p> <p>Some SoundFonts are way too loud; if you encounter such a SoundFont, you\u2019ll most likely want to lower the output level of FluidSynth. For example, to scale back the volume to 40%, use the <code>mixer fsynth 40</code> command. A few SoundFonts are extremely loud\u2014you need to turn the FluidSynth volume down to 10-20% to get usable levels. It\u2019s a mystery what the authors were thinking\u2026</p> <p>Roland MT-32 is not General MIDI</p> <p>Do not confuse the Roland MT-32 family of MIDI sound modules with General MIDI modules! Music composed for the MT-32 sounds utterly wrong on a General MIDI module, and vice versa. Yes, they both have \u201cMIDI\u201d in their names, but that only refers to the communication protocol. The MT-32 range of devices are fully programmable synthesisers and most games take advantage of their sound-shaping capabilities, while the General MIDI modules have much more modest synthesis capabilities, but feature more realistic-sounding real-world instruments (the soundtrack of Dark Forces showcases this very well\u2014you just can\u2019t get such realistic orchestral music out of an MT-32).</p> <p>Whenever you want to configure a new game for MIDI sound, you should consult the list of MT-32-compatible computer games to see if the game was originally composed for the MT-32 or a General MIDI device (typically the SC-55). The original game manuals very rarely give you this info, so you absolutely need this list that contains the hard-earned knowledge of many decades of research and testing.</p> <p>Quite confusingly, there\u2019s an alarmingly large list of games that falsely claim MT-32 compatibility in their setup utility, but they in fact require a General MIDI module to sound correct. Before you configure any game for MT-32 sound, you should definitely check the list of games that falsely claim MT-32 compatibility too, no matter what the game\u2019s manual says (quite often, the information contained therein is simply wrong).</p> <p>A brief history of MIDI in DOS gaming</p> <p>In the beginning, the iconic Roland MT-32 family of devices were the only MIDI sound modules available for DOS games that made realistic-sounding music a possibility. The original MT-32 was released in 1987, and its hegemony ended in 1991 with Roland unleashing its successor, the similarly iconic Roland Sound Canvas SC-55.</p> <p>The SC-55 was another pioneering effort that shaped DOS gaming history in significant ways: it was the world\u2019s first device to support the General MIDI standard and the GS standard (the latter being Roland\u2019s vendor-specific General MIDI extensions). MIDI in the broadest sense only defines a communication mechanism between MIDI-capable devices (e.g., a sound module and your computer), but remains silent on how the different instruments should sound. General MIDI (GM) remedied this with its 128 standard instrument definitions; for example, you can be sure that on any GM-compliant module instrument #1 is the Acoustic Grand Piano and instrument #36 is the Fretless Bass.</p> <p>This made interoperation between GM-compliant devices possible. In theory, you could use any General MIDI sound module with any GM-compliant game, and you would get music, and it would sound mostly correct. In practice, that \u201cmostly\u201d part is highly variable and it depends on the musical composition and the particular sound module in use. The thing is, most composers and gamers had the SC-55, establishing it as a de-facto standard (understandably, because it was the very first GM module). Other GM sound modules can render musical compositions written for the SC-55 unbalanced and weird-sounding, depending on how different their instruments sound compared to the \u201cstandard\u201d SC-55.</p> <p>Another thing that makes compatibility difficult to achieve is that the SC-55 supports not just the GM but also the GS standard, and many games make good use of certain GS-only features. This means that any other General MIDI module that claims \u201cSound Canvas compatibility\u201d also has to implement the GS standard in a manner that sounds very close to the SC-55, which is not always the case.</p>"},{"location":"getting-started/dark-forces/#dynamic-range-compression","title":"Dynamic range compression","text":"<p>If a game has loud music and you set the output level of your soundcard too high, you\u2019ll get rather unpleasant-sounding distortion and crackling on real hardware. DOSBox Staging has a dynamic range compressor on the master channel that automatically pulls the volume back on loud sounds to prevent such distortion from happening.</p> <p>You can test this by playing the game for a minute with the GeneralUser GS SoundFont. You might notice a slight \u201cpumping\u201d as the compressor pulls the volume back on loud sound effects; this dips the volume level of the background music as well.</p> <p>To hear the distortion caused by the loud sounds clearly, disable the master compressor:</p> <pre><code>[mixer]\ncompressor = off\n</code></pre> <p>Overall, the compressor does a good job of preventing audible distortion up to a certain point, and most users should not think much about it; it just works. But if the master channel is overdriven heavily, the pumping artifacts would be rather distracting, so in that case, it\u2019s better to lower the master volume with the <code>mixer</code> command (e.g., <code>mixer master 50</code> to set the master volume to 50%). People who are after the best audio quality should also prefer lowering the master volume rather than relying on the compressor.</p> <p>The sound output of Dark Forces is on the loud side, so we\u2019ll set the output to 50% to make sure the compressor is never engaged:</p> <pre><code>[autoexec]\nc:\nmixer master 50\nautotype -w 0.5 1\ndemo\nexit\n</code></pre>"},{"location":"getting-started/dark-forces/#reverse-stereo","title":"Reverse stereo","text":"<p>The sound setup utility asks us to confirm whether the left and right audio channels should be swapped when setting up digital audio. Weird as it may sound, some Sound Blaster models and clones had \u201creversed stereo\u201d for some inexplicable reason. If people used any of these cards during the development of a game, the stereo image would be reversed on normal cards, and vice versa.</p> <p>Irrespective of the exact reasons, the fact is that some games with stereo digital audio support have the left and right channels reversed. In affected games, the channels might be reversed on all Sound Blaster variants, or only on certain models.</p> <p>In the case of Dark Forces, you don\u2019t need to use the \u201creverse stereo\u201d option when emulating a Sound Blaster 16 card (which is the default). However, when using the Sound Blaster Pro 1 model (<code>sbtype = sbpro1</code>), the stereo image needs to be reversed.</p> <p>But what about games that don\u2019t have such a handy \u201creverse stereo\u201d option in their setup utility? For those games, you can simply reverse the left and right channels of the <code>SB</code> mixer channel with the <code>mixer sb reverse</code> command. (Remember, use <code>mixer /?</code> to list all available commands and options.)</p>"},{"location":"getting-started/dark-forces/#minimising-audio-glitches","title":"Minimising audio glitches","text":"<p>Even after setting the optimal cycles value for the game to limit the emulated CPU speed, you might still hear occasional audio glitches. Why this can happen depends on a lot of factors, but mainly it comes down to the particular hardware, driver, and operating system combination you\u2019re using.</p> <p>As a last resort, you can try setting larger audio buffers sizes; this usually helps eliminate the occasional clicks and pops. The downside of this is that it will also increase audio latency, meaning that you\u2019ll hear the audio in response to some action with a longer delay (e.g., when shooting with a gun).</p> <p>The default <code>blocksize</code> value is 1024 on Windows and 512 on macOS and Linux. The default <code>prebuffer</code> size is 25 on Windows and 20 on the other platforms (this is specified in milliseconds). You can experiment with increasing these settings\u2014doubling them is a good start. Generally, <code>prebuffer</code> can be anything, and <code>blocksize</code> should be one of the following values: 256, 512, 1024, 2048, 4096, or 8192. </p> <pre><code>[mixer]\nblocksize = 2048\nprebuffer = 50\n</code></pre>"},{"location":"getting-started/dark-forces/#final-configuration","title":"Final configuration","text":"<p>Here\u2019s the full config of Dark Forces set up for General MIDI sound:</p> <pre><code>[sdl]\nfullscreen = on\nviewport_resolution = 1120x840\n[cpu]\n# to emulate a Pentium 90\ncycles = 50000\n[midi]\nmididevice = fluidsynth\n[fluidsynth]\nsoundfont = \"GeneralUser GS v1.471.sf2\"\n[autoexec]\nc:\nmixer master 50\nautotype -w 0.5 1\ndemo\nexit\n</code></pre>"},{"location":"getting-started/enhancing-prince-of-persia/","title":"Enhancing Prince of Persia","text":""},{"location":"getting-started/enhancing-prince-of-persia/#fullscreen-mode","title":"Fullscreen mode","text":"<p>You can toggle between windowed and fullscreen mode at any time by pressing Alt+Enter. But what if you always want to play the game in fullscreen? Wouldn\u2019t it be nice to configure DOSBox to start in fullscreen mode?</p> <p>You can easily do that by setting <code>fullscreen = on</code> in the <code>[sdl]</code> section. Modify your <code>dosbox.conf</code> file so it has the following content, then restart DOSBox Staging.</p> <pre><code>[sdl]\nfullscreen = on\n[autoexec]\nc:\nprince\nexit\n</code></pre> <p>Note we\u2019ve also added the <code>exit</code> command to the end of the <code>[autoexec]</code> section; with this in place, DOSBox will quit itself after we exit from the game by pressing Ctrl+Q. Not strictly necessary, but a nice touch.</p> <p>Toggling options</p> <p>For configuration settings that toggle an option, you can use <code>on</code>, <code>enabled</code>, <code>yes</code>, <code>true</code> or <code>1</code> for turning the option on, and <code>off</code>, <code>disabled</code>, <code>no</code>, <code>false</code> or <code>0</code> for turning it off.</p> <p>Making configuration changes</p> <p>You need to quit and restart DOSBox Staging after updating <code>dosbox.conf</code> for the changes to take effect. We will not mention this every single time from now on.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#custom-viewport-resolution","title":"Custom viewport resolution","text":"<p>That\u2019s nice, but depending on the size of your monitor, 320\u00d7200 VGA graphics displayed in fullscreen on a 24\u201d or 27\u201d modern monitor might appear overly blocky. If only we could control the size of the image in fullscreen as easily as we can in windowed mode!</p> <p>Well, it turns out we can! You can restrict the viewport size by adding the <code>viewport_resolution</code> setting to the <code>[sdl]</code> section. In this case, we\u2019re restricting the viewport to a maximum size of 1120 by 840 pixels. The emulated video output will be sized so it fits within the bounds of this rectangle while keeping the correct aspect ratio.</p> <pre><code>[sdl]\nfullscreen = on\nviewport_resolution = 1120x840\n</code></pre> <p>We\u2019re effectively applying a 3.5\u00d7 scaling factor here to the 320\u00d7200 VGA graphics:</p> <ul> <li>320 \u00d7 3.5 = 1120</li> <li>and 200 \u00d7 3.5 = 700</li> </ul> <p>Huh, what? Where\u2019s the <code>840</code> in our config coming from then?</p> <p>Computer monitors were originally not widescreen but had a 4:3 aspect ratio, just like old television sets. The complete switch to 16:9 in computer monitors and laptops happened only by the early 2010s. The low-resolution 320\u00d7200 VGA mode was designed to completely fill a 4:3 monitor, but that\u2019s only possible if the pixels are not perfect squares, but slightly tall rectangles. If you do the maths, it turns out they need to be exactly 20% taller for the 320\u00d7200 VGA screen mode (1:1.2 pixel aspect ratio). 700 \u00d7 1.2 = 840, so that\u2019s the explanation.</p> <p></p> <p>Prince of Persia in fullscreen with 1120\u00d7840 viewport resolution restriction   </p> <p>In any case, you don\u2019t need to worry about aspect ratio correctness because DOSBox Staging handles that automatically for you out of the box. It\u2019s just good to have some level of understanding of what\u2019s really happening. If you specify <code>1120x700</code>, that would also work, but because aspect ratio correction is enabled by default, and the image must fit within the bounds of the specified viewport rectangle, the dimensions of the resulting image will be 933 by 700 pixels (because 700 \u00d7 4/3 = 933).</p> <p>But hey, not everybody likes maths, especially in the middle of a DOS gaming session, so you can also specify the viewport resolution as a percentage of your desktop resolution:</p> <pre><code>viewport_resolution = 80%\n</code></pre> <p>When pixels are not squares</p> <p>Sadly, this very important fact of computing history that monitors were not widescreen until about 2010 tends to be forgotten nowadays. Older DOSBox versions did not perform aspect ratio correction by default, which certainly did not help matters either. The unfortunate situation is that you\u2019re much more likely to encounter videos and screenshots of DOS games in the wrong aspect ratio (using square pixels) on the Internet today. Well, that\u2019s only true for more recently created content\u2014if you check out old computer magazine from the 1980s and the 90s, most screenshots are shown in the correct aspect ratio (rarely, the magazines got it wrong too\u2026)</p> <p>In case you\u2019re wondering, pixels are completely square in 640\u00d7480 and higher resolutions (1:1 pixel aspect ratio), but there exist a few more weird screen modes with non-square pixels, e.g., the 640\u00d7350 EGA mode with 1:1.3714 pixel aspect ratio (PAR), the 640\u00d7200 EGA mode with 1:2.4 PAR, and the 720\u00d7348 Hercules graphics mode with 1:1.5517 PAR.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#graphics-adapter-options","title":"Graphics adapter options","text":"<p>DOSBox emulates an SVGA (Super VGA) display adapter by default, which gives you good compatibility with most DOS games. DOSBox can also emulate all common display adapters from the history of the PC compatibles: the Hercules, CGA, and EGA display adapters, among many others.</p> <p>Although the VGA standard was introduced in 1987, it took a good five years until it gained widespread adoption. Games had to support all commonly used graphical standards during this transitional period. Prince of Persia, released in 1990, is such a game; it not only supports all common display adapters, but it also correctly auto-detects them. This is in contrast with the majority of DOS games where you need to configure the graphics manually.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#vga","title":"VGA","text":"<p>The art in Prince of Persia was created for VGA first, so quite naturally the game looks best on a VGA adapter. Most DOS games from the 1990s use the 320\u00d7200 low-resolution VGA mode that allows up to 256 colours to be displayed on the screen, chosen from a palette of 16 million colours.</p> <p></p> <p>Prince of Persia in VGA mode with the default settings   </p>"},{"location":"getting-started/enhancing-prince-of-persia/#ega","title":"EGA","text":"<p>Most games with EGA support use the 320\u00d7200 low-resolution EGA mode that has a fixed 16-colour palette.</p> <p>To run Prince of Persia in EGA mode, you simply need to tell DOSBox to emulate a machine equipped with an EGA adapter. That can be easily done by adding the following configuration snippet:</p> <pre><code>[dosbox]\nmachine = ega\n</code></pre> <p>This is how the game looks with the fixed 16-colour EGA palette:</p> <p></p> <p>Prince of Persia in EGA mode   </p> <p>That\u2019s nice, but it\u2019s not exactly how the graphics looked on an EGA monitor back in the day. Pre-VGA monitors had visible scanlines, and we can emulate that by enabling an OpenGL shader that emulates the CRT monitors (Cathode-Ray Tube) of the era:</p> <pre><code>[render]\nglshader = crt/aperture\n</code></pre> <p>This adds some texture and detail to the image that\u2019s especially apparent on the solid-coloured bricks:</p> <p></p> <p>Prince of Persia in EGA mode using the <code>crt/aperture</code> shader   </p> <p>If you have a 4K display, you might want to try the <code>crt/fakelottes.tweaked</code> shader. Another good one is <code>crt/geom.tweaked</code>.</p> <p>The <code>crt/zfast</code> shader is a good choice for older or integrated graphics cards, and the <code>crt/pi</code> was specifically optimised for the Raspberry Pi.</p> <p>You can view the full list of included CRT shaders here.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#cga","title":"CGA","text":"<p>The notorious CGA adapter, the first colour graphics adapter created for the original IBM PC in 1981, is a serious contender for the worst graphics standard ever invented. In its 320\u00d7200 low-resolution mode, 4 colours can be displayed simultaneously on the screen chosen from a number of fixed palettes. Frankly, all combinations look pretty horrible\u2026</p> <p>But no matter; the game supports it, so we\u2019ll have a look at it. Make the following adjustment to the <code>machine</code> setting, and don\u2019t forget to put on your safety glasses! </p> <pre><code>[dosbox]\nmachine = cga\n</code></pre> <p>Ready? Behold the formidable 4-colour CGA graphics\u2014and what 4 colours those are!</p> <p></p> <p>Prince of Persia in CGA mode using the <code>crt/aperture</code> shader   </p> <p>Tip</p> <p>To compare how the game looks on different graphics adapters, click on one of the CRT shader screenshots to enlarge it, then use the Left and Right arrow keys to switch between the images.</p> <p>Warning</p> <p>Screenshots of CRT shaders in action need to be viewed at 100% magnification; otherwise, you might see strange wavy interference patterns on them caused by the browser rescaling the images. These unwanted artifacts can sometimes resemble repeating rainbow-like patterns, and rest assured, that\u2019s not how CRT emulation is supposed to look in DOSBox Staging!</p> <p>To view a screenshot featuring a CRT shader properly, click on the image to enlarge it, then if your mouse cursor looks like a magnifying glass, click on the image again to display it with 100% magnification.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#hercules","title":"Hercules","text":"<p>The Hercules display adapter was released in 1982 to expand the text-only IBM PCs with basic graphical capabilities. It only supports monochrome graphics, but at a higher 720\u00d7348 resolution. Can you guess how you can enable it?</p> <pre><code>[dosbox]\nmachine = hercules\n</code></pre> <p>If you wish to use a CRT shader, the <code>crt/aperture.mono</code> shader variant has been specifically created for emulating monochrome monitors (it switches off the RGB phosphor and aperture grille emulation of the base <code>crt/aperture</code> shader).</p> <pre><code>[render]\nglshader = crt/aperture.mono\n</code></pre> <p></p> <p>Prince of Persia in Hercules mode using the <code>white</code> paletteand the <code>crt/aperture.mono</code> shader   </p> <p>Monochrome monitors came in different colours; DOSBox Staging can emulate all these variations via the <code>monochrome_palette</code> configuration setting. The available colours are <code>white</code> (the default), <code>paperwhite</code>, <code>green</code>, and <code>amber</code>. You can also switch between them while the game is running with the F11 key on Windows and Linux, and Alt+F11 on macOS.</p> <pre><code>[dosbox]\nmachine = hercules\nmonochrome_palette = amber\n</code></pre> <p>The slightly squashed aspect ratio is correct in this case; this is exactly how the game would look on a PC equipped with a Hercules card connected to a period-accurate monochrome monitor.</p> <p></p> <p>Hercules mode using the <code>amber</code> palette   </p> <p></p> <p>Hercules mode using the <code>green</code> palette   </p> <p>Only for masochists and archeologists!</p> <p>The art in DOS games was usually created for the best graphics standard the game supported, then variants for \u201clesser\u201d standards were derived from that. If you were an unlucky person still stuck with a Hercules or CGA adapter in 1990, being able to play Prince of Persia with any graphics surely beat no game at all!</p> <p>Although we\u2019ve shown how to emulate these earlier graphics standards for completeness\u2019 sake, there\u2019s generally little reason for not playing a DOS game with the best graphics. The list of possible reasons include: a) strong nostalgic feelings towards a particular display adapter; b) research reasons; c) you like your games to look like the user interface of an industrial CNC machine; d) a preference for pain. But hey, who are we to judge?</p> <p>In any case, preserving all relevant aspects of PC gaming history is important for the DOSBox Staging project, so these display options are always available at your fingertips, should you ever need them.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#true-vga-emulation","title":"\u201cTrue VGA\u201d emulation","text":"<p>If you\u2019re the lucky owner of a high-resolution monitor with at least 2000 pixels of native vertical resolution (4K or better monitors belong to this category), you can use \u201ctrue VGA\u201d emulation that more accurately resembles the output of an actual CRT VGA monitor.</p> <p>VGA display adapters have a peculiarity that they display not one but two scanlines per pixel in all low-resolution screen modes that have less than 350 lines. This means the 320\u00d7200 low-resolution VGA mode is really 640\u00d7400, just pixel and line-doubled.</p> <p>To emulate this, we\u2019ll use a CRT shader and exact 4-times scaling by setting the viewport resolution to 1280\u00d7960. This is important for getting even scanlines, and it doesn\u2019t work on regular 1080p monitors because there\u2019s simply not enough vertical resolution for the shader to work with.</p> <p>Logical vs physical pixels</p> <p>Wait a minute, 1280\u00d7960 fits into a 1920x1080 screen, doesn\u2019t it? Why did you say we need a 4K display for this then?</p> <p>Most operating systems operate in high-DPI mode using a 200% scaling factor on 4K displays. This means that the pixel dimensions used by the applications no longer represent physical pixels, but rather logical or device-independent pixels. On a 4K display, assuming a typical 200% scaling factor, our viewport resolution specified in 1280\u00d7960 logical pixels will translate to 2560\u00d71920 physical pixels. A vertical resolution of 1920 pixels is certainly sufficient for displaying those 400 scanlines; the shader can use 4.8 pixels per scanline to do its magic (generally, you need at least 3 pixels per \u201cemulated scanline\u201d to achieve good results).</p> <p>These are the relevant configuration settings to enable authentic double-scanned VGA emulation:</p> <pre><code>[sdl]\nviewport_resolution = 1280x960\n[render]\nglshader = crt/aperture\n</code></pre> <p>Here\u2019s a comparison of how true VGA emulation looks at 4K resolution compared to the standard \u201craw sharp pixel\u201d look (zoom in to appreciate the differences):</p> <p></p> <p>Left: \u201cTrue VGA\u201d emulation; Right: default output (\u201craw sharp pixels\u201d)   </p>"},{"location":"getting-started/enhancing-prince-of-persia/#chorus-reverb","title":"Chorus &amp; reverb","text":"<p>We\u2019ve been discussing graphics at great length, but what about sound? Can\u2019t we do something cool to the sound as well?</p> <p>Yes, we can! DOSBox Staging has an exciting feature to add chorus and reverb effects to the output of any of the emulated sound devices.</p> <p>Create a new <code>[mixer]</code> section in your config with the following content:</p> <pre><code>[mixer]\nreverb = large\nchorus = normal\n</code></pre> <p>Now the intro music sounds a lot more spacious and pleasant to listen to, especially through headphones. There\u2019s even some reverb added to the in-game footsteps and sound effects, although to a much lesser extent.</p> <p>You might want to experiment with the <code>small</code> and <code>medium</code> reverb presets, and the <code>light</code> and <code>strong</code> chorus settings as well.</p> <p>Purist alert!</p> <p>To calm the purists among you: adding reverb and chorus to the OPL synthesiser\u2019s output is something you can do on certain Sound Blaster AWE32 and AWE64 models on real hardware too via the standard drivers.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#auto-pause","title":"Auto-pause","text":"<p>Prince of Persia can be paused by pressing the Esc key during the game. But wouldn\u2019t it be convenient if DOSBox could auto-pause itself whenever you switch to a different window? You can easily achieve that by enabling the <code>pause_when_inactive</code> option in the <code>[sdl]</code> section.</p> <pre><code>[sdl]\nfullscreen = on\nviewport_resolution = 1120x840\npause_when_inactive = yes\n</code></pre> <p>Restart the game and switch to a different window\u2014DOSBox has paused itself. Switch back to DOSBox\u2014the game resumes. Nifty, isn\u2019t it? This is quite handy for those games that have no pause functionality, or when you need to take a break during a long cutscene that cannot be paused.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#final-configuration","title":"Final configuration","text":"<p>Below is the full config with all the enhancements we\u2019ve added, including authentic VGA CRT monitor emulation on 4K displays.</p> <pre><code>[sdl]\nfullscreen = on\nviewport_resolution = 1280x960\npause_when_inactive = yes\n[render]\nglshader = crt/aperture\n[mixer]\nreverb = large\nchorus = normal\n[autoexec]\nc:\nprince\nexit\n</code></pre> <p>If you\u2019re not on a high-DPI display, just delete the whole <code>[render]</code> section to disable the CRT shader.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#configuration-comments","title":"Configuration comments","text":"<p>Instead of deleting those lines, you can prefix them with a <code>#</code> character (Shift+3 on the US keyboard layout) to turn them into comments.</p> <p>Comments are lines starting with a <code>#</code> character; DOSBox ignores them when reading the configuration. Normally, you would use them to add, well, comments to your config, but \u201ccommenting out\u201d a line is a quick way to disable it without actually removing the line.</p> <pre><code>[sdl]\nfullscreen = on\nviewport_resolution = 1280x960\npause_when_inactive = yes\n[render]\n#glshader = crt/aperture\n[mixer]\nreverb = large\nchorus = normal\n[autoexec]\nc:\nprince\nexit\n</code></pre> <p>Note we haven\u2019t commented out the <code>[render]</code> section itself. That\u2019s fine; empty sections are allowed and do no harm.</p>"},{"location":"getting-started/enhancing-prince-of-persia/#inspecting-the-logs","title":"Inspecting the logs","text":"<p>What if you used a wrong value in your config, made a typo, or misremembered the name of a setting? How would you know about it? Having to triple-check every single character of the config when something goes wrong is not a good prospect\u2026 Fortunately, you don\u2019t have to do that because DOSBox can inform you if something went wrong. It does that via the logs, which is just a continuous stream of timestamped messages in a separate window.</p> <p>The behaviour of the log window is different on each platform:</p> Windows <p>The log window is opened by default when you start DOSBox Staging . You can hide the log window by passing the <code>-noconsole</code> argument to the DOSBox Staging executable.</p> macOS <p>DOSBox Staging does not open the log window by default when started via its application icon, or with the Start DOSBox Staging icon you copied from the <code>.dmg</code> installer archive earlier.</p> <p>To make the log window appear, you need to use another shortcut icon called Start DOSBox Staging (logging), which you can copy into your game folder from the same <code>.dmg</code> archive (note the word \u201clogging\u201d in the name of the icon).</p> Linux <p>Start DOSBox Staging from the terminal, and the logs will appear there.</p> <p>Under normal circumstances, the logs contain lots of interesting technical details about what DOSBox Staging is currently doing, what exact settings it uses, and so on. For example, this is the start of the logs when running the game on macOS:</p> <p></p> <p>That\u2019s all good and well, but what\u2019s even better, if an invalid configuration setting has been detected, or something went wrong when running the game, DOSBox Staging will inform us about it in the logs!</p> <p>Let\u2019s now intentionally screw a few things up in the config to trigger some errors:</p> <ul> <li>Set <code>machine</code> to <code>mcp</code></li> <li>Include a bogus config setting in the <code>[sdl]</code> section: <code>no_such_config_param = 42</code></li> <li>Set <code>fullscreen</code> to <code>blah</code></li> <li>Put the letter <code>x</code> in front of the shader\u2019s name</li> </ul> <p>This is how the freshly ruined parts of our config should look like:</p> <pre><code>[sdl]\nfullscreen = blah\nno_such_config_param = 42\n[dosbox]\nmachine = mcp\n[render]\nglshader = xcrt/aperture\n</code></pre> <p>As expected, we\u2019ll see some warnings and errors in the logs after a restart:</p> <p></p> <p>Warnings are yellow, errors are red. Errors are generally reserved for more severe problems. In this example, we have the following:</p> <ul> <li> <p>The first warning tells us that <code>blah</code> is not a valid value for the   <code>fullscreen</code> setting, so DOSBox has reset it to its default value of   <code>false</code>.</p> </li> <li> <p>Then it reprimands us about <code>no_such_config_param</code> that we made up.</p> </li> <li> <p>The third warning complains about an invalid <code>machine</code> value being used   (sorry to disappoint, but DOSBox Staging can\u2019t emulate the Master   Control Program from Tron yet!)</p> </li> <li> <p>Then we have an error because we\u2019re trying to use a non-existing shader.</p> </li> <li> <p>This is followed by yet another rather large warning block that very   helpfully lists the names of all available shaders on our system. That\u2019s   pretty handy!</p> </li> </ul> <p>This is a common theme with the logs. When DOSBox Staging displays some warnings or errors, these messages often include suggestions and tips to help you resolve the issues. Note that these can appear not only at startup but also during running a game, depending on what DOSBox Staging is currently doing.</p> <p>While you might prefer to hide the log window for aesthetic reasons, it\u2019s wiser to just let it be so you can take a peek at it if something goes sideways. Without having access to the logs, your chances of fixing problems are significantly reduced as basically you would be just stumbling in the dark. You\u2019ve been warned!</p> <p>Okay, we\u2019ve pretty much maxed out Prince of Persia for demonstration purposes. Time to move on to another game!</p>"},{"location":"getting-started/introduction/","title":"Introduction","text":""},{"location":"getting-started/introduction/#foreword","title":"Foreword","text":"<p>Welcome to the DOSBox Staging getting started guide!</p> <p>This guide will gently introduce you to the wonderful world of DOSBox by setting up a few example games from scratch. It\u2019s written in the spirit of \u201cteaching a man how to fish\u201d\u2014the games are only vehicles to teach you the basics that you can apply to any DOS game you wish to play later. Consequently, the choice of games doesn\u2019t matter that much (although we tried to pick from the all-time classics).</p> <p>To get the most out of this guide, don\u2019t just read the instructions but perform all the steps yourself! Later chapters build on concepts introduced in previous ones, so do not skip a chapter just because you\u2019re not interested in a particular game! You don\u2019t have to play it if you don\u2019t want to; going through the setup procedure and learning how to troubleshoot various issues is what this is all about. All necessary files will be provided and no familiarity with IBM PCs and the MS-DOS environment is required\u2014everything you need to know will be explained as we go. The only assumption is that you can perform basic everyday computer tasks, such as copying files, unpacking ZIP archives, and editing text files. </p> <p>The guide has been written so that everyone can follow it with ease, regardless of their operating system of choice (e.g., Windows users probably know what the \u201cC drive\u201d is, and most Linux people are comfortable with using the command line, but these things need to be explained to the Mac folks).</p> <p>We wish you a pleasant journey and we hope DOSBos Staging will bring you as much joy as we\u2019re having developing it!</p>"},{"location":"getting-started/introduction/#installing-dosbox-staging","title":"Installing DOSBox Staging","text":"<p>If you already have other versions of DOSBox on your computer, installing DOSBox Staging won\u2019t interfere with them at all. Experienced users can certainly use multiple DOSBox variants on the same machine without problems, but if you\u2019re a beginner, we recommend starting with a clean slate to avoid confusing yourself. Make sure you\u2019ve removed all other DOSBox versions from your machine first, then proceed with the DOSBox Staging installation steps.</p> Windows <p>Download the latest installer from our Windows downloads page, then proceed with the installation. Just accept the default options, don\u2019t change anything.</p> <p>Make sure to read the section about dealing with Microsoft Defender SmartScreen.</p> macOS <p>Download the latest universal binary from our macOS downloads page, then simply drag the DOSBox Staging icon into your Applications folder. Both Intel and M1 Macs are supported.</p> <p>Don\u2019t delete the <code>.dmg</code> installer disk image just yet\u2014we\u2019ll need it later.</p> <p>Make sure to read the section about dealing with Apple Gatekeeper.</p> Linux <p>Please check out our Linux downloads page and use the option that best suits your situation and needs.</p>"},{"location":"getting-started/introduction/#other-stuff-well-need","title":"Other stuff we\u2019ll need","text":"<p>As you follow along, you\u2019ll need to create and edit DOSBox configuration files which are plain text files. While Notepad on Windows or TextEdit on macOS could do the job, it\u2019s preferable to use a better text editor more suited to the task.</p> Windows <p>Windows users are recommended to install the free and open-source Notepad++ editor.</p> <p>Accept the default installer options; this will give you a handy Open with Notepad++ right-click context menu entry in Windows Explorer.</p> <p></p> macOS <p>TextMate is a free and open-source text editor for macOS which is perfect for the job.</p> <p>Tip</p> <p>When editing DOSBox configuration files in TextMate, it\u2019s best to set syntax highlighting to the Properties file format as shown in the below screenshot (it\u2019s the combo-box to the left of the Tab Size combo-box in the footer).</p> <p></p> Linux <p>We\u2019re pretty sure Linux users don\u2019t need any help and have their favourite text editors already. And, of course, everyone knows vim is the best! </p>"},{"location":"getting-started/next-steps/","title":"Next steps","text":""},{"location":"getting-started/next-steps/#thats-all-folks","title":"That\u2019s all, folks!","text":"<p>All good things must come to an end, and this guide is no different!</p> <p>Congratulations\u2014now you should be able to use DOSBox fairly confidently at a basic level, and we\u2019ve actually touched on quite a few intermediate topics as well. Armed with the basics, now you have a much greater chance to figure things out on your own, and you\u2019ll be able  to ask more specific, directed questions from the more experienced members of the community when seeking help.</p> <p>So what\u2019s next? Try setting up a few more games yourself; peruse the various configuration options in the default configuration; look around on our wiki; familiarise yourself with our feature highlights; read the release notes on our downloads page\u2014there are plenty of learning opportunities if you wish to delve deeper!</p> <p>If you\u2019re stuck with something, you can always ask questions from the DOSBox Staging team directly on Discord.</p> <p>Most importantly, experiment, enjoy what classic PC gaming has to offer, and have fun! </p>"},{"location":"getting-started/next-steps/#further-reading","title":"Further reading","text":"<p>As your interest in DOS gaming grows, you might be interested in learning more about the history of PC gaming and PC hardware in general. Below is a selection of the very best learning resources to get you started!</p> RetroGrade - The ultimate guide to pre-millennial PC hardware <p>An excellent collection of articles that takes you through the most important milestones of early PC hardware history, starting from its humble beginnings in the early 1980s right until the year 2000, covering the DOS era in its entirety and then some more.</p> DOS Days <p>This very comprehensive website contains a great deal of information about DOS-era PC hardware, useful tips on setting up DOS games, and articles and guides on a variety of DOS-related topics. It\u2019s a highly recommended resource, and you\u2019ll inevitably end up here anyway when researching anything DOS-related via your favourite search engine\u2026</p> Nerdly Pleasures <p>Written by The Great Hierophant, there\u2019s simply no better resource online that does such extremely thorough and comprehensive deep dives supplanted by original research on a number of interesting DOS gaming related topics.</p> PhilsComputerLab <p>Phil\u2019s YouTube channel offers a dizzying amount of quality content on a variety of retro-PC related topics with a special focus on actual hardware. Checking out his DOS tutorials and MIDI and wavetable series is a good start, but you can pretty much pick any of his videos at random and I guarantee you\u2019ll learn something interesting. His aptly titled three-and-a-half-hour long (!) Roland MT-32, CM-32L, CM-64, CM-500 Ultimate Tutorial is a work of art\u2014probably there isn\u2019t anything more to say on the subject!</p> DOSBox game compatibility list <p>If you\u2019re having problems with a game, it\u2019s worth having a look at the game compatibility list on the old DOSBox website. Although some information there might be outdated (e.g., mentioning DOSBox issues that have long been fixed), some of the comments document important issues present in the original games. That\u2019s one very common trap to fall into, thinking that certain game bugs are caused by emulation and therefore must be fixable at the DOSBox level. Often they\u2019re bugs present in the original games, so you just need to live with them or work around them.</p> VOGONS <p>An acronym for Very Old Games On New Systems, this forum is an oasis for all retro-hardware and retro-gaming enthusiasts, mainly focusing on PC compatibles and DOSBox-related things. The combined knowledge of the community on all things DOS and retro-PC is next to none\u2014try asking any obscure question, and there\u2019s a good chance you\u2019ll get a very detailed (and correct!) answer within a few hours.</p>"},{"location":"getting-started/passport-to-adventure/","title":"Passport to Adventure","text":"<p>Okay, so what we\u2019ll set up next is not a single game, but a collection called Passport to Adventure which contains playable demos of three classic LucasArts point-and-click adventure games: Indiana Jones and the Last Crusade, The Secret of Monkey Island, and Loom. These were the blockbusters of the adventure gaming genre back in the day, and they still offer countless hours of fun if you like puzzle-solving and well-written, intriguing storylines.</p> <p>But before we begin, let\u2019s discuss something fundamental to DOSBox Staging!</p>"},{"location":"getting-started/passport-to-adventure/#default-configuration","title":"Default configuration","text":"<p>Have you wondered how do you learn about all the available configuration settings? When you start DOSBox Staging for the very first time, it creates a so-called default configuration file in a standard location with the name <code>dosbox-staging.conf</code>. This file contains the full list of available settings with their default values, plus a short explanatory text for each.</p> <p>For example, this is the description of the <code>viewport_resolution</code> setting:</p> <pre><code>Set the viewport size (drawable area) within the window/screen:\n  fit:       Fit the viewport to the available window/screen (default).\n  &lt;custom&gt;:  Limit the viewport within to a custom resolution or percentage\n             of the desktop. Specified in WxH, N%, N.M%.\n             Examples: 960x720 or 50%\n</code></pre> <p>Here are the locations of <code>dosbox-staging.conf</code> on each platform:</p> Windows <code>C:\\Users\\%USERNAME%\\AppData\\Local\\DOSBox\\dosbox-staging.conf</code> macOS <code>~/Library/Preferences/DOSBox/dosbox-staging.conf</code> Linux <code>~/.config/dosbox/dosbox-staging.conf</code> <p>Showing the Library folder in Finder</p> <p>The <code>Library</code> folder is hidden by default in the macOS Finder. To make it  visible, go to your home folder in Finder, press Cmd+J to bring up  the view options dialog, and then check Show Library Folder.</p> <p>If you know the exact name of a configuration setting, you can display its explanatory text using the built-in <code>config</code> command. The invocation is <code>config -h</code> followed by a space and the setting\u2019s name. For example:</p> <p></p> <p>It is highly recommended to look up the descriptions of the various settings as you encounter them in this guide. That\u2019s a good way to get gradually acquainted with them and further your knowledge about the available options.</p>"},{"location":"getting-started/passport-to-adventure/#layered-configurations","title":"Layered configurations","text":"<p>In our Prince of Persia example, we created a <code>dosbox.conf</code> configuration file in the game\u2019s folder, then started DOSBox Staging from that folder. In such a scenario, DOSBox loads the default configuration first, then applies the <code>dosbox.conf</code> configuration found in the folder it was started from (the game\u2019s folder), overriding certain default settings.</p> <p>This layered configuration approach is very useful; you can apply broad, general settings in your default global configuration that will apply to all games, then fine-tune these defaults on a per-game basis via local <code>dosbox.conf</code> configurations in the individual game folders.</p> <p>As DOSBox Staging comes with sensible defaults, you can keep these local configurations quite minimal, as we\u2019ve already seen. There\u2019s absolutely no need to specify every single setting in your local game-specific config\u2014that would make configurations very cumbersome to manage, plus it would be difficult to see what settings have been changed from their defaults for a particular game.</p> <p>A word of advice</p> <p>It\u2019s best not to change the default configuration while you\u2019re still a beginner. Even more experienced DOSBox users are generally better off changing the defaults very sparingly as those settings will affect all games. A few things that you might consider changing globally are perhaps always enabling fullscreen, auto-pausing, and certain audio-related settings (e.g., sample rate and buffer sizes). We\u2019ll examine these later.</p>"},{"location":"getting-started/passport-to-adventure/#installing-the-game","title":"Installing the game","text":"<p>Ok, so let\u2019s create the subfolder for our second game then! Create another folder in <code>DOS Games</code> next to <code>Prince of Persia</code> and name it <code>Passport to Adventure</code>. Create the <code>drives</code> subfolder in it and the <code>c</code> subfolder in the <code>drives</code> folder.</p> <p>Download the ZIP archive from the Passport of Adventure item at the Internet Archive, then extract its contents into the <code>c</code> subfolder.</p> <p>Below is the folder structure you should end up with. As explained before, we\u2019ll create one subfolder within <code>DOS Games</code> for each game, then each game folder will contain its own local <code>dosbox.conf</code> configuration specific to that game, along with its own \u201cemulated C drive\u201d in the <code>drives/c</code> subfolder.</p> <p></p>"},{"location":"getting-started/passport-to-adventure/#examining-text-files","title":"Examining text files","text":"<p>By poking around on the C drive a little bit with the <code>dir</code> command, we\u2019ll quickly realise we only have two executables: <code>INSTALL.BAT</code> and <code>SAMPLER.EXE</code>. But there\u2019s also a <code>README.TXT</code>, so let\u2019s check that one out first!</p> <p>We can try displaying its contents with the <code>type README.TXT</code> command (remember, use tab-completion), but that\u2019s not too fruitful as the text is longer than a single screen, so the <code>type</code> command will effectively only display the last page. In such cases, we can \u201cpipe\u201d the output of the <code>type</code> command through the <code>more</code> command that will paginate the preceding command\u2019s output. This is done by executing the following:</p> <pre><code>type README.TXT | more\n</code></pre> <p>The <code>|</code> is called the \u201cpipe\u201d character\u2014how fitting! You can type it by pressing Shift+\\, which is located above the Enter key on the standard US keyboard.</p> <p>But there\u2019s an easier way to accomplish the same thing: we can simply execute <code>more README.TXT</code>. You can think of the <code>more</code> command as a more advanced, paginating version of the <code>type</code> command.</p> <p>Now we can press Enter to advance the text one line at a time, or Space to go to the next page. The command will exit once we\u2019ve reached the end of the file, or we can quit earlier with the Q key. Of course, you can always cheat and read such text files outside of DOSBox, but we wanted to teach you something useful about DOS here.</p> <p>The file contains important instructions about installing and playing the game, including the list of available keyboard shortcuts, so read it carefully. As it turns out, we\u2019ll only need to run <code>SAMPLER.EXE</code>, so let\u2019s just do that!</p>"},{"location":"getting-started/passport-to-adventure/#mouse-capture","title":"Mouse capture","text":"<p>If you\u2019re playing the game in windowed mode, you\u2019ll need to click on the DOSBox Staging window first to \u201ccapture\u201d the mouse so you can move the crosshair-shaped in-game cursor.</p> <p>To \u201crelease\u201d the \u201ccaptured\u201d mouse cursor, middle-click on your mouse, or press the Ctrl+F10 shortcut (Cmd+F10 on macOS). The title bar of the DOSBox Staging window informs you about the current mouse capture state.</p> <p>It\u2019s also possible to tell DOSBox Staging to start with the mouse captured (this might not work on all operating systems, though):</p> <pre><code>[mouse]\nmouse_capture = onstart\n</code></pre>"},{"location":"getting-started/passport-to-adventure/#playing-the-game","title":"Playing the game","text":"<p>This is a really user-friendly program; you can press F1 at the main screen to read the general instructions, then start a game demo by clicking on one of the three game icons on the left. Pressing F1 during the game displays further game-specific help; make sure you read them if you actually want to play these demos. They\u2019re worth playing even if you intend to play the full games later, as the demos contain slightly different scenes, puzzles, and dialogs, plus some fun easter-eggs.</p> <p>For people who really don\u2019t like to read: F5 brings up the save/load/quit dialog, and you can pause/unpause the game with the Space key.</p> <p>Let\u2019s start with the first demo called \u201cIndy\u201d (Indiana Jones and the Last Crusade), mainly because it plays a nice long version of the famous Indiana Jones theme during the intro, and we\u2019re going to investigate the various sound options next!</p> <p></p> <p>Indiana Jones and the Last Crusade \u2014 Title screen   </p> <p></p> <p>Indiana Jones and the Last Crusade \u2014 Opening scene   </p>"},{"location":"getting-started/passport-to-adventure/#sound-options","title":"Sound options","text":""},{"location":"getting-started/passport-to-adventure/#sound-blaster-adlib-sound","title":"Sound Blaster / AdLib sound","text":"<p>The game managed to auto-detect our emulated Sound Blaster card, so what we\u2019re hearing during the intro is AdLib music.</p> <p>\u201cWhoa, let me stop you right there, dude! You said Sound Blaster, so what\u2019s this AdLib thing now?!\u201d</p> <p>Okay, we\u2019ll need to understand a few technical details again. Most Sound Blaster cards support at least two sound generation mechanisms:</p> <ul> <li> <p>Playing digitised sounds (sounds recorded from real-world sources, such     as speech, sound effects, and sometimes even recorded music). This is     referred to as digital audio, digitised sound, sampled audio, PCM     audio, or just voice or speech in the game manuals and setup     utilities (yes, it\u2019s all over the place; I\u2019m sure there are a dozen more     variations out there\u2026)</p> </li> <li> <p>Playing music and sound effects using a built-in synthesiser. This is     usually called AdLib, OPL synthesiser, FM synthesiser, simply just     music, or somewhat confusingly Sound Blaster MIDI.</p> </li> </ul> <p>Storing music as a list of instructions for a synthesiser takes very little disk space (think of sheet music), whereas storing digital audio eats disk space for breakfast (think of uncompressed audio files). Consequently, the vast majority of DOS games use some kind of synthesiser for music, and digital audio is generally reserved for sound effects and speech only.</p> <p>These game demos don\u2019t have any digital sound effects; they all just use the OPL chip of the Sound Blaster for both music and some limited sound effects. The game is clever enough to auto-detect our OPL-equipped Sound Blaster 16 (the default sound card emulated by DOSBox), so we\u2019ll get OPL sound by simply just starting <code>SAMPLER.EXE</code>.</p> <p>Of course, we can enhance the OPL music by adding reverb and chorus effects to it, just as we\u2019ve done with Prince of Persia. Unless you\u2019re an absolute purist, this is generally a good idea, especially when using headphones. We\u2019ll only need to add a few lines to our config:</p> <pre><code>[mixer]\nreverb = medium\nchorus = normal\n</code></pre> <p>Note</p> <p>Prince of Persia can also auto-detect our Sound Blaster 16, but most games are not this clever. As we\u2019ll see in our later game examples, usually we need to manually configure the audio devices using the game\u2019s setup utility.</p> <p>1-minute Sound Blaster OPL synthesiser crash course</p> <p>In case you\u2019re wondering:</p> <ul> <li> <p>OPL is just the name of the Yamaha OPL sound synthesiser chip present     on most Sound Blaster cards.</p> </li> <li> <p>AdLib was an early sound card predating Sound Blasters that featured     the same OPL chip. Perfect AdLib compatibility was one of the Sound     Blasters\u2019 main selling points, therefore in games that support both     AdLib and Sound Blaster for synthesised sound, both options will     usually yield the exact same results.</p> <p>The AdLib card, however, had no support for digital audio, so it\u2019s preferable to pick the Sound Blaster option if the game offers both\u2014 you might also get digital speech and sound effects that way.</p> </li> <li> <p>Sound Blaster MIDI is a weird thing. Most later games after 1992     supported much higher quality MIDI sound modules that used sampled     recordings of real-world instruments. Many of these also provided a     fallback option to play the same MIDI music via the OPL chip, using     synthesised approximations of the same instruments.</p> </li> <li> <p>FM refers to the type of sound synthesis the OPL chip is doing, which     is Frequency Modulation synthesis (or FM synthesis, in short).</p> </li> </ul>"},{"location":"getting-started/passport-to-adventure/#pc-speaker-sound","title":"PC speaker sound","text":"<p>The observant among you might have spotted the list of graphics and sound configuration options in <code>README.TXT</code>. Playing with the graphics options is an exercise for the reader; it should be easy to apply what we\u2019ve learned during setting up Prince of Persia.</p> <p>The sound settings, however, are quite interesting. We can get the executable to print out the list of available options by passing it some invalid argument; <code>SAMPLER /?</code> seems to do the trick:</p> <pre><code>C:\\&gt;SAMPLER.EXE /?\n                                Interpreter Verson 4.0.62\nUnknown flag: '/?'\n\nOptions:\n         h      Hercules(tm) graphics\n         c      CGA graphics\n         t      Tandy(tm) graphics\n         m      MCGA graphics\n         e      EGA graphics\n         v      VGA graphics\n         k      Keyboard\n         j      Joystick\n         mo     Mouse\n         i      Internal speaker\n         ts     Tandy(tm) sounds\n         g      Game Blaster(tm) sounds\n         a      Adlib(tm) sounds\n         d      Two disk drives\n\nFor example, in order to play with EGA Graphics and a mouse,\ntype: SAMPLER e mo\n</code></pre> <p>Okey-dokey, let\u2019s try the \u201cinternal speaker\u201d option by starting the game with the <code>i</code> command-line argument:</p> <pre><code>C:\\&gt;SAMPLER.EXE i\n</code></pre> <p>Well, it does sound a lot worse, doesn\u2019t it?</p> <p>DOSBox emulates the little internal speaker (also known as PC speaker) that was a standard accessory of all PCs for a long time. It was designed to only produce rather primitive bleeps and bloops, but certain games can make it play digitised sound by employing some cunning tricks. In any case, this a bleepy-bloopy type of game\u2026</p> <p>It\u2019s hard to envision anyone willingly subject themselves to the internal speaker experience when a game supports much better quality sound (even nostalgia can\u2019t be that strong!) But in most games released before about 1988, that\u2019s the only sound option you have.</p> <p>For such early games, we can make the PC speaker a little more pleasant to listen to by enabling the special <code>tiny</code> reverb preset. This has been specifically designed for small-speaker audio systems; it simulates the sound of a small integrated speaker in a domestic room. The improvement is particularly noticeable with headphones.</p> <pre><code>[mixer]\nreverb = tiny\n</code></pre>"},{"location":"getting-started/passport-to-adventure/#tandy-sound","title":"Tandy sound","text":"<p>Another option is the \u201cTandy(tm) sounds\u201d you can select with the <code>ts</code> command-line argument. Let\u2019s try it!</p> <pre><code>C:\\&gt;SAMPLER.EXE ts\n</code></pre> <p>Aaaaand, now there\u2019s no sound at all. Why is that?</p> <p>Tandy Corporation was an IBM PC clone manufacturer in the 80s; they produced the Tandy line of home computers that were mostly compatible with the standard PCs but also offered improved sound and graphics capabilities. Developers had to specifically support the Tandy to take advantage of these features. There are relatively few such games, but they are worth seeking out as they provide a better experience, especially in the sound department. The games with Tandy &amp; PCjr exclusive graphics and sound list on our wiki should help you find these pre-1990 Tandy specials.</p> <p>DOSBox can emulate a Tandy machine; we only need to instruct it to do so in our config:</p> <pre><code>[dosbox]\nmachine = tandy\n</code></pre> <p>Emulating the Tandy will cause the standard DOS font to be a bit different; this is normal, don\u2019t be alarmed by it.</p> <p>After a restart, we\u2019re finally hearing different synthesised music which sounds definitely better than the PC speaker rendition, but not as good as the OPL music. Interestingly, the Tandy music plays a little bit faster than the other options.</p> <p>Note</p> <p>If you started <code>SAMPLER.EXE</code> without providing the <code>ts</code> argument to specifically ask for Tandy sound, the game will auto-detect the Sound Blaster\u2019s OPL synthesiser and prefer it over the Tandy sound. That\u2019s understandable; the game is really good at picking the best available sound device!</p> <p>As an exercise, you can disable the Sound Blaster emulation altogether with the below config snippet. Then you can start <code>SAMPLER.EXE</code> without any arguments, and the game will use Tandy sound as that\u2019s the best available option (the PC speaker would be the only other alternative):</p> <pre><code>[sblaster]\nsbtype = none\n</code></pre>"},{"location":"getting-started/passport-to-adventure/#game-blaster-cms-sound","title":"Game Blaster / CMS sound","text":"<p>The demos also support the Game Blaster, which is one of the earliest PC sound cards developed by Creative Technologies, the folks responsible for the Sound Blaster family of cards. The Game Blaster was also sold under the name Creative Music System, or just CMS for short.</p> <p>To enable it, we\u2019ll need to set the emulated Sound Blaster type (<code>sbtype</code>) to Game Blaster (<code>gb</code>), and the game will auto-detect it correctly. As the Game Blaster is the precursor of the Sound Blaster lineup, it kind of makes sense to lump it into the same category under the <code>sbtype</code> setting.</p> <pre><code>[sblaster]\nsbtype = gb\n</code></pre> <p>The Game Blaster has a different-sounding synthesiser. Apart from its nice pure sound, another of its characteristics is that the voices play either completely on the left or on the right channel, making the music somewhat difficult to listen to through headphones. This can be easily remedied by enabling the <code>crossfeed</code> option which mixes a certain percentage of the left channel into the right, and vice versa:</p> <pre><code>[mixer]\ncrossfeed = on\n</code></pre> <p>Naturally, you can combine crossfeed with chorus and reverb, and you can also specify a custom crossfeed amount if you\u2019re not happy with the default value of 40%:</p> <pre><code>crossfeed = 50\n</code></pre> <p>Try it with headphones; the improvement is very noticeable!</p>"},{"location":"getting-started/passport-to-adventure/#true-ega-emulation","title":"\u201cTrue EGA\u201d emulation","text":"<p>Many classic graphic adventure games, including most of the early Sierra and LucasArts catalogue and this collection of game demos, feature EGA graphics. The most commonly used EGA screen mode in games is 320\u00d7200 with a fixed 16-colour palette.</p> <p>EGA monitors had visible \u201cfat\u201d scanlines and the pixels were a bit round, whereas later VGA monitors displayed EGA graphics without strong scanlines, and the pixels appeared as little sharp rectangles. It\u2019s as if EGA monitors had a \u201cbuilt-in filter\u201d that smoothed the image somewhat while adding a subtle texture to it as well, making it more interesting and pleasant to look at. Later VGA cards and monitors \u201cdropped\u201d this filter and were just displaying the \u201craw pixels\u201d without any such effects. This perceptual difference is because of the line-doubling peculiarity of VGA adapters in all low-resolution screen modes, as explained previously.</p> <p>VGA-style line-doubling changes the feel of EGA graphics, and many prefer the original EGA look. After all, this is what the artists saw on their screens when creating the artwork. Fortunately, as we\u2019ve seen in our Prince of Persia example, you can easily emulate the \u201ctrue EGA\u201d look with shaders if that\u2019s your preference.</p> <p>It\u2019s also worth restricting the image size to mimic that of a period-correct 14\u201d or 15\u201d monitor (see the detailed explanation here).</p> <pre><code>[render]\nglshader = crt/aperture\n[sdl]\nviewport_resolution = 1120x840\n</code></pre> <p></p> <p>Indiana Jones and the Last Crusade \u2014EGA (as displayed by VGA monitors)   </p> <p></p> <p>Indiana Jones and the Last Crusade \u2014\u201cTrue EGA\u201d emulation   </p> <p></p> <p>The Secret of Monkey Island \u2014EGA (as displayed by VGA monitors)   </p> <p></p> <p>The Secret of Monkey Island \u2014\u201cTrue EGA\u201d emulation   </p> <p></p> <p>Loom \u2014 EGA (as displayed by VGA monitors)   </p> <p></p> <p>Loom \u2014 \u201cTrue EGA\u201d emulation   </p> <p>On recolouring the classics</p> <p>Some adventure games that originally supported EGA graphics only also got later VGA remakes. While many of these VGA versions are competent, they rarely reach the artistic genius of the EGA originals, plus often they don\u2019t have the exact same gameplay either. This is especially true for the three classic LucasArts games included in this demo collection. You can check out the comparison and analysis of the EGA versus VGA versions of Indiana Jones and the Last Crusade and Loom here.</p> <p>In another article, Brian Moriatry, the creator of Loom, shares his opinion about the VGA remake of the game (he calls it \u201can abomination\u201d, so apparently he\u2019s quite unimpressed\u2026)</p> <p>In any case, the point here is it would be a mistake to outright dismiss the original EGA experiences, thinking they are \u201cinferior\u201d somehow. Even if you might prefer the VGA remakes in the end, you should at least give the EGA originals a chance.</p>"},{"location":"getting-started/passport-to-adventure/#cpu-sensitive-games","title":"CPU sensitive games","text":"<p>Certain older games, such as these three demos, are sensitive to CPU speed. This can manifest in different ways:</p> <ul> <li> <p>The game may run too fast or may generally act weird if the emulated CPU is   too fast (the more common case).</p> </li> <li> <p>The game may fail the sound card detection and won\u2019t even start up (that\u2019s   rarer).</p> </li> </ul> <p>This game falls into the second category. Note we\u2019re talking about the speed of the emulated CPU here, not the speed of the physical CPU in your computer!</p> <p>DOSBox defaults to emulating 3000 CPU instructions, or cycles, per millisecond. For the more technically inclined among you, this corresponds to ~3 MIPS (Million Instructions Per Second). When running in windowed mode, the text in the title bar informs you about the current cycles value, e.g.:</p> <pre><code>DOSBOX - 3000 cycles/ms\n</code></pre> <p>Let\u2019s see what happens if we double the emulated CPU speed!</p> <pre><code>[cpu]\ncycles = 6000\n</code></pre> <p>Now we\u2019re greeted by an error when trying to start the game:</p> <pre><code>run-time error R6003\n- integer divide by 0\n\nC:\\&gt;\n</code></pre> <p>We will discuss the CPU speed settings in more detail in the next chapter, but it was worth mentioning this interesting quirk here.</p>"},{"location":"getting-started/passport-to-adventure/#final-configuration","title":"Final configuration","text":"<p>Here\u2019s the full config with all variations included as comments:</p> <pre><code>[sdl]\nfullscreen = on\n[dosbox]\n# uncomment for Tandy sound\n#machine = tandy\n[sdl]\nviewport_resolution = 1120x840\n[mouse]\nmouse_capture = onstart\n[render]\nglshader = crt/aperture\n[sblaster]\n# uncomment for Game Blaster audio\n#sbtype = gb\n[mixer]\n# change 'reverb' to 'tiny' for the PC speaker\nreverb = medium\nchorus = normal\ncrossfeed = on\n[autoexec]\nc:\n# use for PC speaker sound\n#sampler i\n# use for Tandy sound\n#sampler ts\nsampler\nexit\n</code></pre>"},{"location":"getting-started/prince-of-persia/","title":"Setting up Prince of Persia","text":""},{"location":"getting-started/prince-of-persia/#first-steps","title":"First steps","text":"<p>We will set up the demo version of Prince of Persia, the classic cinematic platformer from 1990 as our first example. It was a landmark game, and it can still provide countless hours of entertainment if you like platformers that require you to exercise that pesky grey matter a bit too.</p> <p>First of all, we\u2019ll create a new folder for storing all our DOS games. We\u2019ll use <code>DOS Games</code> throughout this guide, but you can pick any name you like. It\u2019s best to create this folder in your regular documents folder so DOSBox Staging has full read and write access to it (don\u2019t put it in a system folder, e.g., <code>Program Files</code> on Windows). Each game will have its dedicated subfolder under <code>DOS Games</code>, so let\u2019s create our first one called <code>Prince of Persia</code>.</p> <p>Now download pop1.zip from the Prince of Persia demo page and extract its contents into <code>DOS Games/Prince of Persia</code>. The archive contains only two files: <code>pop1.txt</code> (a regular text file) and <code>pop1demo.exe</code> (an MS-DOS executable). Let\u2019s open <code>pop1.txt</code> in our text editor!</p> <pre><code>It's like an Arabian Nights movie come to life... with you as the star!\nLeap into an exotic labyrinth of heart-stopping action, challenging mazes,\nintrigue and superb animation that's breathtakingly realistic!\n\nThis is a demonstration version which only has limited functionality.  To\nobtain the full program, just access GO BB, and order it from our store.\n</code></pre> <p>I\u2019m not quite sold on the \u201cheart-stopping\u201d part, but otherwise sounds intriguing! As indicated by the second paragraph, this is a fully playable demo version that includes only the first two levels of the game. That\u2019s more than enough for our purposes here, and you can always get the full game later.</p> <p>But there are no further instructions, so what should we do next? Well, setting up old DOS games is not all that dissimilar to solving adventure game puzzles. Getting past these puzzles requires some logical thinking, a little bit of background knowledge, and an element of trial and error is occasionally involved as well. Well, the user manual often helps too if you happen to own the original, or can procure a scanned copy online (most often you can).</p> <p>Luckily, this is an easy one: executable files (programs or scripts you can start) under MS-DOS have the <code>.EXE</code>, <code>.COM</code> or <code>.BAT</code> file extension, so looking at <code>pop1demo.exe</code> the solution is quite obvious: we\u2019ll need to run this executable file in DOSBox!</p>"},{"location":"getting-started/prince-of-persia/#the-c-drive","title":"The C drive","text":"<p>Most DOS games need a hard drive as a hard requirement (okay, I\u2019ll show myself to the door\u2026), but DOSBox doesn\u2019t have access to your computer\u2019s hard drive by default where your programs and documents reside\u2014we need to tell it which folder to use as its \u201cvirtual DOS hard drive\u201d. This is called mounting; we mount a folder as the \u201cDOS hard drive\u201d, the contents of which are then available to DOSBox as the C drive. All drives in DOS are assigned to the letters of the English alphabet (just like in Windows) and the C drive is usually your first hard drive.</p> <p>The recommended way to mount the C drive is to create a <code>drives</code> subfolder inside your game folder. This <code>drives</code> folder is a \u201cmagic\u201d folder with a special purpose: all its subfolders having single-letter names are automatically mounted as DOS drives with the same letter. In our case, we only need a single C drive, so we\u2019ll create a <code>c</code> subfolder inside our <code>drives</code> folder (technically, it does not make a difference if you use uppercase or lowercase <code>C</code> on Windows and macOS; Linux people should use lowercase <code>c</code>). We\u2019ll then copy the files from the <code>pop1.zip</code> archive into <code>drives/c</code> to end up with the following folder structure:</p> <p></p> <p>Origins of the C drive</p> <p>Have you ever wondered where the \u201cC drive\u201d in Windows got its name from? This is something Windows inherited from its MS-DOS heritage (which in turn inherited it from CP/M). In DOS, all drives are assigned letters from A to Z. Most computers of the era had two floppy drives, so letters A and B were reserved for them or other removable media, and the first hard drive partition was usually assigned to the letter C. We no longer have floppy drives in our computers as standard equipment, but this tradition stuck around for backwards-compatibility reasons.</p> <p>Important</p> <p>If you\u2019re a Windows user, do not confuse your real C drive where your operating system and programs are stored with the \u201cvirtual DOS C drive\u201d of DOSBox. It is important to understand the distinction between these two as they are completely separate concepts\u2014DOSBox will not see the contents of your real C drive by default (or the contents of any of your other drives, for that matter).</p>"},{"location":"getting-started/prince-of-persia/#starting-dosbox-staging","title":"Starting DOSBox Staging","text":"<p>Okay, with our C drive set up and ready to go, the next step is to start DOSBox Staging from our <code>DOS Games/Prince of Persia</code> folder. This is accomplished slightly differently on each platform:</p> Windows <p>Warning</p> <p>After installing DOSBox Staging, it\u2019s highly recommended to open it once using the Start Menu shortcut of the desktop icon as described here, otherwise the below instructions might not work.</p> <p>If you have used the installer with the default options to set up DOSBox Staging (and it\u2019s highly recommended to do so while you\u2019re still learning the ropes), simply right-click on the <code>Prince of Persia</code> folder in Windows Explorer and select the Open with DOSBox Staging in the context menu.</p> <p>Alternatively, you can enter the folder, right-click anywhere on the blank area inside it, then select Open with DOSBox Staging in the context menu.</p> macOS <p>Warning</p> <p>After installing DOSBox Staging, you must open it first using its application icon as described here, otherwise the below instructions won\u2019t work.</p> <ol> <li>Mount the DOSBox Staging installer <code>.dmg</code> image file.</li> <li>Copy the Start DOSBox Staging icon from the appearing window into the    <code>Prince of Persia</code> folder.</li> <li>Right-click or Ctrl-click the icon, then select the topmost    Open menu item.</li> <li>A dialog with the following text will appear: macOS cannot verify the    developer of \u201cStart DOSBox Staging\u201d. Are you sure you want to open it?</li> <li>Press the Open button.</li> <li>A dialog will open, asking for permission to allow DOSBox Staging access    your Documents folder. Click on the OK button.</li> </ol> <p>You only need to perform this procedure once when opening the Start DOSBox Staging icon for the first time. After the first launch, you can use it like any other regular icon.</p> <p>Tip</p> <p>To avoid having to repeat these steps whenever you set up a new game, copy an icon on which you have already performed this initial procedure into your new game folder, rather than copying the original one from the <code>.dmg</code> file.</p> Linux <p>Open your favourite terminal, <code>cd</code> into the <code>Prince of Persia</code> directory, then run the <code>dosbox</code> command from there.</p> <p>Make sure to check with the <code>--version</code> argument that you\u2019re running DOSBox Staging and not some other DOSBox variant:</p> <pre><code>% dosbox --version\ndosbox-staging, version 0.81.0\n\nCopyright (C) 2020-2022  The DOSBox Staging Team\nLicense: GNU GPL-2.0-or-later &lt;https://www.gnu.org/licenses/gpl-2.0.html&gt;\n</code></pre> <p>Alternatively, create a shell script or a shortcut on your desktop that executes the following command:</p> <pre><code>dosbox --working-dir &lt;PATH&gt;\n</code></pre> <p><code>&lt;PATH&gt;</code> is the absolute path of your game directory (<code>Prince of Persia</code> in this case).</p>"},{"location":"getting-started/prince-of-persia/#installing-the-game","title":"Installing the game","text":"<p>You\u2019ll be greeted by the following window when starting DOSBox Staging:</p> <p></p> <p>Let\u2019s ignore the polite welcome message for now and focus on the text below the big blue rectangle:</p> <pre><code>Local directory drives/c/ mounted as C drive\nZ:\\&gt;_\n</code></pre> <p>The first line is pretty straightforward\u2014it tells us that DOSBox mounted <code>drives/c</code> we created earlier as the \u201cC drive\u201d.</p> <p>The second line is the DOS prompt. DOS has a command line interface that predates graphical user interfaces we\u2019re accustomed to from modern operating systems. We get DOS to do things by typing in commands, and if manage to do this correctly, DOS will follow our instructions to the letter (pun intended!) DOS is not a multitasking operating system; you can only do a single thing in it at any given point in time.</p> <p>Let\u2019s analyse the prompt a little bit. It always starts with a letter followed by a semicolon which denotes the current drive. Right after startup, this is always the <code>Z</code> drive. This is a special drive that\u2019s always available; DOSBox stores some of its commands on it\u2014you don\u2019t need to worry about it now.</p> <p>After the semicolon is the path of the current folder or current directory in DOS terminology. This is currently the root directory of the <code>Z</code> drive as indicated by the <code>\\</code> (backslash) character. The <code>&gt;</code> character just signifies the end of the prompt, and the blinking underscore (<code>_</code>) character after it is\u2014guess what?\u2014the cursor.</p> <p>Okay, enough theory, type in <code>C:</code> and then press Enter to switch to the C drive. The prompt should now reflect that we\u2019re in the root directory of the C drive:</p> <pre><code>Z:\\&gt;c:\nC:\\&gt;_\n</code></pre> <p>Type in <code>dir</code> and press Enter to list the contents of the current directory:</p> <pre><code>C:\\&gt;dir\n Volume in drive C is CDRIVE\n Directory of C:\\\n\nPOP1     TXT                     362 07/07/1995 10:12a\nPOP1DEMO EXE                 267,420 07/05/1995  9:53a\n                2 file(s)               268,116 bytes\n                0 dir(s)            262,144,000 bytes free\nC:\\&gt;_\n</code></pre> <p>Well, that\u2019s what we put into our virtual C drive, so nothing too spectacular so far. We\u2019ll execute <code>pop1demo.exe</code> next! Type in <code>pop</code> and press the Tab key once to instruct DOSBox to complete the filename for you. This handy feature is called tab completion and it saves you from a lot of typing! Press Tab a few more times and observe how it alternates between <code>POP1.TXT</code> and <code>POP1DEMO.EXE</code>; this makes sense as these are the only two files in the current directory that start with <code>pop</code>.</p> <p>Okay, let\u2019s make sure <code>POP1DEMO.EXE</code> is displayed in the prompt then press Enter to run this executable file. It turns out this is a self-extracting archive that unpacks its contents into the current directory when you run it. The following will appear (I\u2019ve redacted the list of extracted files):</p> <pre><code>C:\\&gt;POP1DEMO.EXE\n\nPKSFX (R)   FAST!   Self Extract Utility   Version 2.04g  02-01-93\nCopr. 1989-1993 PKWARE Inc. All Rights Reserved. Shareware version\nPKSFX Reg. U.S. Pat. and Tm. Off.\n\nSearching EXE: C:/POP1DEMO.EXE\n  Inflating: CDUNGEON.DAT\n  Inflating: DIGISND1.DAT\n\n  ...\n\n  Inflating: PRINCE.EXE\n\nC:\\&gt;_\n</code></pre> <p>The more observant among you might have noticed the last entry, <code>PRINCE.EXE</code>. Bingo, that\u2019s our game executable! But let\u2019s pretend we haven\u2019t spotted it; how do we find all executables in the current directory? By issuing the <code>dir</code> command with the <code>*.exe</code> wildcard search pattern!</p> <p>But instead of typing in <code>dir *.exe</code>, press Up a few times until <code>dir</code> appears in the command line, then type in the rest (Space character followed by <code>*.exe</code>). This handy feature is called command history\u2014you can move forward and backward in the list of previously executed commands with the Down and Up keys, respectively.</p> <p>Okay, so here\u2019s how the output looks like:</p> <pre><code>C:\\&gt;dir *.exe\n Volume in drive C is CDRIVE\n Directory of C:\\\n\nPOP1DEMO EXE                 267,420 07/05/1995  9:53a\nPRINCE   EXE                 123,335 03/29/1990  0:00a\n                2 file(s)               390,755 bytes\n                0 dir(s)            262,144,000 bytes free\nC:\\&gt;_\n</code></pre> <p>Tip</p> <p>Alternatively, you can use the <code>ls</code> command that displays the directory contents in a wide list format. This command highlights executable files in green (<code>.EXE</code>, <code>.COM</code>, and <code>.BAT</code> file extensions) and directories (folders) in blue.</p> <p>FAT filesystem</p> <p>MS-DOS uses the FAT filesystem that allows up to 8-character filenames, followed optionally by a file extension consisting of a dot and at most three further characters. Filenames can only contain uppercase letters, digits, and certain special characters, such as the dash (<code>-</code>), underscore (<code>_</code>), and the exclamation mark (<code>!</code>).</p> <p>The two files we originally copied to our <code>drives/c</code> folder had all lowercase filenames (<code>pop1.txt</code> and <code>pop1demo.exe</code>). This does not matter as DOSBox automatically converts all filenames in our <code>drives/c</code> folder to uppercase behind the scenes.</p>"},{"location":"getting-started/prince-of-persia/#starting-the-game","title":"Starting the game","text":"<p>There\u2019s nothing else left to do than to start <code>PRINCE.EXE</code> (type in the letter <code>p</code>, press Tab to auto-complete it to <code>PRINCE.EXE</code>, then press Enter). After a short loading, the title screen will appear and you\u2019ll hear the classic Prince of Persia intro music playing! Don\u2019t press any key yet, just wait and watch the intro sequence until the end to learn about the game\u2019s backstory.</p> <p></p> <p>Prince of Persia \u2014 Title screen   </p> <p></p> <p>Prince of Persia \u2014 Scene from the intro sequence   </p> <p>If you keep watching, the game will enter demo mode, where the protagonist will soon meet his untimely death\u2026 Surely, we can do better than that! Press any key to start the game!</p> <p>You control the prince with the cursor keys, and you can walk carefully by holding the Shift key. It\u2019s not that hard to figure out the various movement combinations on your own, but reading the Controlling Your Movements section of the user manual should definitely help. The manual also contains helpful hints and a full list of keyboard shortcuts you can use during the game.</p> <p></p> <p>This is where the adventure starts!   </p> <p>Congratulations, you\u2019ve got your very first DOS game running in DOSBox Staging! Have some fun, try to find the sword and overcome a few guards, and maybe even attempt to complete the first level.</p> <p>You can quit the game by pressing Ctrl+Q which will return you to the DOS prompt. There you can use the <code>exit</code> command to close DOSBox. Of course, you can quit DOSBox any time by pressing Alt+F4 on Windows and Linux, or Cmd+Q on macOS.</p> <p>Note</p> <p>The Ctrl+Q shortcut for quitting the game is specific to Prince of Persia. Other games might provide completely different mechanisms for exiting to DOS, or perhaps none at all.</p> <p>How to approach old games</p> <p>If you\u2019ve only ever played modern games, you\u2019re probably in for a bit of a culture shock! There\u2019s minimal to no handholding in most DOS games from the 1980s and the 90s; you are expected to read the user manual, often there is no in-game tutorial, and the games are generally unforgiving and require a level of dedication from the player that\u2019s uncommon in more modern titles.</p> <p>However, this does not mean that these games are less fun, on the contrary! The old adage \u201cyou get out what you put in\u201d is certainly true for old DOS games. Many people (including the author of this present article) think that the satisfaction and enjoyment you get when mastering such difficult games have few parallels in the modern gaming landscape.</p>"},{"location":"getting-started/prince-of-persia/#auto-executing-commands-at-startup","title":"Auto-executing commands at startup","text":"<p>Every time we want to play the game, we need to type in DOS commands to switch to the C drive and run <code>PRINCE.EXE</code> from there. Isn\u2019t there a way to automate this?</p> <p>There certainly is! We need to create a so-called configuration file that can contain various settings to customise the behaviour of DOSBox, along with a list of commands to auto-execute at startup.</p> <p>Launch your text editor of choice and create a new plain text file called <code>dosbox.conf</code> inside the <code>Prince of Persia</code> folder with the following content:</p> <pre><code>[autoexec]\nc:\nprince\n</code></pre> <p>The commands you want to be executed right after startup should be listed in the aptly titled <code>[autoexec]</code> configuration section, each command in a separate line. Configuration sections are introduced by names enclosed in square brackets; everything that follows belongs to that section.</p> <p>Warning</p> <p>Some text editors insist on appending the <code>.txt</code> extension after the filename you enter in their save dialog. This might result in creating a file called <code>dosbox.conf.txt</code> which won\u2019t work. Get to know your text editor and make sure you save the configuration file as <code>dosbox.conf</code></p> <p>When DOSBox starts, it looks for this special <code>dosbox.conf</code> file in the folder it was started from, and if it finds it, it configures the DOS environment and DOSBox itself according to its contents. This is handy because we can put a different configuration file into each of our game folders to set them up differently (this is necessary; it\u2019s simply impossible to create a single configuration that would work with all DOS games).</p> <p>Just to make everything absolutely clear, this is the folder structure we should have at this point (only the first four files are shown in <code>drives/c</code> to save space):</p> <p></p> <p>Starting up DOSBox Staging from the <code>Prince of Persia</code> folder should now launch the game right away without any manual intervention!</p> <p>So far so good\u2014now let\u2019s see how we can use the advanced features offered by DOSBox Staging to our advantage!</p> <p>DOSBox vs DOSBox Staging</p> <p>Astute readers might have noticed that the guide sometimes refers to \u201cDOSBox Staging\u201d and sometimes to just \u201cDOSBox\u201d. Why is that?</p> <p>As explained on our about page, DOSBox Staging is a modern continuation of the original DOSBox project. Technically, DOSBox Staging is an open-source fork of and separate project from the SourceForge-hosted DOSBox project.</p> <p>Generally, we use \u201cDOSBox Staging\u201d when we discuss features specific to Staging, or when we talk about the DOSBox Staging application, installer, or process itself. But when mentioning base functionality present in the original DOSBox and pretty much all other DOSBox variants, we simply write \u201cDOSBox\u201d. Admittedly, sometimes the distinction gets rather blurry, and seeing \u201cDOSBox Staging\u201d fully typed out everywhere would get old rather quickly!</p> <p>Using the term \u201cDOSBox\u201d is also a nod to the original DOSBox developers to whom we are grateful for starting this awesome open-source project in the first place!</p>"}]}